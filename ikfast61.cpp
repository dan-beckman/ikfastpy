/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004b generated on 2022-05-14 20:16:22.960506
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004b);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.03) // 5D IK has some crazy degenerate cases, but can rely on jacobian refinment to make better, just need good starting point
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

template <typename T> struct ComplexLess
{
    bool operator()(const complex<T>& lhs, const complex<T>& rhs) const
    {
        if (real(lhs) < real(rhs)) {
            return true;
        }
        if (real(lhs) > real(rhs)) {
            return false;
        }
        return imag(lhs) < imag(rhs);
    }
};

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKcos(j[5]);
x8=IKsin(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[0]);
x11=IKsin(j[4]);
x12=((0.2258)*x5);
x13=((1.0)*x5);
x14=((1.0)*x6);
x15=((1.0)*x10);
x16=((1.0)*x0);
x17=((0.392)*x0);
x18=((0.1)*x10);
x19=((0.1)*x4);
x20=((0.425)*x1);
x21=((1.0)*x9);
x22=((0.2258)*x6);
x23=((0.392)*x10);
x24=(x10*x9);
x25=(x1*x2);
x26=(x2*x3);
x27=(x3*x4);
x28=(x1*x4);
x29=((0.1)*x26);
x30=(x16*x27);
x31=(x15*x27);
x32=(x26+x28);
x33=((((-1.0)*x27))+(((1.0)*x25)));
x34=(x32*x5);
x35=(x33*x6);
x36=((((-1.0)*x30))+((x0*x25)));
x37=((((-1.0)*x31))+((x10*x25)));
x38=(x16*(((((-1.0)*x26))+(((-1.0)*x28)))));
x39=(x15*(((((-1.0)*x26))+(((-1.0)*x28)))));
x40=(x37*x5);
x41=(((x33*x5))+((x6*(((((-1.0)*x26))+(((-1.0)*x28)))))));
x42=(((x38*x6))+((x36*x5)));
x43=(x40+((x39*x6)));
x44=(((x6*(((((-1.0)*x16*x25))+x30))))+((x38*x5)));
x45=(((x6*(((((-1.0)*x15*x25))+x31))))+((x39*x5)));
x46=(x42*x9);
eerot[0]=(((x7*((x46+((x10*x11))))))+((x44*x8)));
eerot[1]=(((x8*(((((-1.0)*x11*x15))+(((-1.0)*x21*x42))))))+((x44*x7)));
eerot[2]=(x24+((x11*(((((-1.0)*x14*x38))+(((-1.0)*x13*x36)))))));
IkReal x47=(x0*x19);
eetrans[0]=((((-1.0)*x0*x20))+(((0.2258)*x24))+(((-1.0)*x17*x25))+((x11*(((((-1.0)*x12*x36))+(((-1.0)*x22*x38))))))+(((0.134)*x10))+((x5*((((x0*x29))+((x1*x47))))))+((x17*x27))+((x6*(((((-1.0)*x3*x47))+(((0.1)*x0*x25)))))));
eerot[3]=(((x7*(((((-1.0)*x0*x11))+((x43*x9))))))+((x45*x8)));
eerot[4]=(((x8*((((x11*x16))+(((-1.0)*x21*x43))))))+((x45*x7)));
eerot[5]=(((x11*(((((-1.0)*x14*x39))+(((-1.0)*x13*x37))))))+(((-1.0)*x16*x9)));
eetrans[1]=((((-0.2258)*x0*x9))+((x23*x27))+((x11*(((((-1.0)*x12*x37))+(((-1.0)*x22*x39))))))+(((-0.134)*x0))+(((-1.0)*x10*x20))+((x5*((((x18*x28))+((x18*x26))))))+((x6*((((x18*x25))+(((-1.0)*x18*x27))))))+(((-1.0)*x23*x25)));
eerot[6]=(((x7*x9*((x35+x34))))+((x41*x8)));
eerot[7]=(((x41*x7))+((x8*x9*(((((-1.0)*x35))+(((-1.0)*x34)))))));
eerot[8]=(x11*(((((-1.0)*x14*x33))+(((-1.0)*x13*x32)))));
eetrans[2]=((0.163)+((x6*((((x1*x19))+x29))))+(((-0.392)*x26))+(((-0.392)*x28))+(((-0.425)*x3))+((x11*(((((-1.0)*x12*x32))+(((-1.0)*x22*x33))))))+((x5*((((x19*x3))+(((-0.1)*x25)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API const int* GetFreeIndices() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=(px+(((-0.2258)*r02)));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-0.2258)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.163)+(((-0.2258)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x48=((1.0)*px);
IkReal x49=((1.0)*pz);
IkReal x50=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x50))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x49)));
rxp0_2=((((-1.0)*r10*x48))+((py*r00)));
rxp1_0=((((-1.0)*r21*x50))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x49)));
rxp1_2=((((-1.0)*r11*x48))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x50)));
rxp2_1=((((-1.0)*r02*x49))+((px*r22)));
rxp2_2=((((-1.0)*r12*x48))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x51=((0.2)*npx);
IkReal x52=((0.2)*npy);
IkReal x53=((0.1)*r22);
IkReal x54=((0.1)*r21);
IkReal x55=((-0.1)*r20);
IkReal x56=((-1.0)*r20);
IkReal x57=((-1.0)*rxp0_2);
IkReal x58=((-0.1)*r21);
IkReal x59=((-1.0)*r21);
IkReal x60=((-1.0)*rxp1_2);
IkReal x61=((-1.0)*npx);
IkReal x62=((-1.0)*r22);
IkReal x63=((-1.0)*npz);
matrixinvcoeffs[0]=x55;
matrixinvcoeffs[1]=x51;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x56;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x57;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x55;
matrixinvcoeffs[19]=x51;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x56;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x57;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x58;
matrixinvcoeffs[33]=x52;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x59;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x60;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x58;
matrixinvcoeffs[51]=x52;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x59;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x60;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x62;
matrixinvcoeffs[76]=x53;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x63;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x53;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x60;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x58;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x60;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x54;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x56;
matrixinvcoeffs[133]=x61;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.1)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x56;
matrixinvcoeffs[151]=x61;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x55;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x62;
matrixinvcoeffs[165]=x63;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x53;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x62;
matrixinvcoeffs[183]=x63;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.1)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x59;
matrixinvcoeffs[204]=x54;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x60;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x54;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x61;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x55;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x56;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x55;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x57;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x64=pz*pz;
IkReal x65=pp*pp;
IkReal x66=((0.2)*pz);
IkReal x67=(pp*r21);
IkReal x68=(gclwh13_10*rxp1_2);
IkReal x69=((0.00134)*r22);
IkReal x70=(npx*pz);
IkReal x71=((0.001)*r21);
IkReal x72=(pp*r20);
IkReal x73=(npy*pz);
IkReal x74=((4.0)*gclwh12_11);
IkReal x75=(gclwh10_11*r22);
IkReal x76=((0.00784)*r21);
IkReal x77=(pp*r22);
IkReal x78=(gclwh15_9*r20);
IkReal x79=(gclwh15_1*r20);
IkReal x80=(gclwh12_8*r21);
IkReal x81=((0.01)*r22);
IkReal x82=((0.2)*rxp2_2);
IkReal x83=(gclwh4_3*pp);
IkReal x84=(npz*pz);
IkReal x85=((2.0)*gclwh11_10);
IkReal x86=((0.01)*r21);
IkReal x87=(gclwh2_0*pz);
IkReal x88=(gclwh14_2*pz);
IkReal x89=(gclwh14_11*rxp0_2);
IkReal x90=((0.4)*rxp2_2);
IkReal x91=((0.00784)*r22);
IkReal x92=((1.0)*pz);
IkReal x93=((2.0)*gclwh4_11);
IkReal x94=((0.02)*r21);
IkReal x95=((0.1568)*rxp0_2);
IkReal x96=((0.0066)*rxp1_2);
IkReal x97=(gclwh8_2*r20);
IkReal x98=((0.0066)*rxp2_2);
IkReal x99=((0.01634)*r20);
IkReal x100=((9.045e-5)*r20);
IkReal x101=(gclwh14_8*r20);
IkReal x102=((0.02)*r22);
IkReal x103=((2.0)*gclwh9_10);
IkReal x104=(gclwh12_3*rxp1_2);
IkReal x105=(gclwh13_1*r21);
IkReal x106=((4.0)*gclwh14_11);
IkReal x107=((0.00268)*r20);
IkReal x108=(gclwh10_12*r22);
IkReal x109=((2.0)*gclwh13_10);
IkReal x110=((0.268)*gclwh14_14);
IkReal x111=(gclwh14_3*rxp0_2);
IkReal x112=((0.02)*rxp0_2);
IkReal x113=(gclwh12_14*r21);
IkReal x114=((2.0)*pp);
IkReal x115=((4.0)*gclwh11_10);
IkReal x116=(gclwh8_11*r20);
IkReal x117=((0.0132)*rxp2_2);
IkReal x118=((0.0132)*rxp0_2);
IkReal x119=((0.00817)*r22);
IkReal x120=(gclwh5_1*rxp2_2);
IkReal x121=((0.0268)*rxp2_2);
IkReal x122=(gclwh9_10*r20);
IkReal x123=(gclwh4_2*pz);
IkReal x124=(gclwh14_11*r20);
IkReal x125=((0.2)*rxp1_2);
IkReal x126=(gclwh5_0*rxp2_2);
IkReal x127=((0.1634)*rxp1_2);
IkReal x128=(gclwh13_15*r21);
IkReal x129=((4.0)*gclwh8_11);
IkReal x130=((0.00134)*r20);
IkReal x131=(gclwh3_3*r21);
IkReal x132=(gclwh5_1*r22);
IkReal x133=((0.0268)*rxp1_2);
IkReal x134=(gclwh7_13*r21);
IkReal x135=((2.0)*gclwh7_10);
IkReal x136=((0.0066)*rxp0_2);
IkReal x137=(gclwh13_9*rxp1_2);
IkReal x138=((0.00033)*r21);
IkReal x139=(gclwh2_1*r21);
IkReal x140=(gclwh7_0*pz);
IkReal x141=((0.536)*gclwh14_14);
IkReal x142=(gclwh6_11*rxp1_2);
IkReal x143=((0.17)*rxp2_2);
IkReal x144=((0.0536)*rxp1_2);
IkReal x145=(gclwh10_12*rxp2_2);
IkReal x146=((0.3268)*rxp1_2);
IkReal x147=((4.0)*gclwh9_10);
IkReal x148=((0.8)*rxp2_2);
IkReal x149=((0.04)*r22);
IkReal x150=((0.01634)*r21);
IkReal x151=((0.01)*r20);
IkReal x152=((4.0)*gclwh7_10);
IkReal x153=((0.1568)*rxp1_2);
IkReal x154=((0.2)*rxp0_2);
IkReal x155=((4.0)*gclwh4_11);
IkReal x156=((0.04)*r21);
IkReal x157=(gclwh10_2*r22);
IkReal x158=((0.2)*pp);
IkReal x159=(gclwh13_9*r21);
IkReal x160=((0.17)*rxp0_2);
IkReal x161=((0.268)*gclwh4_14);
IkReal x162=(gclwh12_8*rxp1_2);
IkReal x163=((0.8)*rxp0_2);
IkReal x164=((2.0)*gclwh6_11);
IkReal x165=(gclwh6_12*r21);
IkReal x166=(gclwh1_3*r20);
IkReal x167=((0.02)*rxp2_2);
IkReal x168=((0.0268)*rxp0_2);
IkReal x169=(gclwh8_2*rxp0_2);
IkReal x170=((0.1634)*rxp0_2);
IkReal x171=((2.0)*gclwh12_11);
IkReal x172=(gclwh10_2*rxp2_2);
IkReal x173=((0.1072)*rxp1_2);
IkReal x174=((2.0)*gclwh5_10);
IkReal x175=(gclwh11_0*r22);
IkReal x176=((0.268)*gclwh13_15);
IkReal x177=(gclwh10_2*pz);
IkReal x178=((0.268)*gclwh15_15);
IkReal x179=(gclwh9_0*pz);
IkReal x180=(gclwh4_3*r22);
IkReal x181=((2.0)*gclwh8_11);
IkReal x182=((2.0)*gclwh15_10);
IkReal x183=((0.268)*gclwh5_15);
IkReal x184=(gclwh4_14*rxp2_2);
IkReal x185=(gclwh4_8*r22);
IkReal x186=((0.00268)*r22);
IkReal x187=(gclwh4_3*rxp2_2);
IkReal x188=(gclwh12_3*r21);
IkReal x189=(gclwh9_0*r20);
IkReal x190=((0.00817)*r20);
IkReal x191=((0.3268)*rxp0_2);
IkReal x192=((4.0)*gclwh6_11);
IkReal x193=(gclwh12_11*rxp1_2);
IkReal x194=(gclwh11_0*pz);
IkReal x195=(gclwh5_9*r22);
IkReal x196=(gclwh5_0*pz);
IkReal x197=((0.4)*rxp0_2);
IkReal x198=((0.0132)*rxp1_2);
IkReal x199=((0.00784)*r20);
IkReal x200=((0.1568)*rxp2_2);
IkReal x201=((0.1634)*rxp2_2);
IkReal x202=((0.00675445)*r20);
IkReal x203=((0.536)*gclwh12_14);
IkReal x204=(gclwh15_1*rxp0_2);
IkReal x205=(gclwh13_0*pz);
IkReal x206=(gclwh9_13*r20);
IkReal x207=(gclwh11_13*r22);
IkReal x208=((0.1072)*rxp0_2);
IkReal x209=((0.00066)*r21);
IkReal x210=((0.536)*gclwh4_14);
IkReal x211=(gclwh5_15*rxp2_2);
IkReal x212=((0.00134)*r21);
IkReal x213=(gclwh8_12*r20);
IkReal x214=(gclwh13_1*rxp1_2);
IkReal x215=(gclwh6_2*pz);
IkReal x216=((2.0)*gclwh14_11);
IkReal x217=((0.0536)*rxp0_2);
IkReal x218=((0.268)*gclwh12_14);
IkReal x219=(gclwh12_2*pz);
IkReal x220=(gclwh14_14*x168);
IkReal x221=(gclwh6_5*x212);
IkReal x222=(gclwh4_14*x121);
IkReal x223=(gclwh10_5*x69);
IkReal x224=(gclwh8_5*x130);
IkReal x225=(gclwh12_14*x133);
IkReal x226=((0.02)*x162);
IkReal x227=(gclwh12_11*x125);
IkReal x228=(gclwh4_8*x167);
IkReal x229=(gclwh4_11*x82);
IkReal x230=(gclwh6_11*x86);
IkReal x231=((0.01)*x116);
IkReal x232=((0.01)*x75);
IkReal x233=((0.2)*x89);
IkReal x234=(gclwh14_8*x112);
IkReal x235=((0.02)*x137);
IkReal x236=(gclwh11_10*x81);
IkReal x237=(gclwh15_10*x154);
IkReal x238=((0.01)*x122);
IkReal x239=(gclwh5_9*x167);
IkReal x240=(gclwh7_10*x86);
IkReal x241=(gclwh5_10*x82);
IkReal x242=(gclwh15_9*x112);
IkReal x243=((0.2)*x68);
IkReal x244=(gclwh15_15*x168);
IkReal x245=(gclwh7_7*x212);
IkReal x246=(gclwh13_15*x133);
IkReal x247=(gclwh9_7*x130);
IkReal x248=(gclwh11_7*x69);
IkReal x249=(gclwh5_15*x121);
IkReal x250=(gclwh8_5*x168);
IkReal x251=(gclwh10_5*x121);
IkReal x252=(gclwh14_14*x130);
IkReal x253=((0.00134)*x113);
IkReal x254=(gclwh4_14*x69);
IkReal x255=(gclwh6_5*x133);
IkReal x256=(gclwh12_11*x86);
IkReal x257=(gclwh10_11*x82);
IkReal x258=((0.001)*x185);
IkReal x259=(gclwh4_11*x81);
IkReal x260=(gclwh8_11*x154);
IkReal x261=(gclwh12_8*x71);
IkReal x262=((0.001)*x101);
IkReal x263=(gclwh6_11*x125);
IkReal x264=((0.01)*x124);
IkReal x265=((0.001)*x78);
IkReal x266=(gclwh11_10*x82);
IkReal x267=(gclwh13_10*x86);
IkReal x268=(gclwh5_10*x81);
IkReal x269=(gclwh9_10*x154);
IkReal x270=((0.001)*x195);
IkReal x271=(gclwh13_9*x71);
IkReal x272=(gclwh7_10*x125);
IkReal x273=(gclwh15_10*x151);
IkReal x274=(gclwh5_15*x69);
IkReal x275=((0.00134)*x128);
IkReal x276=(gclwh7_7*x133);
IkReal x277=(gclwh11_7*x121);
IkReal x278=(gclwh9_7*x168);
IkReal x279=(gclwh15_15*x130);
IkReal x280=((0.4)*x89);
IkReal x281=((0.02)*x75);
IkReal x282=((0.02)*x116);
IkReal x283=(gclwh14_14*x217);
IkReal x284=(gclwh12_14*x144);
IkReal x285=((0.0536)*x184);
IkReal x286=(gclwh4_11*x90);
IkReal x287=(gclwh6_11*x94);
IkReal x288=((0.4)*x193);
IkReal x289=(gclwh13_15*x144);
IkReal x290=((0.0536)*x211);
IkReal x291=(gclwh15_15*x217);
IkReal x292=(gclwh11_10*x102);
IkReal x293=(gclwh15_10*x197);
IkReal x294=((0.02)*x122);
IkReal x295=((0.4)*x68);
IkReal x296=(gclwh7_10*x94);
IkReal x297=(gclwh5_10*x90);
IkReal x298=((0.02)*x124);
IkReal x299=((0.4)*x142);
IkReal x300=(gclwh14_14*x107);
IkReal x301=((0.00268)*x113);
IkReal x302=(gclwh4_14*x186);
IkReal x303=(gclwh4_11*x102);
IkReal x304=(gclwh12_11*x94);
IkReal x305=(gclwh10_11*x90);
IkReal x306=(gclwh8_11*x197);
IkReal x307=(gclwh15_9*x70);
IkReal x308=((2.0)*x64);
IkReal x309=((1.0)*x65);
IkReal x310=((0.134)*gclwh6_5*x67);
IkReal x311=((0.268)*gclwh10_5*x84);
IkReal x312=((0.268)*gclwh8_5*x70);
IkReal x313=((0.268)*gclwh6_5*x73);
IkReal x314=((0.134)*gclwh8_5*x72);
IkReal x315=((0.134)*gclwh10_5*x77);
IkReal x316=(gclwh14_2*rxp0_2*x66);
IkReal x317=((2.0)*gclwh10_11*x84);
IkReal x318=(x181*x70);
IkReal x319=(x177*x77);
IkReal x320=(x177*x81);
IkReal x321=(x104*x158);
IkReal x322=(gclwh8_2*pz*x72);
IkReal x323=(x82*x83);
IkReal x324=((0.01)*pz*x97);
IkReal x325=(gclwh12_2*rxp1_2*x66);
IkReal x326=(x111*x158);
IkReal x327=(gclwh4_2*rxp2_2*x66);
IkReal x328=(x164*x73);
IkReal x329=(x215*x86);
IkReal x330=(gclwh13_1*pp*x125);
IkReal x331=(x194*x77);
IkReal x332=(gclwh5_1*pp*x82);
IkReal x333=(x135*x73);
IkReal x334=(gclwh15_0*rxp0_2*x66);
IkReal x335=(x194*x81);
IkReal x336=(x151*x179);
IkReal x337=(x179*x72);
IkReal x338=(gclwh15_1*pp*x154);
IkReal x339=(x84*x85);
IkReal x340=(x103*x70);
IkReal x341=(x126*x66);
IkReal x342=(gclwh13_0*rxp1_2*x66);
IkReal x343=(x140*x86);
IkReal x344=((0.268)*gclwh9_7*x70);
IkReal x345=((0.134)*gclwh7_7*x67);
IkReal x346=((0.268)*gclwh11_7*x84);
IkReal x347=((0.134)*gclwh11_7*x77);
IkReal x348=((0.268)*gclwh7_7*x73);
IkReal x349=((0.134)*gclwh9_7*x72);
IkReal x350=(x218*x73);
IkReal x351=((0.134)*gclwh14_14*x72);
IkReal x352=(x161*x84);
IkReal x353=((0.134)*gclwh12_14*x67);
IkReal x354=(x110*x70);
IkReal x355=((0.134)*gclwh4_14*x77);
IkReal x356=(x72*x88);
IkReal x357=(x151*x88);
IkReal x358=((0.1)*gclwh4_8*x77);
IkReal x359=(x188*x65);
IkReal x360=(gclwh1_2*pz*x151);
IkReal x361=(gclwh3_2*pz*x86);
IkReal x362=((0.1)*gclwh12_8*x67);
IkReal x363=(x131*x65);
IkReal x364=(x166*x65);
IkReal x365=(gclwh6_2*rxp1_2*x66);
IkReal x366=(x216*x70);
IkReal x367=(x180*x65);
IkReal x368=(gclwh14_8*npx*x66);
IkReal x369=(x84*x93);
IkReal x370=(gclwh4_8*npz*x66);
IkReal x371=(gclwh12_8*npy*x66);
IkReal x372=(x172*x66);
IkReal x373=(x123*x81);
IkReal x374=(x171*x73);
IkReal x375=(x169*x66);
IkReal x376=((0.1)*gclwh14_8*x72);
IkReal x377=(x219*x86);
IkReal x378=(x205*x86);
IkReal x379=(gclwh0_0*pz*x151);
IkReal x380=(gclwh11_0*rxp2_2*x66);
IkReal x381=(x86*x87);
IkReal x382=(gclwh13_9*npy*x66);
IkReal x383=(x65*x79);
IkReal x384=(x196*x77);
IkReal x385=(x196*x81);
IkReal x386=(x205*x67);
IkReal x387=(gclwh9_0*rxp0_2*x66);
IkReal x388=((0.1)*gclwh15_9*x72);
IkReal x389=(x182*x70);
IkReal x390=(x139*x65);
IkReal x391=(gclwh5_9*npz*x66);
IkReal x392=(gclwh0_1*r20*x65);
IkReal x393=(gclwh7_0*rxp1_2*x66);
IkReal x394=((0.1)*gclwh5_9*x77);
IkReal x395=(gclwh15_9*npx*x66);
IkReal x396=((0.1)*gclwh13_9*x67);
IkReal x397=(x174*x84);
IkReal x398=(gclwh15_0*pz*x151);
IkReal x399=(x109*x73);
IkReal x400=((0.134)*gclwh13_15*x67);
IkReal x401=(x178*x70);
IkReal x402=((0.134)*gclwh5_15*x77);
IkReal x403=(x183*x84);
IkReal x404=((0.134)*gclwh15_15*x72);
IkReal x405=(x176*x73);
IkReal x406=(x181*x72);
IkReal x407=(x114*x75);
IkReal x408=(x192*x73);
IkReal x409=(x129*x70);
IkReal x410=(x164*x67);
IkReal x411=((4.0)*gclwh10_11*x84);
IkReal x412=(x77*x85);
IkReal x413=(x152*x73);
IkReal x414=(x103*x72);
IkReal x415=(x135*x67);
IkReal x416=(x147*x70);
IkReal x417=(x115*x84);
IkReal x418=(x216*x72);
IkReal x419=(x73*x74);
IkReal x420=(x155*x84);
IkReal x421=(x210*x84);
IkReal x422=(x110*x72);
IkReal x423=(x203*x73);
IkReal x424=(x218*x67);
IkReal x425=(x141*x70);
IkReal x426=(x161*x77);
IkReal x427=(x77*x93);
IkReal x428=(x171*x67);
IkReal x429=(x106*x70);
IkReal x430=(gclwh6_2*npy*x308);
IkReal x431=(gclwh6_2*x67*x92);
IkReal x432=(gclwh10_2*npz*x308);
IkReal x433=(gclwh8_2*npx*x308);
IkReal x434=(gclwh7_0*npy*x308);
IkReal x435=(gclwh9_0*npx*x308);
IkReal x436=(gclwh11_0*npz*x308);
IkReal x437=(gclwh7_0*x67*x92);
IkReal x438=(gclwh12_2*npy*x308);
IkReal x439=(gclwh3_2*npy*x308);
IkReal x440=(gclwh1_2*npx*x308);
IkReal x441=(gclwh14_3*x114*x70);
IkReal x442=(gclwh4_2*npz*x308);
IkReal x443=((2.0)*x83*x84);
IkReal x444=(gclwh12_2*x67*x92);
IkReal x445=(gclwh1_2*x72*x92);
IkReal x446=(gclwh3_3*x114*x73);
IkReal x447=(gclwh4_2*x77*x92);
IkReal x448=(gclwh1_3*x114*x70);
IkReal x449=(gclwh3_2*x67*x92);
IkReal x450=(gclwh12_3*x114*x73);
IkReal x451=(gclwh14_2*npx*x308);
IkReal x452=(gclwh14_3*r20*x309);
IkReal x453=(gclwh0_0*npx*x308);
IkReal x454=(gclwh2_0*npy*x308);
IkReal x455=(gclwh5_1*x114*x84);
IkReal x456=(gclwh13_1*x114*x73);
IkReal x457=(gclwh15_0*npx*x308);
IkReal x458=(gclwh2_1*x114*x73);
IkReal x459=(gclwh0_1*x114*x70);
IkReal x460=(gclwh5_0*npz*x308);
IkReal x461=(gclwh13_0*npy*x308);
IkReal x462=(gclwh0_0*x72*x92);
IkReal x463=(gclwh15_0*x72*x92);
IkReal x464=((1.0)*x67*x87);
IkReal x465=(x105*x309);
IkReal x466=(x132*x309);
IkReal x467=(gclwh15_1*x114*x70);
IkReal x468=(x222+x225);
IkReal x469=(x285+x284);
IkReal x470=(x246+x249);
IkReal x471=(x277+x278);
IkReal x472=(x250+x251);
IkReal x473=(x290+x289);
IkReal x474=(x328+x232+x233+x231);
IkReal x475=(x333+x238+x236+x237);
IkReal x476=(x374+x369+x264+x263);
IkReal x477=(x397+x399+x272+x273);
IkReal x478=(x279+x403+x405+x404);
IkReal x479=(x311+x310+x312+x221);
IkReal x480=(x346+x344+x345+x245);
IkReal x481=(x300+x423+x422+x421);
IkReal x482=(x351+x350+x352+x252);
IkReal x483=(x366+x259+x256+x257+x260);
IkReal x484=(x389+x267+x266+x269+x268);
IkReal x485=(x339+x340+x243+x241+x240);
IkReal x486=(x318+x317+x229+x227+x230);
IkReal x487=(x315+x314+x313+x223+x224);
IkReal x488=(x298+x299+x418+x419+x420);
IkReal x489=(x274+x275+x401+x400+x402);
IkReal x490=(x353+x355+x354+x254+x253);
IkReal x491=(x302+x301+x426+x425+x424);
IkReal x492=(x347+x348+x349+x247+x248);
IkReal x493=(x288+x287+x286+x409+x410+x411);
IkReal x494=(x295+x296+x297+x416+x417+x415);
IkReal x495=(x282+x281+x280+x407+x406+x408);
IkReal x496=(x292+x293+x294+x412+x413+x414);
IkReal x497=(x306+x304+x305+x303+x429+x428+x427);
IkReal x498=(x338+x342+x343+x341+x242+x435+x436+x437);
IkReal x499=(x325+x326+x327+x329+x234+x431+x432+x433);
IkReal x500=(x324+x320+x321+x322+x323+x319+x316+x228+x226+x430);
IkReal x501=(x332+x331+x330+x337+x336+x335+x334+x239+x235+x434);
IkReal x502=(x395+x394+x396+x393+x398+x270+x271+x458+x459+x463+x462+x461+x460+x467+x466+x465+x464);
IkReal x503=(x357+x356+x359+x358+x368+x360+x361+x362+x363+x364+x365+x367+x258+x261+x438+x439+x441+x440+x442+x66);
IkReal x504=(x377+x376+x375+x373+x372+x371+x370+x262+x449+x448+x445+x444+x447+x446+x443+x452+x450+x451);
IkReal x505=(x386+x387+x384+x385+x382+x383+x380+x381+x388+x379+x378+x391+x390+x392+x265+x456+x457+x454+x455+x453+x66);
op[0]=((((0.817)*gclwh6_12*x67))+(((-1.0)*x487))+(((1.634)*gclwh8_12*x70))+(((0.00817)*x165))+(((-1.634)*gclwh6_12*x73))+(((-1.0)*gclwh12_8*x127))+(((-0.817)*gclwh10_12*x77))+x468+x479+((gclwh14_8*x170))+(((-1.0)*gclwh4_8*x201))+(((-1.0)*gclwh8_12*x190))+(((-0.00817)*x108))+(((-0.817)*gclwh8_12*x72))+(((-1.0)*x220))+(((1.634)*gclwh10_12*x84)));
op[1]=((((-0.135089)*x187))+(((-1.0)*x499))+(((-1.0)*x486))+(((-1.0)*gclwh6_11*x67))+x474+x500+((gclwh8_11*x72))+((pp*x75))+(((0.135089)*x111))+(((-0.135089)*x104)));
op[2]=((-0.210112)+(((-1.0)*x493))+x495);
op[3]=((((0.784)*gclwh8_2*x72))+(((-1.0)*gclwh6_2*x76))+(((-1.0)*gclwh12_2*x153))+(((0.00784)*x97))+(((-1.568)*gclwh10_2*x84))+(((-1.0)*gclwh14_8*x160))+(((-1.0)*x469))+(((-0.784)*gclwh6_2*x67))+((gclwh4_8*x143))+x283+(((1.568)*gclwh6_2*x73))+(((-1.568)*gclwh8_2*x70))+(((0.784)*gclwh10_2*x77))+((gclwh14_2*x95))+((gclwh10_2*x91))+(((-1.0)*gclwh4_2*x200))+(((0.17)*x162)));
op[4]=((((-1.0)*gclwh14_8*x136))+(((-0.033)*gclwh8_12*x72))+(((0.066)*gclwh8_12*x70))+(((0.033)*gclwh6_12*x67))+(((-1.0)*x487))+(((-0.033)*gclwh10_12*x77))+(((0.066)*gclwh10_12*x84))+(((-1.0)*x468))+(((-0.00033)*x213))+x220+((gclwh6_12*x138))+((gclwh12_8*x96))+x479+(((-0.00033)*x108))+(((-0.066)*gclwh6_12*x73))+((gclwh4_8*x98)));
op[5]=((((-1.0)*x499))+(((-0.001809)*x104))+(((-1.0)*x474))+(((0.001809)*x111))+x486+x500+(((-1.0)*pp*x75))+((gclwh6_11*x67))+(((-0.001809)*x187))+(((-1.0)*gclwh8_11*x72)));
op[6]=((((-1.0)*x498))+(((0.135089)*x204))+((gclwh7_10*x67))+(((-1.0)*x475))+(((-0.135089)*x214))+(((-1.0)*gclwh11_10*x77))+x485+x501+(((-1.0)*gclwh9_10*x72))+(((-0.135089)*x120)));
op[7]=((((0.00817)*x134))+(((-1.634)*gclwh7_13*x73))+(((-1.0)*x492))+(((-1.0)*gclwh5_9*x201))+(((-1.0)*gclwh11_13*x119))+(((-0.817)*gclwh11_13*x77))+((gclwh15_9*x170))+(((-1.0)*gclwh9_13*x190))+x480+x470+(((-1.0)*gclwh13_9*x127))+(((-1.0)*x244))+(((1.634)*gclwh11_13*x84))+(((0.817)*gclwh7_13*x67))+(((1.634)*gclwh9_13*x70))+(((-0.817)*gclwh9_13*x72)));
op[8]=((((-1.0)*gclwh5_9*x143))+(((-0.784)*gclwh7_0*x67))+(((-1.0)*gclwh7_0*x76))+(((-1.568)*gclwh11_0*x84))+(((1.568)*gclwh7_0*x73))+(((0.00784)*x189))+(((-1.0)*x291))+((gclwh15_0*x95))+((gclwh15_9*x160))+(((-1.0)*gclwh13_0*x153))+(((-1.568)*gclwh9_0*x70))+x473+(((0.784)*gclwh9_0*x72))+((gclwh11_0*x91))+(((-0.1568)*x126))+(((-0.17)*x137))+(((0.784)*gclwh11_0*x77)));
op[9]=((-0.210112)+(((-1.0)*x494))+x496);
op[10]=((((-0.001809)*x214))+(((-1.0)*x498))+((gclwh11_10*x77))+(((-1.0)*x485))+(((-1.0)*gclwh7_10*x67))+(((-0.001809)*x120))+(((0.001809)*x204))+x475+x501+((gclwh9_10*x72)));
op[11]=((((-0.00033)*x207))+(((-0.00033)*x206))+(((0.00033)*x134))+(((-1.0)*x492))+(((-0.066)*gclwh7_13*x73))+(((-1.0)*x470))+((gclwh13_9*x96))+(((-0.033)*gclwh9_13*x72))+x244+x480+((gclwh5_9*x98))+(((0.066)*gclwh11_13*x84))+(((0.033)*gclwh7_13*x67))+(((-0.033)*gclwh11_13*x77))+(((-1.0)*gclwh15_9*x136))+(((0.066)*gclwh9_13*x70)));
op[12]=((((-1.634)*gclwh14_8*x70))+(((1.634)*gclwh4_8*x84))+(((-0.817)*gclwh12_8*x67))+(((-1.0)*x482))+(((-1.0)*gclwh6_12*x127))+(((0.817)*gclwh14_8*x72))+(((-1.0)*gclwh4_8*x119))+(((-0.817)*gclwh4_8*x77))+(((0.1634)*x145))+x490+x472+(((-0.00817)*x80))+((gclwh8_12*x170))+(((1.634)*gclwh12_8*x73))+(((0.00817)*x101))+(((-1.0)*x255)));
op[13]=((-0.685445)+(((0.00675445)*x166))+(((1.35089)*gclwh3_3*x73))+(((-1.0)*gclwh12_11*x67))+(((1.35089)*gclwh1_3*x70))+(((-0.665445)*gclwh4_3*x77))+(((-1.0)*x483))+(((0.665445)*gclwh14_3*x72))+(((-1.0)*x504))+(((0.00675445)*x131))+(((-1.35089)*gclwh14_3*x70))+(((-0.685445)*gclwh3_3*x67))+(((-0.665445)*gclwh12_3*x67))+(((-0.00675445)*x180))+(((-0.00675445)*x188))+x476+(((-0.685445)*gclwh1_3*x72))+((gclwh14_11*x72))+(((1.35089)*gclwh4_3*x84))+(((1.35089)*gclwh12_3*x73))+x503+((gclwh14_3*x202))+(((-1.0)*gclwh4_11*x77)));
op[14]=((-0.089834)+(((-1.0)*x497))+x488);
op[15]=((((-1.0)*gclwh4_2*x91))+((gclwh1_2*x199))+(((-1.0)*gclwh8_2*x95))+(((1.568)*gclwh12_2*x73))+(((0.85)*gclwh4_8*x77))+(((-1.0)*x491))+((gclwh3_2*x76))+(((1.7)*gclwh14_8*x70))+(((-0.784)*gclwh3_2*x67))+(((0.0085)*x185))+(((1.568)*gclwh3_2*x73))+(((-1.7)*gclwh4_8*x84))+(((-0.1568)*x172))+(((-1.568)*gclwh14_2*x70))+(((-0.0085)*x101))+x481+(((-0.784)*gclwh4_2*x77))+(((-0.784)*gclwh1_2*x72))+(((-1.7)*gclwh12_8*x73))+(((-0.784)*gclwh12_2*x67))+(((-1.0)*gclwh12_2*x76))+(((0.784)*gclwh14_2*x72))+((gclwh6_2*x153))+(((0.0085)*x80))+((gclwh14_2*x199))+(((0.85)*gclwh12_8*x67))+(((1.568)*gclwh1_2*x70))+(((1.568)*gclwh4_2*x84))+(((-0.85)*gclwh14_8*x72)));
op[16]=(((gclwh8_12*x136))+(((0.066)*gclwh14_8*x70))+(((-1.0)*x490))+(((-0.066)*gclwh4_8*x84))+(((-0.066)*gclwh12_8*x73))+((gclwh10_12*x98))+(((-0.033)*gclwh14_8*x72))+(((0.033)*gclwh12_8*x67))+x482+x472+(((0.00033)*x185))+(((-0.00033)*x101))+(((0.033)*gclwh4_8*x77))+(((0.00033)*x80))+(((-1.0)*gclwh6_12*x96))+(((-1.0)*x255)));
op[17]=((0.019045)+(((0.01809)*gclwh12_3*x73))+((gclwh1_3*x100))+(((-0.019045)*gclwh3_3*x67))+(((0.01809)*gclwh4_3*x84))+(((-1.0)*x504))+(((-0.01809)*gclwh14_3*x70))+(((-0.019045)*gclwh1_3*x72))+((gclwh14_3*x100))+(((-1.0)*x476))+(((0.01809)*gclwh3_3*x73))+(((-0.000955)*gclwh14_3*x72))+(((0.000955)*gclwh12_3*x67))+(((9.045e-5)*x131))+x483+(((-9.045e-5)*x188))+(((-9.045e-5)*x180))+x503+(((0.01809)*gclwh1_3*x70))+(((0.000955)*gclwh4_3*x77))+((gclwh12_11*x67))+(((-1.0)*gclwh14_11*x72))+((gclwh4_11*x77)));
op[18]=((0.685445)+(((0.665445)*gclwh13_1*x67))+(((-1.0)*x484))+((gclwh0_1*x202))+(((-0.00675445)*x79))+(((1.35089)*gclwh2_1*x73))+(((-1.0)*x502))+(((0.00675445)*x139))+(((0.00675445)*x132))+(((-0.685445)*gclwh2_1*x67))+(((0.665445)*gclwh5_1*x77))+(((-0.685445)*gclwh0_1*x72))+(((1.35089)*gclwh0_1*x70))+(((-1.0)*gclwh5_10*x77))+(((0.00675445)*x105))+x477+(((-1.35089)*gclwh13_1*x73))+x505+(((-1.0)*gclwh13_10*x67))+((gclwh15_10*x72))+(((-0.665445)*gclwh15_1*x72))+(((1.35089)*gclwh15_1*x70))+(((-1.35089)*gclwh5_1*x84)));
op[19]=((((-0.817)*gclwh15_9*x72))+(((0.00817)*x159))+((gclwh7_13*x127))+(((-1.0)*x489))+(((0.817)*gclwh13_9*x67))+((gclwh5_9*x119))+(((-1.0)*x471))+(((-1.0)*gclwh9_13*x170))+(((-1.634)*gclwh13_9*x73))+x276+x478+(((-1.0)*gclwh11_13*x201))+(((1.634)*x307))+(((-1.634)*gclwh5_9*x84))+(((0.817)*gclwh5_9*x77))+(((-0.00817)*x78)));
op[20]=((((-0.85)*gclwh15_9*x72))+(((-1.7)*gclwh13_9*x73))+(((-1.7)*gclwh5_9*x84))+(((-0.784)*gclwh15_0*x72))+(((0.784)*gclwh5_0*x77))+(((1.568)*gclwh0_0*x70))+(((1.7)*x307))+(((0.0085)*x195))+(((-1.568)*gclwh13_0*x73))+((gclwh5_0*x91))+(((-1.0)*x183*x77))+(((0.0085)*x159))+(((-0.536)*gclwh15_15*x70))+(((-1.568)*gclwh5_0*x84))+(((0.784)*gclwh13_0*x67))+((gclwh2_0*x76))+(((-1.0)*gclwh15_0*x199))+((gclwh13_0*x76))+(((-0.0085)*x78))+(((0.85)*gclwh13_9*x67))+(((-1.0)*gclwh7_0*x153))+(((1.568)*gclwh15_0*x70))+((gclwh11_0*x200))+((x178*x72))+(((-0.784)*gclwh2_0*x67))+(((1.568)*gclwh2_0*x73))+(((0.536)*gclwh13_15*x73))+(((0.536)*gclwh5_15*x84))+(((0.85)*gclwh5_9*x77))+((gclwh0_0*x199))+(((-0.00268)*x128))+(((-0.784)*gclwh0_0*x72))+((gclwh9_0*x95))+(((-1.0)*gclwh5_15*x186))+(((-1.0)*x176*x67))+((gclwh15_15*x107)));
op[21]=((-0.089834)+(((-4.0)*gclwh5_10*x84))+((x174*x77))+((gclwh9_10*x197))+(((-0.4)*gclwh7_10*rxp1_2))+((gclwh5_10*x102))+(((-4.0)*gclwh13_10*x73))+(((-1.0)*x182*x72))+((gclwh11_10*x90))+(((4.0)*gclwh15_10*x70))+(((-0.02)*gclwh15_10*r20))+((x109*x67))+((gclwh13_10*x94)));
op[22]=((-0.019045)+((gclwh0_1*x100))+((gclwh13_10*x67))+(((-9.045e-5)*x79))+(((-1.0)*x502))+(((-0.019045)*gclwh0_1*x72))+(((-0.000955)*gclwh5_1*x77))+(((9.045e-5)*x105))+(((0.01809)*gclwh0_1*x70))+(((-1.0)*x477))+((gclwh5_10*x77))+(((0.000955)*gclwh15_1*x72))+(((9.045e-5)*x132))+(((9.045e-5)*x139))+(((-0.01809)*gclwh13_1*x73))+x484+(((-0.01809)*gclwh5_1*x84))+x505+(((0.01809)*gclwh2_1*x73))+(((0.01809)*gclwh15_1*x70))+(((-0.000955)*gclwh13_1*x67))+(((-0.019045)*gclwh2_1*x67))+(((-1.0)*gclwh15_10*x72)));
op[23]=((((-0.00033)*x195))+(((0.066)*gclwh5_9*x84))+(((0.033)*gclwh15_9*x72))+(((-1.0)*x471))+(((-1.0)*x478))+(((-0.033)*gclwh5_9*x77))+(((0.00033)*x78))+(((-0.066)*x307))+x276+(((-1.0)*gclwh11_13*x98))+x489+(((0.066)*gclwh13_9*x73))+(((-1.0)*gclwh9_13*x136))+((gclwh7_13*x96))+(((-0.033)*gclwh13_9*x67))+(((-1.0)*gclwh13_9*x138)));
op[24]=((-0.437912)+(((-1.0)*x493))+x495);
op[25]=((((-1.0)*gclwh12_2*x146))+(((0.01634)*x97))+(((-0.3268)*gclwh4_2*rxp2_2))+(((-1.0)*gclwh6_2*x150))+(((-1.634)*gclwh6_2*x67))+(((-1.0)*x469))+(((-3.268)*gclwh10_2*x84))+(((1.634)*gclwh8_2*x72))+x283+(((0.01634)*x157))+(((1.634)*gclwh10_2*x77))+(((3.268)*gclwh6_2*x73))+((gclwh14_2*x191))+(((-3.268)*gclwh8_2*x70)));
op[26]=((((-3.136)*gclwh8_12*x70))+(((3.136)*gclwh6_12*x73))+(((1.568)*gclwh8_12*x72))+(((-0.01568)*x165))+((gclwh14_14*x208))+(((0.01568)*x108))+(((-1.568)*gclwh6_12*x67))+(((-1.0)*gclwh12_14*x173))+(((0.01568)*x213))+(((-3.136)*gclwh10_12*x84))+(((-0.1072)*x184))+(((1.568)*gclwh10_12*x77)));
op[27]=((((-0.8)*x89))+(((-0.04)*x75))+(((-1.0)*x129*x72))+(((-0.04)*x116))+(((-4.0)*pp*x75))+(((8.0)*gclwh8_11*x70))+(((0.8)*x193))+((x192*x67))+(((8.0)*gclwh10_11*x84))+((gclwh4_11*x148))+(((-8.0)*gclwh6_11*x73))+((gclwh6_11*x156)));
op[28]=((-0.017688)+(((-1.0)*x495))+x493);
op[29]=((((-1.0)*gclwh6_2*x209))+(((-1.0)*gclwh12_2*x198))+(((0.066)*gclwh8_2*x72))+(((-1.0)*gclwh4_2*x117))+(((0.00066)*x157))+((gclwh14_2*x118))+(((-0.132)*gclwh8_2*x70))+(((0.132)*gclwh6_2*x73))+(((-0.132)*gclwh10_2*x84))+x469+(((0.00066)*x97))+(((0.066)*gclwh10_2*x77))+(((-1.0)*x283))+(((-0.066)*gclwh6_2*x67)));
op[30]=((((3.268)*gclwh7_0*x73))+(((-0.3268)*x126))+(((-1.634)*gclwh7_0*x67))+(((1.634)*gclwh11_0*x77))+(((-1.0)*x291))+(((-3.268)*gclwh11_0*x84))+((gclwh15_0*x191))+(((-3.268)*gclwh9_0*x70))+(((0.01634)*x175))+x473+(((-1.0)*gclwh7_0*x150))+(((-1.0)*gclwh13_0*x146))+(((1.634)*gclwh9_0*x72))+((gclwh9_0*x99)));
op[31]=((-0.437912)+(((-1.0)*x494))+x496);
op[32]=((((-1.0)*x152*x67))+(((-1.0)*gclwh5_10*x148))+((gclwh11_10*x149))+((gclwh15_10*x163))+((x115*x77))+(((-0.8)*x68))+(((-8.0)*gclwh9_10*x70))+(((8.0)*gclwh7_10*x73))+(((0.04)*x122))+(((-1.0)*gclwh7_10*x156))+(((-8.0)*gclwh11_10*x84))+((x147*x72)));
op[33]=((((-3.136)*gclwh9_13*x70))+(((-0.01568)*x134))+((gclwh15_15*x208))+(((3.136)*gclwh7_13*x73))+(((-3.136)*gclwh11_13*x84))+(((1.568)*gclwh11_13*x77))+(((0.01568)*x207))+(((0.01568)*x206))+(((-1.568)*gclwh7_13*x67))+(((-1.0)*gclwh13_15*x173))+(((-0.1072)*x211))+(((1.568)*gclwh9_13*x72)));
op[34]=((((0.00066)*x189))+(((-1.0)*x473))+(((0.066)*gclwh11_0*x77))+((gclwh15_0*x118))+(((0.066)*gclwh9_0*x72))+(((0.00066)*x175))+(((-1.0)*gclwh5_0*x117))+(((-0.132)*gclwh9_0*x70))+(((-0.066)*gclwh7_0*x67))+x291+(((-1.0)*gclwh13_0*x198))+(((0.132)*gclwh7_0*x73))+(((-1.0)*gclwh7_0*x209))+(((-0.132)*gclwh11_0*x84)));
op[35]=((-0.017688)+(((-1.0)*x496))+x494);
op[36]=((1.299066)+(((-1.0)*x497))+x488);
op[37]=((((3.268)*gclwh12_2*x73))+(((-1.0)*x491))+(((-1.0)*gclwh12_2*x150))+(((3.268)*gclwh3_2*x73))+(((3.268)*gclwh1_2*x70))+(((-0.3268)*x172))+(((-0.3268)*x169))+((gclwh1_2*x99))+(((-1.634)*gclwh3_2*x67))+(((-3.268)*gclwh14_2*x70))+x481+(((-1.634)*gclwh4_2*x77))+((gclwh14_2*x99))+(((-1.634)*gclwh1_2*x72))+(((-0.01634)*gclwh4_2*r22))+(((3.268)*gclwh4_2*x84))+((gclwh3_2*x150))+(((1.634)*gclwh14_2*x72))+(((-1.634)*gclwh12_2*x67))+((gclwh6_2*x146)));
op[38]=((((0.3136)*gclwh6_12*rxp1_2))+(((-0.00536)*gclwh4_14*r22))+(((-0.3136)*x145))+(((-0.3136)*gclwh8_12*rxp0_2))+((x141*x72))+(((-1.072)*gclwh14_14*x70))+(((-0.00536)*x113))+(((-1.0)*x210*x77))+(((1.072)*gclwh4_14*x84))+(((0.00536)*gclwh14_14*r20))+(((1.072)*gclwh12_14*x73))+(((-1.0)*x203*x67)));
op[39]=((-0.03602)+((gclwh10_11*x148))+(((-0.8)*x142))+(((-0.04)*x124))+(((-8.0)*gclwh12_11*x73))+((x67*x74))+(((-8.0)*gclwh4_11*x84))+(((-1.0)*x106*x72))+(((8.0)*gclwh14_11*x70))+((gclwh12_11*x156))+((x155*x77))+((gclwh4_11*x149))+((gclwh8_11*x163)));
op[40]=((0.033734)+(((-1.0)*x488))+x497);
IkReal x506=pz*pz;
IkReal x507=pp*pp;
IkReal x508=((0.2)*pz);
IkReal x509=(pp*r21);
IkReal x510=((0.2)*rxp1_2);
IkReal x511=((0.00134)*r22);
IkReal x512=((0.066)*pz);
IkReal x513=(gclwh14_8*npx);
IkReal x514=((0.001)*r21);
IkReal x515=(pp*r20);
IkReal x516=(gclwh13_10*r21);
IkReal x517=(gclwh5_0*r22);
IkReal x518=((0.0132)*rxp2_2);
IkReal x519=((2.0)*pz);
IkReal x520=(gclwh7_10*npy);
IkReal x521=((0.02)*r22);
IkReal x522=((0.00784)*r21);
IkReal x523=(gclwh15_9*r20);
IkReal x524=(gclwh15_1*r20);
IkReal x525=(gclwh12_8*r21);
IkReal x526=((0.01)*r22);
IkReal x527=(gclwh6_12*npy);
IkReal x528=((0.2)*rxp2_2);
IkReal x529=(gclwh4_3*pp);
IkReal x530=(npz*pz);
IkReal x531=(gclwh2_0*pz);
IkReal x532=((0.01)*r21);
IkReal x533=(gclwh14_2*pz);
IkReal x534=((0.2)*rxp0_2);
IkReal x535=(gclwh8_2*pz);
IkReal x536=((0.00784)*r22);
IkReal x537=((1.0)*pz);
IkReal x538=(gclwh9_13*rxp0_2);
IkReal x539=(npx*pz);
IkReal x540=((0.1568)*rxp0_2);
IkReal x541=(npy*pz);
IkReal x542=((0.784)*pp);
IkReal x543=((0.0066)*rxp1_2);
IkReal x544=((0.536)*gclwh15_15);
IkReal x545=(pp*r22);
IkReal x546=((0.0066)*rxp2_2);
IkReal x547=((0.536)*gclwh5_15);
IkReal x548=(gclwh12_8*npy);
IkReal x549=((9.045e-5)*r20);
IkReal x550=(gclwh14_8*r20);
IkReal x551=(gclwh4_2*pz);
IkReal x552=(gclwh12_3*rxp1_2);
IkReal x553=(gclwh13_1*r21);
IkReal x554=((0.0132)*rxp1_2);
IkReal x555=(gclwh15_15*r20);
IkReal x556=((0.268)*gclwh14_14);
IkReal x557=((0.135089)*rxp0_2);
IkReal x558=((0.02)*rxp0_2);
IkReal x559=(gclwh12_14*r21);
IkReal x560=((0.00066)*r21);
IkReal x561=(gclwh5_1*pp);
IkReal x562=(gclwh8_11*r20);
IkReal x563=((0.02)*r21);
IkReal x564=((0.00817)*r22);
IkReal x565=(gclwh7_0*rxp1_2);
IkReal x566=((0.001809)*rxp2_2);
IkReal x567=(gclwh4_14*rxp2_2);
IkReal x568=((4.0)*gclwh15_10);
IkReal x569=((0.00066)*r20);
IkReal x570=(gclwh9_10*rxp0_2);
IkReal x571=(gclwh14_11*r20);
IkReal x572=((0.00033)*r22);
IkReal x573=((0.1634)*rxp1_2);
IkReal x574=(gclwh13_15*r21);
IkReal x575=((0.00134)*r20);
IkReal x576=(gclwh3_3*r21);
IkReal x577=(gclwh5_1*r22);
IkReal x578=(gclwh7_13*r21);
IkReal x579=(gclwh13_9*rxp1_2);
IkReal x580=((0.00033)*r21);
IkReal x581=(gclwh7_0*pz);
IkReal x582=(gclwh14_8*rxp0_2);
IkReal x583=((0.17)*rxp2_2);
IkReal x584=((0.0536)*rxp1_2);
IkReal x585=((0.1634)*rxp2_2);
IkReal x586=((0.1568)*rxp2_2);
IkReal x587=((0.01)*r20);
IkReal x588=((0.01634)*r21);
IkReal x589=(gclwh7_10*rxp1_2);
IkReal x590=(gclwh12_3*pp);
IkReal x591=(gclwh13_9*r21);
IkReal x592=((0.268)*gclwh4_14);
IkReal x593=(gclwh12_8*rxp1_2);
IkReal x594=((0.4)*rxp2_2);
IkReal x595=((0.0132)*rxp0_2);
IkReal x596=((0.00784)*r20);
IkReal x597=(gclwh1_3*r20);
IkReal x598=(gclwh14_3*pp);
IkReal x599=((0.02)*rxp2_2);
IkReal x600=((0.0268)*rxp0_2);
IkReal x601=(gclwh15_9*rxp0_2);
IkReal x602=((0.1568)*rxp1_2);
IkReal x603=((0.0268)*rxp1_2);
IkReal x604=((0.536)*gclwh13_15);
IkReal x605=(gclwh2_1*r21);
IkReal x606=((0.02)*r20);
IkReal x607=((0.4)*rxp1_2);
IkReal x608=((0.01634)*r20);
IkReal x609=((0.268)*gclwh13_15);
IkReal x610=(gclwh10_2*pz);
IkReal x611=(gclwh15_0*pz);
IkReal x612=((0.268)*gclwh15_15);
IkReal x613=(gclwh5_15*r22);
IkReal x614=(gclwh8_12*rxp0_2);
IkReal x615=(gclwh9_0*pz);
IkReal x616=(gclwh4_3*r22);
IkReal x617=((0.268)*gclwh5_15);
IkReal x618=((0.0268)*rxp2_2);
IkReal x619=(gclwh4_8*r22);
IkReal x620=((1.634)*pz);
IkReal x621=((4.0)*gclwh5_10);
IkReal x622=(npx*pp);
IkReal x623=((4.0)*gclwh13_10);
IkReal x624=(gclwh12_3*r21);
IkReal x625=(gclwh4_2*r22);
IkReal x626=((0.00817)*r20);
IkReal x627=((1.568)*npx);
IkReal x628=(gclwh0_1*r20);
IkReal x629=(npy*pp);
IkReal x630=(gclwh13_9*npy);
IkReal x631=(gclwh11_0*pz);
IkReal x632=(gclwh5_9*r22);
IkReal x633=((0.4)*rxp0_2);
IkReal x634=((0.135089)*rxp2_2);
IkReal x635=(gclwh13_0*pz);
IkReal x636=(gclwh14_3*r20);
IkReal x637=((0.00033)*r20);
IkReal x638=((0.00134)*r21);
IkReal x639=(gclwh13_1*rxp1_2);
IkReal x640=(gclwh6_2*pz);
IkReal x641=((0.0536)*rxp0_2);
IkReal x642=((0.001809)*rxp0_2);
IkReal x643=((0.268)*gclwh12_14);
IkReal x644=(gclwh12_2*pz);
IkReal x645=((0.00268)*x613);
IkReal x646=((0.00268)*x574);
IkReal x647=((0.00268)*x555);
IkReal x648=((0.4)*x589);
IkReal x649=(gclwh15_10*x606);
IkReal x650=((0.4)*x570);
IkReal x651=(gclwh5_10*x521);
IkReal x652=(gclwh11_10*x594);
IkReal x653=((0.02)*x516);
IkReal x654=((0.0268)*x567);
IkReal x655=(gclwh6_5*x638);
IkReal x656=(gclwh12_14*x603);
IkReal x657=(gclwh14_14*x600);
IkReal x658=(gclwh10_5*x511);
IkReal x659=(gclwh8_5*x575);
IkReal x660=((0.01)*x562);
IkReal x661=((0.02)*x593);
IkReal x662=(gclwh10_11*x526);
IkReal x663=(gclwh14_11*x534);
IkReal x664=(gclwh4_8*x599);
IkReal x665=(gclwh14_8*x558);
IkReal x666=(gclwh12_11*x510);
IkReal x667=(gclwh4_11*x528);
IkReal x668=(gclwh6_11*x532);
IkReal x669=((0.02)*x579);
IkReal x670=(gclwh7_10*x532);
IkReal x671=(gclwh5_10*x528);
IkReal x672=(gclwh5_9*x599);
IkReal x673=(gclwh13_10*x510);
IkReal x674=(gclwh11_10*x526);
IkReal x675=(gclwh15_10*x534);
IkReal x676=(gclwh9_10*x587);
IkReal x677=(gclwh15_9*x558);
IkReal x678=(gclwh13_15*x603);
IkReal x679=(gclwh5_15*x618);
IkReal x680=(gclwh7_7*x638);
IkReal x681=(gclwh15_15*x600);
IkReal x682=(gclwh9_7*x575);
IkReal x683=(gclwh11_7*x511);
IkReal x684=((0.00268)*x559);
IkReal x685=((0.00268)*gclwh4_14*r22);
IkReal x686=((0.00268)*gclwh14_14*r20);
IkReal x687=((0.00134)*x559);
IkReal x688=(gclwh8_5*x600);
IkReal x689=(gclwh10_5*x618);
IkReal x690=(gclwh4_14*x511);
IkReal x691=(gclwh6_5*x603);
IkReal x692=(gclwh14_14*x575);
IkReal x693=((0.001)*x619);
IkReal x694=(gclwh6_11*x510);
IkReal x695=((0.01)*x571);
IkReal x696=(gclwh12_8*x514);
IkReal x697=(gclwh12_11*x532);
IkReal x698=(gclwh10_11*x528);
IkReal x699=((0.001)*x550);
IkReal x700=(gclwh4_11*x526);
IkReal x701=(gclwh8_11*x534);
IkReal x702=((0.001)*x523);
IkReal x703=(gclwh7_10*x510);
IkReal x704=(gclwh15_10*x587);
IkReal x705=((0.001)*x632);
IkReal x706=(gclwh11_10*x528);
IkReal x707=(gclwh13_9*x514);
IkReal x708=((0.01)*x516);
IkReal x709=(gclwh5_10*x526);
IkReal x710=(gclwh9_10*x534);
IkReal x711=((0.00134)*x555);
IkReal x712=(gclwh7_7*x603);
IkReal x713=(gclwh11_7*x618);
IkReal x714=(gclwh5_15*x511);
IkReal x715=((0.00134)*x574);
IkReal x716=(gclwh9_7*x600);
IkReal x717=(gclwh15_9*x539);
IkReal x718=((2.0)*x506);
IkReal x719=((1.0)*x507);
IkReal x720=(x509*x609);
IkReal x721=(x545*x617);
IkReal x722=(x539*x544);
IkReal x723=(x515*x612);
IkReal x724=(x530*x547);
IkReal x725=(x541*x604);
IkReal x726=((2.0)*gclwh15_10*x515);
IkReal x727=(x530*x621);
IkReal x728=(x541*x623);
IkReal x729=((2.0)*gclwh13_10*x509);
IkReal x730=(x539*x568);
IkReal x731=((2.0)*gclwh5_10*x545);
IkReal x732=((0.134)*gclwh6_5*x509);
IkReal x733=((0.268)*gclwh10_5*x530);
IkReal x734=((0.268)*gclwh8_5*x539);
IkReal x735=((0.268)*gclwh6_5*x541);
IkReal x736=((0.134)*gclwh8_5*x515);
IkReal x737=((0.134)*gclwh10_5*x545);
IkReal x738=(gclwh14_2*rxp0_2*x508);
IkReal x739=(gclwh6_11*npy*x519);
IkReal x740=(x545*x610);
IkReal x741=(x526*x610);
IkReal x742=(x510*x590);
IkReal x743=(x515*x535);
IkReal x744=(x528*x529);
IkReal x745=(x535*x587);
IkReal x746=(gclwh12_2*rxp1_2*x508);
IkReal x747=(x534*x598);
IkReal x748=(gclwh4_2*rxp2_2*x508);
IkReal x749=(gclwh10_11*npz*x519);
IkReal x750=(x532*x640);
IkReal x751=(gclwh8_11*npx*x519);
IkReal x752=(gclwh11_10*npz*x519);
IkReal x753=(gclwh9_10*npx*x519);
IkReal x754=(gclwh13_1*pp*x510);
IkReal x755=(x545*x631);
IkReal x756=(x528*x561);
IkReal x757=(gclwh15_0*rxp0_2*x508);
IkReal x758=(x526*x631);
IkReal x759=(x587*x615);
IkReal x760=(x515*x615);
IkReal x761=(gclwh15_1*pp*x534);
IkReal x762=(gclwh5_0*rxp2_2*x508);
IkReal x763=(gclwh13_0*rxp1_2*x508);
IkReal x764=(x532*x581);
IkReal x765=(x519*x520);
IkReal x766=((0.268)*gclwh9_7*x539);
IkReal x767=((0.134)*gclwh7_7*x509);
IkReal x768=((0.268)*gclwh11_7*x530);
IkReal x769=((0.134)*gclwh11_7*x545);
IkReal x770=((0.268)*gclwh7_7*x541);
IkReal x771=((0.134)*gclwh9_7*x515);
IkReal x772=(x509*x643);
IkReal x773=((0.536)*gclwh14_14*x539);
IkReal x774=(x545*x592);
IkReal x775=((0.536)*gclwh4_14*x530);
IkReal x776=(x515*x556);
IkReal x777=((0.536)*gclwh12_14*x541);
IkReal x778=((0.134)*gclwh12_14*x509);
IkReal x779=(x539*x556);
IkReal x780=((0.134)*gclwh4_14*x545);
IkReal x781=(x541*x643);
IkReal x782=((0.134)*gclwh14_14*x515);
IkReal x783=(x530*x592);
IkReal x784=(x515*x533);
IkReal x785=(x533*x587);
IkReal x786=((0.1)*gclwh4_8*x545);
IkReal x787=(x507*x624);
IkReal x788=(gclwh1_2*pz*x587);
IkReal x789=(gclwh3_2*pz*x532);
IkReal x790=(gclwh4_11*npz*x519);
IkReal x791=((0.1)*gclwh12_8*x509);
IkReal x792=(x507*x576);
IkReal x793=(x507*x597);
IkReal x794=(gclwh6_2*rxp1_2*x508);
IkReal x795=(x507*x616);
IkReal x796=(gclwh12_11*npy*x519);
IkReal x797=(x508*x513);
IkReal x798=(gclwh4_8*npz*x508);
IkReal x799=(gclwh14_11*npx*x519);
IkReal x800=(x508*x548);
IkReal x801=(gclwh10_2*rxp2_2*x508);
IkReal x802=(x526*x551);
IkReal x803=(gclwh8_2*rxp0_2*x508);
IkReal x804=((0.1)*gclwh14_8*x515);
IkReal x805=(x532*x644);
IkReal x806=(x532*x635);
IkReal x807=(gclwh0_0*pz*x587);
IkReal x808=(gclwh11_0*rxp2_2*x508);
IkReal x809=(x531*x532);
IkReal x810=(x508*x630);
IkReal x811=(x507*x524);
IkReal x812=(pp*pz*x517);
IkReal x813=((0.01)*pz*x517);
IkReal x814=(x509*x635);
IkReal x815=(gclwh9_0*rxp0_2*x508);
IkReal x816=((0.1)*gclwh15_9*x515);
IkReal x817=(x507*x605);
IkReal x818=(gclwh5_10*npz*x519);
IkReal x819=(gclwh13_10*npy*x519);
IkReal x820=(gclwh5_9*npz*x508);
IkReal x821=(x507*x628);
IkReal x822=(x508*x565);
IkReal x823=((0.1)*gclwh5_9*x545);
IkReal x824=(gclwh15_9*npx*x508);
IkReal x825=((0.1)*gclwh13_9*x509);
IkReal x826=(gclwh15_10*npx*x519);
IkReal x827=(x587*x611);
IkReal x828=(x530*x617);
IkReal x829=((0.134)*gclwh15_15*x515);
IkReal x830=(x541*x609);
IkReal x831=((0.134)*gclwh13_15*x509);
IkReal x832=(x539*x612);
IkReal x833=((0.134)*gclwh5_15*x545);
IkReal x834=(gclwh6_2*npy*x718);
IkReal x835=(gclwh6_2*x509*x537);
IkReal x836=(gclwh10_2*npz*x718);
IkReal x837=(gclwh8_2*npx*x718);
IkReal x838=(gclwh7_0*npy*x718);
IkReal x839=(gclwh9_0*npx*x718);
IkReal x840=(gclwh11_0*npz*x718);
IkReal x841=(gclwh7_0*x509*x537);
IkReal x842=(gclwh12_2*npy*x718);
IkReal x843=(gclwh3_2*npy*x718);
IkReal x844=(gclwh1_2*npx*x718);
IkReal x845=(npx*x519*x598);
IkReal x846=(gclwh4_2*npz*x718);
IkReal x847=(npz*x519*x529);
IkReal x848=(gclwh12_2*x509*x537);
IkReal x849=(gclwh1_2*x515*x537);
IkReal x850=(gclwh3_3*x519*x629);
IkReal x851=(gclwh4_2*x537*x545);
IkReal x852=(gclwh1_3*x519*x622);
IkReal x853=(gclwh3_2*x509*x537);
IkReal x854=(npy*x519*x590);
IkReal x855=(gclwh14_2*npx*x718);
IkReal x856=(x636*x719);
IkReal x857=(gclwh0_0*npx*x718);
IkReal x858=(gclwh2_0*npy*x718);
IkReal x859=(npz*x519*x561);
IkReal x860=(gclwh13_1*x519*x629);
IkReal x861=(gclwh15_0*npx*x718);
IkReal x862=(gclwh2_1*x519*x629);
IkReal x863=(gclwh0_1*x519*x622);
IkReal x864=(gclwh5_0*npz*x718);
IkReal x865=(gclwh13_0*npy*x718);
IkReal x866=(gclwh0_0*x515*x537);
IkReal x867=(gclwh15_0*x515*x537);
IkReal x868=((1.0)*x509*x531);
IkReal x869=(x553*x719);
IkReal x870=(x577*x719);
IkReal x871=(gclwh15_1*x519*x622);
IkReal x872=(x689+x688);
IkReal x873=(x678+x679);
IkReal x874=(x713+x716);
IkReal x875=(x654+x656);
IkReal x876=(x660+x663+x662+x739);
IkReal x877=(x676+x674+x675+x765);
IkReal x878=(x703+x704+x818+x819);
IkReal x879=(x694+x695+x790+x796);
IkReal x880=(x647+x723+x724+x725);
IkReal x881=(x711+x829+x828+x830);
IkReal x882=(x655+x734+x733+x732);
IkReal x883=(x686+x777+x776+x775);
IkReal x884=(x692+x782+x783+x781);
IkReal x885=(x680+x768+x766+x767);
IkReal x886=(x697+x698+x700+x701+x799);
IkReal x887=(x710+x708+x709+x706+x826);
IkReal x888=(x673+x670+x671+x753+x752);
IkReal x889=(x668+x667+x666+x751+x749);
IkReal x890=(x649+x648+x726+x727+x728);
IkReal x891=(x685+x684+x773+x772+x774);
IkReal x892=(x658+x659+x737+x736+x735);
IkReal x893=(x715+x714+x831+x832+x833);
IkReal x894=(x683+x682+x771+x770+x769);
IkReal x895=(x687+x690+x779+x778+x780);
IkReal x896=(x646+x645+x720+x721+x722);
IkReal x897=(x650+x651+x652+x653+x731+x730+x729);
IkReal x898=(x677+x764+x761+x762+x763+x839+x841+x840);
IkReal x899=(x665+x750+x746+x747+x748+x835+x836+x837);
IkReal x900=(x669+x672+x755+x754+x757+x756+x759+x758+x760+x838);
IkReal x901=(x661+x664+x738+x744+x745+x742+x743+x740+x741+x834);
IkReal x902=(x707+x705+x869+x868+x867+x866+x865+x864+x863+x862+x870+x871+x823+x822+x827+x825+x824);
IkReal x903=(x508+x696+x693+x791+x793+x792+x795+x794+x797+x786+x787+x784+x785+x788+x789+x843+x842+x845+x844+x846);
IkReal x904=(x699+x798+x852+x853+x850+x851+x856+x854+x855+x847+x849+x848+x805+x804+x801+x800+x803+x802);
IkReal x905=(x508+x702+x857+x858+x859+x861+x860+x816+x817+x814+x815+x812+x813+x810+x811+x821+x820+x809+x808+x807+x806);
op[41]=((((-1.0)*gclwh10_2*x518))+((gclwh1_2*x569))+((gclwh3_2*x560))+(((0.132)*gclwh1_2*x539))+((gclwh14_2*x569))+(((-1.0)*gclwh12_2*x560))+(((-0.132)*npx*x533))+(((-0.066)*gclwh12_2*x509))+(((0.132)*gclwh3_2*x541))+(((-1.0)*x883))+(((0.132)*gclwh12_2*x541))+(((-0.066)*gclwh3_2*x509))+(((-0.066)*gclwh4_2*x545))+((gclwh6_2*x554))+(((-0.066)*gclwh1_2*x515))+(((0.132)*gclwh4_2*x530))+(((-1.0)*gclwh8_2*x595))+x891+(((-0.00066)*x625))+(((0.066)*gclwh14_2*x515)));
op[42]=((((0.3268)*gclwh11_0*rxp2_2))+(((0.3268)*gclwh9_0*rxp0_2))+(((-3.268)*gclwh5_0*x530))+(((1.634)*gclwh13_0*x509))+((gclwh13_0*x588))+(((-1.0)*x896))+(((3.268)*gclwh15_0*x539))+((gclwh2_0*x588))+(((3.268)*npy*x531))+(((-3.268)*gclwh13_0*x541))+(((-1.634)*gclwh15_0*x515))+(((3.268)*gclwh0_0*x539))+(((-1.634)*gclwh2_0*x509))+x880+(((-1.634)*gclwh0_0*x515))+(((1.634)*pp*x517))+(((0.01634)*x517))+(((-0.3268)*x565))+(((-1.0)*gclwh15_0*x608))+((gclwh0_0*x608)));
op[43]=((1.299066)+(((-1.0)*x890))+x897);
op[44]=((0.03602)+(((-0.8)*x589))+(((0.04)*x516))+((x509*x623))+((x545*x621))+(((0.04)*gclwh5_10*r22))+(((0.8)*gclwh11_10*rxp2_2))+(((0.8)*x570))+(((-8.0)*gclwh5_10*x530))+(((8.0)*gclwh15_10*x539))+(((-8.0)*gclwh13_10*x541))+(((-1.0)*x515*x568))+(((-0.04)*gclwh15_10*r20)));
op[45]=((((-0.00536)*x555))+(((-1.072)*gclwh5_15*x530))+(((1.072)*gclwh15_15*x539))+(((-1.072)*gclwh13_15*x541))+(((0.3136)*x538))+(((0.00536)*x613))+(((-1.0)*x515*x544))+(((0.3136)*gclwh11_13*rxp2_2))+(((0.00536)*x574))+((x509*x604))+(((-0.3136)*gclwh7_13*rxp1_2))+((x545*x547)));
op[46]=(((gclwh9_0*x595))+(((-0.066)*gclwh0_0*x515))+(((-1.0)*gclwh7_0*x554))+(((-0.066)*gclwh15_0*x515))+(((0.066)*pp*x517))+(((0.066)*gclwh13_0*x509))+(((-0.132)*gclwh5_0*x530))+((gclwh0_0*x569))+(((-1.0)*x880))+((gclwh11_0*x518))+(((-0.066)*gclwh2_0*x509))+((gclwh13_0*x560))+((gclwh2_0*x560))+(((0.132)*npy*x531))+(((0.132)*gclwh15_0*x539))+(((-0.132)*gclwh13_0*x541))+x896+(((0.132)*gclwh0_0*x539))+(((-1.0)*gclwh15_0*x569))+(((0.00066)*x517)));
op[47]=((0.033734)+(((-1.0)*x897))+x890);
op[48]=((((-1.0)*gclwh12_8*x573))+(((0.1634)*x582))+(((0.817)*gclwh8_12*x515))+((gclwh8_12*x626))+(((-1.0)*x892))+(((0.817)*gclwh10_12*x545))+((x527*x620))+(((-0.00817)*gclwh6_12*r21))+((gclwh10_12*x564))+x657+(((-1.634)*gclwh8_12*x539))+(((-0.817)*gclwh6_12*x509))+(((-1.634)*gclwh10_12*x530))+x882+(((-1.0)*gclwh4_8*x585))+(((-1.0)*x875)));
op[49]=((((-1.0)*gclwh8_11*x515))+(((-1.0)*x899))+(((-1.0)*gclwh4_3*x634))+(((-1.0)*gclwh10_11*x545))+((gclwh14_3*x557))+(((-0.135089)*x552))+((gclwh6_11*x509))+x889+x901+(((-1.0)*x876)));
op[50]=((0.210112)+((gclwh12_11*x607))+(((2.0)*gclwh6_11*x509))+(((-0.02)*x562))+(((-4.0)*gclwh6_11*x541))+(((-2.0)*gclwh10_11*x545))+(((4.0)*gclwh8_11*x539))+((gclwh6_11*x563))+(((-2.0)*gclwh8_11*x515))+((gclwh4_11*x594))+(((4.0)*gclwh10_11*x530))+(((-1.0)*gclwh10_11*x521))+(((-1.0)*gclwh14_11*x633)));
op[51]=((((-1.0)*gclwh14_14*x641))+(((0.0536)*x567))+((gclwh4_8*x583))+(((-1.568)*gclwh6_2*x541))+((gclwh12_14*x584))+(((-1.0)*gclwh10_2*x536))+(((-0.784)*gclwh8_2*x515))+(((1.568)*gclwh10_2*x530))+(((0.784)*gclwh6_2*x509))+((gclwh6_2*x522))+((gclwh12_2*x602))+(((-1.0)*gclwh10_2*r22*x542))+(((-1.0)*gclwh14_2*x540))+(((-1.0)*gclwh8_2*x596))+(((0.17)*x593))+((gclwh4_2*x586))+((x535*x627))+(((-0.17)*x582)));
op[52]=(((gclwh12_8*x543))+(((-0.033)*gclwh6_12*x509))+((gclwh8_12*x637))+(((-1.0)*x892))+(((-1.0)*x657))+(((-0.0066)*x582))+(((0.033)*gclwh10_12*x545))+(((0.033)*gclwh8_12*x515))+((x512*x527))+((gclwh10_12*x572))+x875+x882+(((-1.0)*gclwh6_12*x580))+(((-1.0)*gclwh10_12*npz*x512))+(((-1.0)*gclwh8_12*npx*x512))+((gclwh4_8*x546)));
op[53]=((((-1.0)*gclwh4_3*x566))+(((-1.0)*gclwh6_11*x509))+(((-1.0)*x899))+((gclwh8_11*x515))+(((-1.0)*x889))+((gclwh14_3*x642))+x876+((gclwh10_11*x545))+x901+(((-0.001809)*x552)));
op[54]=((((-1.0)*x898))+(((-1.0)*x888))+(((-0.135089)*x639))+(((-1.0)*gclwh7_10*x509))+((gclwh11_10*x545))+((gclwh9_10*x515))+(((-1.0)*gclwh5_1*x634))+x877+((gclwh15_1*x557))+x900);
op[55]=(((gclwh11_13*x564))+(((-1.0)*gclwh5_9*x585))+(((0.817)*gclwh9_13*x515))+(((-1.0)*x894))+(((0.1634)*x601))+(((1.634)*gclwh7_13*x541))+((gclwh9_13*x626))+(((-0.00817)*x578))+(((-1.634)*gclwh11_13*x530))+(((0.817)*gclwh11_13*x545))+x681+(((-1.0)*gclwh13_9*x573))+x885+(((-1.634)*gclwh9_13*x539))+(((-0.817)*gclwh7_13*x509))+(((-1.0)*x873)));
op[56]=(((gclwh5_0*x586))+(((-1.0)*gclwh5_9*x583))+(((-1.0)*gclwh15_0*x540))+(((-1.0)*gclwh9_0*x596))+((gclwh15_15*x641))+(((1.568)*gclwh9_0*x539))+(((-1.568)*gclwh7_0*x541))+(((0.784)*gclwh7_0*x509))+(((-0.0536)*gclwh5_15*rxp2_2))+(((-1.0)*gclwh11_0*r22*x542))+((gclwh7_0*x522))+(((-0.784)*gclwh9_0*x515))+(((0.17)*x601))+((gclwh13_0*x602))+(((-1.0)*gclwh11_0*x536))+(((-0.17)*x579))+(((1.568)*gclwh11_0*x530))+(((-1.0)*gclwh13_15*x584)));
op[57]=((0.210112)+(((-1.0)*gclwh9_10*x606))+((gclwh7_10*x563))+(((-4.0)*pz*x520))+(((4.0)*gclwh11_10*x530))+(((2.0)*gclwh7_10*x509))+((gclwh5_10*x594))+(((-1.0)*gclwh11_10*x521))+(((-2.0)*gclwh9_10*x515))+((gclwh13_10*x607))+(((-1.0)*gclwh15_10*x633))+(((4.0)*gclwh9_10*x539))+(((-2.0)*gclwh11_10*x545)));
op[58]=((((-1.0)*gclwh9_10*x515))+((gclwh15_1*x642))+((gclwh7_10*x509))+(((-1.0)*x898))+(((-1.0)*gclwh5_1*x566))+(((-1.0)*gclwh11_10*x545))+x888+x900+(((-0.001809)*x639))+(((-1.0)*x877)));
op[59]=((((-0.0066)*x601))+((gclwh7_13*npy*x512))+(((-1.0)*x681))+(((-1.0)*gclwh9_13*npx*x512))+(((0.033)*gclwh9_13*x515))+(((-1.0)*x894))+((gclwh13_9*x543))+(((-0.00033)*x578))+((gclwh9_13*x637))+(((0.033)*gclwh11_13*x545))+((gclwh11_13*x572))+x873+x885+(((-0.033)*gclwh7_13*x509))+((gclwh5_9*x546))+(((-1.0)*gclwh11_13*npz*x512)));
op[60]=((((-1.0)*gclwh10_12*x585))+(((-0.1634)*x614))+(((0.817)*gclwh14_8*x515))+((gclwh6_12*x573))+(((1.634)*gclwh12_8*x541))+(((-0.00817)*x525))+(((-1.0)*x513*x620))+(((-1.0)*x895))+(((-0.817)*gclwh4_8*x545))+(((1.634)*gclwh4_8*x530))+(((0.00817)*x550))+(((-1.0)*gclwh4_8*x564))+(((-1.0)*x691))+x872+x884+(((-0.817)*gclwh12_8*x509)));
op[61]=((0.685445)+(((-0.665445)*gclwh12_3*x509))+(((0.665445)*gclwh14_3*x515))+(((-0.00675445)*x624))+(((-1.35089)*gclwh14_3*x539))+(((-1.0)*x904))+(((-0.00675445)*x616))+(((0.00675445)*x636))+(((0.00675445)*x576))+(((0.00675445)*x597))+(((1.35089)*gclwh4_3*x530))+(((-0.685445)*gclwh1_3*x515))+(((1.35089)*gclwh1_3*x539))+(((1.35089)*gclwh3_3*x541))+((gclwh4_11*x545))+((gclwh12_11*x509))+(((1.35089)*gclwh12_3*x541))+(((-0.665445)*r22*x529))+x886+x903+(((-0.685445)*gclwh3_3*x509))+(((-1.0)*gclwh14_11*x515))+(((-1.0)*x879)));
op[62]=((0.089834)+((gclwh10_11*x594))+(((-1.0)*gclwh6_11*x607))+(((-4.0)*gclwh12_11*x541))+((gclwh8_11*x633))+(((-0.02)*x571))+((gclwh12_11*x563))+(((-2.0)*gclwh14_11*x515))+(((2.0)*gclwh4_11*x545))+((gclwh4_11*x521))+(((4.0)*gclwh14_11*x539))+(((-4.0)*gclwh4_11*x530))+(((2.0)*gclwh12_11*x509)));
op[63]=((((-1.7)*gclwh12_8*x541))+(((0.85)*gclwh4_8*x545))+(((-1.568)*gclwh4_2*x530))+(((-1.568)*gclwh3_2*x541))+(((0.784)*gclwh3_2*x509))+(((0.784)*gclwh1_2*x515))+(((-0.784)*gclwh14_2*x515))+(((-1.568)*gclwh12_2*x541))+(((-1.0)*gclwh14_2*x596))+(((-1.0)*gclwh6_2*x602))+(((-1.0)*gclwh1_2*x596))+(((-1.0)*gclwh3_2*x522))+(((-1.0)*x883))+(((0.0085)*x619))+(((-0.85)*gclwh14_8*x515))+(((0.85)*gclwh12_8*x509))+(((1.7)*pz*x513))+((gclwh12_2*x522))+((gclwh10_2*x586))+(((0.0085)*x525))+((x533*x627))+((gclwh8_2*x540))+x891+(((-0.0085)*x550))+(((-1.7)*gclwh4_8*x530))+((gclwh4_2*x536))+(((-1.568)*gclwh1_2*x539))+((x542*x625))+(((0.784)*gclwh12_2*x509)));
op[64]=((((-0.033)*gclwh14_8*x515))+(((0.033)*gclwh4_8*x545))+(((0.00033)*x525))+((gclwh4_8*x572))+(((-1.0)*x884))+(((0.033)*gclwh12_8*x509))+((x512*x513))+(((-1.0)*x691))+(((-1.0)*x512*x548))+(((-1.0)*gclwh4_8*npz*x512))+x872+x895+(((-0.00033)*x550))+(((-1.0)*gclwh10_12*x546))+((gclwh6_12*x543))+(((-0.0066)*x614)));
op[65]=((-0.019045)+(((-1.0)*gclwh12_11*x509))+(((0.000955)*r22*x529))+(((-0.01809)*gclwh14_3*x539))+(((-1.0)*x904))+(((0.01809)*gclwh1_3*x539))+(((-1.0)*x886))+(((-1.0)*gclwh4_11*x545))+(((0.01809)*gclwh12_3*x541))+(((-9.045e-5)*x616))+((gclwh14_3*x549))+(((9.045e-5)*x576))+(((0.01809)*gclwh4_3*x530))+((gclwh14_11*x515))+(((-9.045e-5)*x624))+(((-0.019045)*gclwh3_3*x509))+x879+x903+(((-0.019045)*gclwh1_3*x515))+(((0.01809)*gclwh3_3*x541))+((gclwh1_3*x549))+(((-0.000955)*gclwh14_3*x515))+(((0.000955)*gclwh12_3*x509)));
op[66]=((-0.685445)+(((0.00675445)*x553))+(((0.00675445)*x605))+(((1.35089)*gclwh15_1*x539))+(((-1.0)*x902))+(((0.665445)*gclwh13_1*x509))+(((0.00675445)*x628))+(((0.00675445)*x577))+((gclwh5_10*x545))+(((1.35089)*gclwh2_1*x541))+(((-0.665445)*gclwh15_1*x515))+(((-1.35089)*gclwh13_1*x541))+(((-0.685445)*gclwh0_1*x515))+(((1.35089)*gclwh0_1*x539))+(((-0.685445)*gclwh2_1*x509))+(((0.665445)*gclwh5_1*x545))+x887+((gclwh13_10*x509))+(((-0.00675445)*x524))+x905+(((-1.35089)*gclwh5_1*x530))+(((-1.0)*gclwh15_10*x515))+(((-1.0)*x878)));
op[67]=((((0.1634)*x538))+((gclwh5_9*x564))+(((0.817)*gclwh5_9*x545))+(((-1.634)*gclwh13_9*x541))+(((-1.634)*gclwh5_9*x530))+(((-0.00817)*x523))+(((-1.0)*x881))+((gclwh11_13*x585))+(((-0.817)*gclwh15_9*x515))+(((1.634)*x717))+(((-1.0)*gclwh7_13*x573))+x712+x893+(((0.00817)*x591))+(((0.817)*gclwh13_9*x509))+(((-1.0)*x874)));
op[68]=((((0.85)*gclwh5_9*x545))+(((0.85)*gclwh13_9*x509))+(((1.568)*gclwh5_0*x530))+(((0.784)*gclwh0_0*x515))+(((-0.784)*gclwh13_0*x509))+(((-1.568)*npy*x531))+(((-1.0)*gclwh11_0*x586))+(((-1.0)*gclwh2_0*x522))+(((-1.568)*gclwh0_0*x539))+(((-1.0)*x880))+(((-1.0)*gclwh0_0*x596))+(((0.0085)*x591))+(((-1.0)*x517*x542))+(((-1.568)*gclwh15_0*x539))+(((-0.85)*gclwh15_9*x515))+(((0.784)*gclwh2_0*x509))+(((-1.0)*gclwh9_0*x540))+((gclwh15_0*x596))+(((-0.0085)*x523))+(((0.1568)*x565))+x896+(((1.568)*gclwh13_0*x541))+(((0.784)*gclwh15_0*x515))+(((0.0085)*x632))+(((-1.7)*gclwh5_9*x530))+(((-1.0)*gclwh13_0*x522))+(((-0.00784)*x517))+(((1.7)*x717))+(((-1.7)*gclwh13_9*x541)));
op[69]=((0.089834)+(((-1.0)*x897))+x890);
op[70]=((0.019045)+((gclwh0_1*x549))+(((0.01809)*gclwh0_1*x539))+(((0.01809)*gclwh2_1*x541))+(((-0.019045)*gclwh0_1*x515))+(((-1.0)*x902))+(((0.000955)*gclwh15_1*x515))+(((-1.0)*gclwh5_10*x545))+(((9.045e-5)*x605))+(((-0.01809)*gclwh5_1*x530))+(((-1.0)*x887))+(((-0.000955)*gclwh13_1*x509))+((gclwh15_10*x515))+(((9.045e-5)*x577))+(((-0.01809)*gclwh13_1*x541))+(((0.01809)*gclwh15_1*x539))+x878+(((-1.0)*gclwh13_10*x509))+(((-0.019045)*gclwh2_1*x509))+(((-9.045e-5)*x524))+x905+(((9.045e-5)*x553))+(((-0.000955)*gclwh5_1*x545)));
op[71]=((((-0.033)*gclwh5_9*x545))+(((0.0066)*x538))+(((-0.033)*gclwh13_9*x509))+(((0.00033)*x523))+(((-1.0)*x893))+(((-1.0)*gclwh5_9*x572))+(((-1.0)*gclwh7_13*x543))+(((-1.0)*gclwh13_9*x580))+(((-1.0)*gclwh15_9*npx*x512))+(((0.033)*gclwh15_9*x515))+((gclwh11_13*x546))+x712+x881+((x512*x630))+((gclwh5_9*npz*x512))+(((-1.0)*x874)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x906=htj1*htj1;
CheckValue<IkReal> x907=IKPowWithIntegerCheck(((1.0)+x906),-1);
if(!x907.valid){
continue;
}
cj1array[numsolutions]=((x907.value)*(((1.0)+(((-1.0)*x906)))));
CheckValue<IkReal> x908=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x908.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x908.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x909=htj2*htj2;
CheckValue<IkReal> x910=IKPowWithIntegerCheck(((1.0)+x909),-1);
if(!x910.valid){
continue;
}
cj2array[numsolutions]=((x910.value)*(((1.0)+(((-1.0)*x909)))));
CheckValue<IkReal> x911=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x911.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x911.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x912=htj3*htj3;
CheckValue<IkReal> x913=IKPowWithIntegerCheck(((1.0)+x912),-1);
if(!x913.valid){
continue;
}
cj3array[numsolutions]=((x913.value)*(((1.0)+(((-1.0)*x912)))));
CheckValue<IkReal> x914=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x914.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x914.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+3, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+5, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+4, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+6, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x915=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x915);
rxp1_0=(pz*r11);
rxp1_1=(r01*x915);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x916=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x916);
rxp1_0=(pz*r11);
rxp1_1=(r01*x916);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x917=IKPowWithIntegerCheck(r22,-1);
if(!x917.valid){
continue;
}
CheckValue<IkReal> x918=IKPowWithIntegerCheck(sj3,-1);
if(!x918.valid){
continue;
}
sj4array[0]=((x917.value)*(x918.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x919=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x919);
rxp1_0=(pz*r11);
rxp1_1=(r01*x919);
IkReal x920=((16.0)*sj4);
IkReal x921=(cj1*cj2);
IkReal x922=((4.0)*sj3);
IkReal x923=((8.0)*sj4);
IkReal x924=((4.0)*cj4);
IkReal x925=(sj1*sj2);
IkReal x926=((4.0)*sj4);
IkReal x927=(cj3*r02);
IkReal x928=((16.0)*sj3);
IkReal x929=((8.0)*sj3);
IkReal x930=((12.0)*cj4);
IkReal x931=((12.0)*sj4);
IkReal x932=(cj3*r12);
IkReal x933=(r11*x922);
IkReal x934=(r01*x922);
IkReal x935=(r01*x925);
IkReal x936=(cj3*cj4*r01);
IkReal x937=(cj3*cj4*r11);
IkReal x938=(cj3*r10*x924);
IkReal x939=(x931*x932);
IkReal x940=(cj3*r00*x924);
IkReal x941=(x927*x931);
IkReal x942=(r00*x925*x926);
IkReal x943=(r02*x925*x930);
IkReal x944=(r00*x921*x926);
IkReal x945=(r02*x921*x930);
IkReal x946=(r10*x925*x926);
IkReal x947=(r12*x921*x930);
IkReal x948=(r12*x925*x930);
IkReal x949=(r10*x921*x926);
IkReal x950=(x933+x944);
IkReal x951=(x934+x946);
IkReal x952=(x938+x942);
IkReal x953=(x939+x945);
IkReal x954=(x949+x940);
IkReal x955=(x948+x941);
j5eval[0]=((IKabs(((((-1.0)*r10*x929))+(((-8.0)*x937))+((r01*x921*x923))+(((-1.0)*x923*x935)))))+(((0.5)*(IKabs(((((-1.0)*x953))+(((-1.0)*x952))+x950+x943)))))+(((0.5)*(IKabs(((((-1.0)*r12*x924*x925))+(((-1.0)*x926*x927))+((r12*x921*x924))+(((-1.0)*x954))+x951)))))+(((0.5)*(IKabs(((((-1.0)*r10*x928))+(((-1.0)*x920*x935))+((r01*x920*x921))+(((-16.0)*x937)))))))+(((0.5)*(IKabs((((r11*x920*x925))+(((-16.0)*x936))+(((-1.0)*r00*x928))+(((-1.0)*r11*x920*x921)))))))+(IKabs(((((-1.0)*r11*x921*x923))+(((-8.0)*x936))+((r11*x923*x925))+(((-1.0)*r00*x929)))))+(((0.5)*(IKabs(((((-1.0)*x953))+(((-1.0)*x950))+x952+x943)))))+(((0.5)*(IKabs(((((-1.0)*x955))+(((-1.0)*x951))+x954+x947)))))+(((0.5)*(IKabs((((r02*x924*x925))+(((-1.0)*x926*x932))+(((-1.0)*x952))+x950+(((-1.0)*r02*x921*x924)))))))+(((0.5)*(IKabs(((((-1.0)*x954))+(((-1.0)*x955))+x951+x947))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x956=(r10*sj3);
IkReal x957=(r01*sj4);
IkReal x958=(cj1*cj2);
IkReal x959=(cj3*cj4);
IkReal x960=(sj1*sj2);
IkReal x961=(cj4*r02);
IkReal x962=((4.0)*r11*sj3);
IkReal x963=(cj3*r12*sj4);
IkReal x964=((4.0)*r00*sj4);
IkReal x965=((4.0)*r10*x959);
IkReal x966=((12.0)*x963);
IkReal x967=((4.0)*x963);
IkReal x968=(x958*x964);
IkReal x969=(x960*x964);
IkReal x970=((12.0)*x960*x961);
IkReal x971=((12.0)*x958*x961);
IkReal x972=((4.0)*x960*x961);
IkReal x973=((4.0)*x958*x961);
IkReal x974=(x962+x968);
IkReal x975=(x965+x969);
IkReal x976=(x973+x967);
IkReal x977=(x971+x966);
IkReal x978=((((8.0)*x957*x958))+(((-8.0)*x956))+(((-8.0)*x957*x960))+(((-8.0)*r11*x959)));
op[0]=(x972+x974+(((-1.0)*x975))+(((-1.0)*x976)));
op[1]=x978;
op[2]=(x970+x974+(((-1.0)*x975))+(((-1.0)*x977)));
op[3]=((((16.0)*x957*x958))+(((-16.0)*r11*x959))+(((-16.0)*x957*x960))+(((-16.0)*x956)));
op[4]=(x970+x975+(((-1.0)*x974))+(((-1.0)*x977)));
op[5]=x978;
op[6]=(x972+x975+(((-1.0)*x974))+(((-1.0)*x976)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x979=(cj1*cj2);
IkReal x980=((4.0)*cj4);
IkReal x981=(sj1*sj2);
IkReal x982=((4.0)*sj4);
IkReal x983=(r00*sj3);
IkReal x984=(cj3*r02);
IkReal x985=((4.0)*r01*sj3);
IkReal x986=((16.0)*r11*sj4);
IkReal x987=(cj3*cj4*r01);
IkReal x988=((12.0)*cj4*r12);
IkReal x989=((8.0)*r11*sj4);
IkReal x990=(cj3*r00*x980);
IkReal x991=((12.0)*sj4*x984);
IkReal x992=(x982*x984);
IkReal x993=(r10*x979*x982);
IkReal x994=(r10*x981*x982);
IkReal x995=(x979*x988);
IkReal x996=(x981*x988);
IkReal x997=(r12*x979*x980);
IkReal x998=(r12*x980*x981);
IkReal x999=(x994+x985);
IkReal x1000=(x993+x990);
IkReal x1001=(x992+x998);
IkReal x1002=(x991+x996);
IkReal x1003=(((x981*x989))+(((-8.0)*x983))+(((-8.0)*x987))+(((-1.0)*x979*x989)));
j5evalpoly[0]=(((x1003*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x1002))+(((-1.0)*x1000))+x995+x999))))+x1000+(((-1.0)*x1001))+(((htj5*htj5*htj5)*((((x981*x986))+(((-16.0)*x983))+(((-16.0)*x987))+(((-1.0)*x979*x986))))))+(((-1.0)*x999))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x1001))+(((-1.0)*x1000))+x997+x999))))+(((htj5*htj5)*((x1000+(((-1.0)*x1002))+(((-1.0)*x999))+x995))))+((htj5*x1003))+x997);
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1004=(cj5*sj4);
IkReal x1005=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x1005))+((r00*x1004))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1004))+((r11*x1005))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1005))+((r00*x1004))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x1004))+((r11*x1005))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x1005))+((r00*x1004))+((cj4*r02))), ((((-1.0)*r10*x1004))+((r11*x1005))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1006=IKcos(j0);
IkReal x1007=IKsin(j0);
IkReal x1008=(r02*sj4);
IkReal x1009=((0.1)*sj5);
IkReal x1010=(sj1*sj2);
IkReal x1011=(cj5*r11);
IkReal x1012=((1.0)*sj3);
IkReal x1013=(r12*sj4);
IkReal x1014=((1.0)*cj3);
IkReal x1015=(cj1*cj2);
IkReal x1016=(r11*sj5);
IkReal x1017=(cj3*cj4);
IkReal x1018=(cj5*r01);
IkReal x1019=(r01*sj5);
IkReal x1020=((0.425)*cj1);
IkReal x1021=(cj2*sj1);
IkReal x1022=(r00*sj5);
IkReal x1023=(cj1*sj2);
IkReal x1024=(r10*sj5);
IkReal x1025=((1.0)*cj4);
IkReal x1026=((0.392)*x1007);
IkReal x1027=(cj4*cj5*r00);
IkReal x1028=(cj4*cj5*r10);
IkReal x1029=((0.392)*x1006);
IkReal x1030=((1.0)*x1006);
IkReal x1031=((1.0)*cj5*sj4);
evalcond[0]=(x1007+((sj4*x1019))+(((-1.0)*r02*x1025))+(((-1.0)*r00*x1031)));
evalcond[1]=((((-1.0)*r12*x1025))+(((-1.0)*r10*x1031))+(((-1.0)*x1030))+((sj4*x1016)));
evalcond[2]=(((x1010*x1029))+(((0.134)*x1007))+(((-1.0)*px))+(((-1.0)*x1015*x1029))+(((-1.0)*r00*x1009))+(((-1.0)*x1006*x1020))+(((-0.1)*x1018)));
evalcond[3]=(((x1010*x1026))+(((-1.0)*r10*x1009))+(((-1.0)*py))+(((-1.0)*x1015*x1026))+(((-0.134)*x1006))+(((-1.0)*x1007*x1020))+(((-0.1)*x1011)));
evalcond[4]=(((cj3*x1018))+(((-1.0)*x1008*x1012))+(((-1.0)*cj4*x1012*x1019))+((x1006*x1023))+((x1006*x1021))+((sj3*x1027))+((cj3*x1022)));
evalcond[5]=(((cj3*x1008))+((x1017*x1019))+(((-1.0)*x1010*x1030))+(((-1.0)*x1014*x1027))+((x1006*x1015))+((sj3*x1018))+((sj3*x1022)));
evalcond[6]=((((-1.0)*x1012*x1013))+((cj3*x1011))+(((-1.0)*cj4*x1012*x1016))+((x1007*x1023))+((x1007*x1021))+((sj3*x1028))+((cj3*x1024)));
evalcond[7]=(((x1016*x1017))+((cj3*x1013))+(((-1.0)*x1014*x1028))+(((-1.0)*x1007*x1010))+((sj3*x1011))+((x1007*x1015))+((sj3*x1024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1032=IKPowWithIntegerCheck(cj3,-1);
if(!x1032.valid){
continue;
}
CheckValue<IkReal> x1033=IKPowWithIntegerCheck(r22,-1);
if(!x1033.valid){
continue;
}
sj4array[0]=((-1.0)*(x1032.value)*(x1033.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1034=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1034);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1034);
IkReal x1035=((16.0)*sj4);
IkReal x1036=(cj1*cj2);
IkReal x1037=((4.0)*sj3);
IkReal x1038=((8.0)*sj4);
IkReal x1039=((4.0)*cj4);
IkReal x1040=(sj1*sj2);
IkReal x1041=((4.0)*sj4);
IkReal x1042=(cj3*r02);
IkReal x1043=((16.0)*sj3);
IkReal x1044=((8.0)*sj3);
IkReal x1045=((12.0)*cj4);
IkReal x1046=((12.0)*sj4);
IkReal x1047=(cj3*r12);
IkReal x1048=(r11*x1037);
IkReal x1049=(r01*x1037);
IkReal x1050=(r01*x1040);
IkReal x1051=(cj3*cj4*r01);
IkReal x1052=(cj3*cj4*r11);
IkReal x1053=(cj3*r10*x1039);
IkReal x1054=(x1046*x1047);
IkReal x1055=(cj3*r00*x1039);
IkReal x1056=(x1042*x1046);
IkReal x1057=(r00*x1040*x1041);
IkReal x1058=(r02*x1040*x1045);
IkReal x1059=(r00*x1036*x1041);
IkReal x1060=(r02*x1036*x1045);
IkReal x1061=(r10*x1040*x1041);
IkReal x1062=(r12*x1036*x1045);
IkReal x1063=(r12*x1040*x1045);
IkReal x1064=(r10*x1036*x1041);
IkReal x1065=(x1059+x1048);
IkReal x1066=(x1049+x1061);
IkReal x1067=(x1053+x1057);
IkReal x1068=(x1054+x1060);
IkReal x1069=(x1055+x1064);
IkReal x1070=(x1056+x1063);
j5eval[0]=((IKabs(((((-1.0)*r00*x1044))+(((-1.0)*r11*x1036*x1038))+(((-8.0)*x1051))+((r11*x1038*x1040)))))+(((0.5)*(IKabs(((((-1.0)*r00*x1043))+(((-1.0)*r11*x1035*x1036))+(((-16.0)*x1051))+((r11*x1035*x1040)))))))+(((0.5)*(IKabs((x1066+((r12*x1036*x1039))+(((-1.0)*x1041*x1042))+(((-1.0)*r12*x1039*x1040))+(((-1.0)*x1069)))))))+(((0.5)*(IKabs((x1065+(((-1.0)*r02*x1036*x1039))+(((-1.0)*x1041*x1047))+(((-1.0)*x1067))+((r02*x1039*x1040)))))))+(IKabs(((((-8.0)*x1052))+(((-1.0)*r10*x1044))+(((-1.0)*x1038*x1050))+((r01*x1036*x1038)))))+(((0.5)*(IKabs((x1058+x1065+(((-1.0)*x1068))+(((-1.0)*x1067)))))))+(((0.5)*(IKabs((x1069+x1062+(((-1.0)*x1066))+(((-1.0)*x1070)))))))+(((0.5)*(IKabs(((((-1.0)*r10*x1043))+(((-16.0)*x1052))+((r01*x1035*x1036))+(((-1.0)*x1035*x1050)))))))+(((0.5)*(IKabs((x1058+x1067+(((-1.0)*x1068))+(((-1.0)*x1065)))))))+(((0.5)*(IKabs((x1062+x1066+(((-1.0)*x1069))+(((-1.0)*x1070))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1071=(r10*sj3);
IkReal x1072=(r01*sj4);
IkReal x1073=(cj1*cj2);
IkReal x1074=(cj3*cj4);
IkReal x1075=(sj1*sj2);
IkReal x1076=(cj4*r02);
IkReal x1077=((4.0)*r11*sj3);
IkReal x1078=(cj3*r12*sj4);
IkReal x1079=((4.0)*r00*sj4);
IkReal x1080=((4.0)*r10*x1074);
IkReal x1081=((12.0)*x1078);
IkReal x1082=((4.0)*x1078);
IkReal x1083=(x1073*x1079);
IkReal x1084=(x1075*x1079);
IkReal x1085=((12.0)*x1075*x1076);
IkReal x1086=((12.0)*x1073*x1076);
IkReal x1087=((4.0)*x1075*x1076);
IkReal x1088=((4.0)*x1073*x1076);
IkReal x1089=(x1077+x1083);
IkReal x1090=(x1084+x1080);
IkReal x1091=(x1082+x1088);
IkReal x1092=(x1086+x1081);
IkReal x1093=((((-8.0)*x1071))+(((-8.0)*x1072*x1075))+(((8.0)*x1072*x1073))+(((-8.0)*r11*x1074)));
op[0]=(x1087+x1089+(((-1.0)*x1091))+(((-1.0)*x1090)));
op[1]=x1093;
op[2]=(x1085+x1089+(((-1.0)*x1090))+(((-1.0)*x1092)));
op[3]=((((-16.0)*x1072*x1075))+(((16.0)*x1072*x1073))+(((-16.0)*r11*x1074))+(((-16.0)*x1071)));
op[4]=(x1090+x1085+(((-1.0)*x1092))+(((-1.0)*x1089)));
op[5]=x1093;
op[6]=(x1090+x1087+(((-1.0)*x1091))+(((-1.0)*x1089)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1094=(cj1*cj2);
IkReal x1095=((4.0)*cj4);
IkReal x1096=(sj1*sj2);
IkReal x1097=((4.0)*sj4);
IkReal x1098=(r00*sj3);
IkReal x1099=(cj3*r02);
IkReal x1100=((4.0)*r01*sj3);
IkReal x1101=((16.0)*r11*sj4);
IkReal x1102=(cj3*cj4*r01);
IkReal x1103=((12.0)*cj4*r12);
IkReal x1104=((8.0)*r11*sj4);
IkReal x1105=(cj3*r00*x1095);
IkReal x1106=((12.0)*sj4*x1099);
IkReal x1107=(x1097*x1099);
IkReal x1108=(r10*x1094*x1097);
IkReal x1109=(r10*x1096*x1097);
IkReal x1110=(x1094*x1103);
IkReal x1111=(x1096*x1103);
IkReal x1112=(r12*x1094*x1095);
IkReal x1113=(r12*x1095*x1096);
IkReal x1114=(x1100+x1109);
IkReal x1115=(x1105+x1108);
IkReal x1116=(x1107+x1113);
IkReal x1117=(x1106+x1111);
IkReal x1118=((((-8.0)*x1098))+(((-1.0)*x1094*x1104))+((x1096*x1104))+(((-8.0)*x1102)));
j5evalpoly[0]=(x1112+x1115+(((htj5*htj5*htj5*htj5)*((x1110+x1114+(((-1.0)*x1117))+(((-1.0)*x1115))))))+(((htj5*htj5*htj5)*(((((-16.0)*x1102))+(((-16.0)*x1098))+(((-1.0)*x1094*x1101))+((x1096*x1101))))))+((x1118*(htj5*htj5*htj5*htj5*htj5)))+(((-1.0)*x1116))+(((-1.0)*x1114))+(((htj5*htj5)*((x1110+x1115+(((-1.0)*x1117))+(((-1.0)*x1114))))))+((htj5*x1118))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1112+x1114+(((-1.0)*x1116))+(((-1.0)*x1115)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1119=(cj5*sj4);
IkReal x1120=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x1120))+((r00*x1119))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1119))+((r11*x1120))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1120))+((r00*x1119))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x1119))+((r11*x1120))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x1120))+((r00*x1119))+((cj4*r02))), ((((-1.0)*r10*x1119))+((r11*x1120))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1121=IKcos(j0);
IkReal x1122=IKsin(j0);
IkReal x1123=(r02*sj4);
IkReal x1124=((0.1)*sj5);
IkReal x1125=(sj1*sj2);
IkReal x1126=(cj5*r11);
IkReal x1127=((1.0)*sj3);
IkReal x1128=(r12*sj4);
IkReal x1129=((1.0)*cj3);
IkReal x1130=(cj1*cj2);
IkReal x1131=(r11*sj5);
IkReal x1132=(cj3*cj4);
IkReal x1133=(cj5*r01);
IkReal x1134=(r01*sj5);
IkReal x1135=((0.425)*cj1);
IkReal x1136=(cj2*sj1);
IkReal x1137=(r00*sj5);
IkReal x1138=(cj1*sj2);
IkReal x1139=(r10*sj5);
IkReal x1140=((1.0)*cj4);
IkReal x1141=((0.392)*x1122);
IkReal x1142=(cj4*cj5*r00);
IkReal x1143=(cj4*cj5*r10);
IkReal x1144=((0.392)*x1121);
IkReal x1145=((1.0)*x1121);
IkReal x1146=((1.0)*cj5*sj4);
evalcond[0]=(x1122+(((-1.0)*r00*x1146))+((sj4*x1134))+(((-1.0)*r02*x1140)));
evalcond[1]=(((sj4*x1131))+(((-1.0)*x1145))+(((-1.0)*r10*x1146))+(((-1.0)*r12*x1140)));
evalcond[2]=(((x1125*x1144))+(((0.134)*x1122))+(((-0.1)*x1133))+(((-1.0)*x1121*x1135))+(((-1.0)*px))+(((-1.0)*x1130*x1144))+(((-1.0)*r00*x1124)));
evalcond[3]=((((-0.1)*x1126))+((x1125*x1141))+(((-1.0)*x1122*x1135))+(((-1.0)*r10*x1124))+(((-1.0)*py))+(((-0.134)*x1121))+(((-1.0)*x1130*x1141)));
evalcond[4]=(((cj3*x1133))+((cj3*x1137))+((x1121*x1138))+((x1121*x1136))+(((-1.0)*x1123*x1127))+((sj3*x1142))+(((-1.0)*cj4*x1127*x1134)));
evalcond[5]=(((x1121*x1130))+(((-1.0)*x1129*x1142))+(((-1.0)*x1125*x1145))+((sj3*x1137))+((sj3*x1133))+((cj3*x1123))+((x1132*x1134)));
evalcond[6]=(((cj3*x1139))+(((-1.0)*x1127*x1128))+((sj3*x1143))+(((-1.0)*cj4*x1127*x1131))+((x1122*x1138))+((x1122*x1136))+((cj3*x1126)));
evalcond[7]=(((x1131*x1132))+(((-1.0)*x1129*x1143))+(((-1.0)*x1122*x1125))+((sj3*x1126))+((sj3*x1139))+((x1122*x1130))+((cj3*x1128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1147=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1147);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1147);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1148=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1148);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1148);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1149=IKPowWithIntegerCheck(r22,-1);
if(!x1149.valid){
continue;
}
CheckValue<IkReal> x1150=IKPowWithIntegerCheck(sj3,-1);
if(!x1150.valid){
continue;
}
sj4array[0]=((x1149.value)*(x1150.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1151=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1151);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1151);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))+(IKabs(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((-16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj3*r00*sj1*sj2))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj4*r01*sj1*sj2*sj3)))))))+(((0.5)*(IKabs(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1)))))))+(IKabs(((((-8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((-8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj2*cj4*r01*sj3))+(((-8.0)*cj1*r00*sj2*sj3)))))+(((0.5)*(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))))+(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1152=((4.0)*r01);
IkReal x1153=((16.0)*r00);
IkReal x1154=(cj3*sj2);
IkReal x1155=((8.0)*r00);
IkReal x1156=(cj2*cj3);
IkReal x1157=(cj4*r01);
IkReal x1158=((16.0)*cj1);
IkReal x1159=((8.0)*sj1);
IkReal x1160=((16.0)*sj1);
IkReal x1161=((8.0)*cj1);
IkReal x1162=(cj2*sj3);
IkReal x1163=(sj2*sj3);
IkReal x1164=(sj1*x1162);
IkReal x1165=((4.0)*cj4*r00);
IkReal x1166=(cj1*x1163);
IkReal x1167=(((sj1*x1163*x1165))+((x1152*x1164))+((x1152*x1166))+((sj1*x1152*x1154)));
IkReal x1168=(((cj1*x1152*x1156))+((cj1*x1154*x1165))+((cj1*x1162*x1165))+((sj1*x1156*x1165)));
IkReal x1169=(x1167+(((-1.0)*x1168)));
IkReal x1170=((((-1.0)*x1156*x1157*x1159))+(((-1.0)*x1157*x1161*x1162))+(((-1.0)*sj1*x1154*x1155))+((x1157*x1159*x1163))+((cj1*x1155*x1156))+(((-1.0)*x1154*x1157*x1161))+(((-1.0)*x1155*x1164))+(((-1.0)*x1155*x1166)));
IkReal x1171=(x1168+(((-1.0)*x1167)));
op[0]=x1169;
op[1]=x1170;
op[2]=x1169;
op[3]=((((-1.0)*x1153*x1164))+(((-1.0)*x1153*x1166))+(((-1.0)*x1156*x1157*x1160))+((cj1*x1153*x1156))+(((-1.0)*x1154*x1157*x1158))+((x1157*x1160*x1163))+(((-1.0)*x1157*x1158*x1162))+(((-1.0)*sj1*x1153*x1154)));
op[4]=x1171;
op[5]=x1170;
op[6]=x1171;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+((htj5*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((htj5*htj5*htj5)*(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))))))+(((4.0)*cj1*cj2*cj4*r10*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1172=((1.0)*sj4);
if( IKabs(((((-1.0)*r01*sj5*x1172))+((cj5*r00*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x1172))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*sj5*x1172))+((cj5*r00*sj4))))+IKsqr(((((-1.0)*cj5*r10*x1172))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*sj5*x1172))+((cj5*r00*sj4))), ((((-1.0)*cj5*r10*x1172))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1173=IKcos(j0);
IkReal x1174=IKsin(j0);
IkReal x1175=((0.1)*sj5);
IkReal x1176=(cj5*r11);
IkReal x1177=((1.0)*cj3);
IkReal x1178=(r11*sj5);
IkReal x1179=(cj5*r01);
IkReal x1180=(cj1*cj2);
IkReal x1181=(r01*sj5);
IkReal x1182=(cj3*cj4);
IkReal x1183=(r00*sj5);
IkReal x1184=(r10*sj5);
IkReal x1185=(cj4*cj5*r00);
IkReal x1186=(cj4*cj5*r10);
IkReal x1187=((1.0)*cj4*sj3);
IkReal x1188=(cj1*x1174);
IkReal x1189=(cj1*x1173);
IkReal x1190=(sj1*x1173);
IkReal x1191=((1.0)*cj5*sj4);
IkReal x1192=(sj1*sj2*x1174);
evalcond[0]=((((-1.0)*r00*x1191))+x1174+((sj4*x1181)));
evalcond[1]=((((-1.0)*r10*x1191))+((sj4*x1178))+(((-1.0)*x1173)));
evalcond[2]=((((-1.0)*x1181*x1187))+((sj3*x1185))+((sj2*x1189))+((cj3*x1179))+((cj3*x1183))+((cj2*x1190)));
evalcond[3]=((((-1.0)*x1178*x1187))+((sj3*x1186))+((sj2*x1188))+((cj3*x1176))+((cj3*x1184))+((cj2*sj1*x1174)));
evalcond[4]=(((sj3*x1179))+((x1173*x1180))+(((-1.0)*sj2*x1190))+((sj3*x1183))+((x1181*x1182))+(((-1.0)*x1177*x1185)));
evalcond[5]=(((sj3*x1176))+((x1178*x1182))+((x1174*x1180))+((sj3*x1184))+(((-1.0)*x1192))+(((-1.0)*x1177*x1186)));
evalcond[6]=((((0.392)*sj2*x1190))+(((-1.0)*px))+(((-0.425)*x1189))+(((-0.392)*x1173*x1180))+(((-1.0)*r00*x1175))+(((0.134)*x1174))+(((-0.1)*x1179)));
evalcond[7]=((((-1.0)*py))+(((-0.425)*x1188))+(((-0.392)*x1174*x1180))+(((-0.134)*x1173))+(((-1.0)*r10*x1175))+(((0.392)*x1192))+(((-0.1)*x1176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1193=IKPowWithIntegerCheck(cj3,-1);
if(!x1193.valid){
continue;
}
CheckValue<IkReal> x1194=IKPowWithIntegerCheck(r22,-1);
if(!x1194.valid){
continue;
}
sj4array[0]=((-1.0)*(x1193.value)*(x1194.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1195=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1195);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1195);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))+(IKabs(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((-16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj3*r00*sj1*sj2))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj4*r01*sj1*sj2*sj3)))))))+(((0.5)*(IKabs(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1)))))))+(IKabs(((((-8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((-8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj2*cj4*r01*sj3))+(((-8.0)*cj1*r00*sj2*sj3)))))+(((0.5)*(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))))+(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1196=((4.0)*r01);
IkReal x1197=((16.0)*r00);
IkReal x1198=(cj3*sj2);
IkReal x1199=((8.0)*r00);
IkReal x1200=(cj2*cj3);
IkReal x1201=(cj4*r01);
IkReal x1202=((16.0)*cj1);
IkReal x1203=((8.0)*sj1);
IkReal x1204=((16.0)*sj1);
IkReal x1205=((8.0)*cj1);
IkReal x1206=(cj2*sj3);
IkReal x1207=(sj2*sj3);
IkReal x1208=(sj1*x1206);
IkReal x1209=((4.0)*cj4*r00);
IkReal x1210=(cj1*x1207);
IkReal x1211=(((sj1*x1196*x1198))+((x1196*x1210))+((sj1*x1207*x1209))+((x1196*x1208)));
IkReal x1212=(((cj1*x1206*x1209))+((cj1*x1196*x1200))+((cj1*x1198*x1209))+((sj1*x1200*x1209)));
IkReal x1213=(x1211+(((-1.0)*x1212)));
IkReal x1214=((((-1.0)*x1198*x1201*x1205))+(((-1.0)*x1199*x1208))+(((-1.0)*sj1*x1198*x1199))+((cj1*x1199*x1200))+(((-1.0)*x1201*x1205*x1206))+(((-1.0)*x1200*x1201*x1203))+((x1201*x1203*x1207))+(((-1.0)*x1199*x1210)));
IkReal x1215=(x1212+(((-1.0)*x1211)));
op[0]=x1213;
op[1]=x1214;
op[2]=x1213;
op[3]=((((-1.0)*x1198*x1201*x1202))+(((-1.0)*x1197*x1210))+(((-1.0)*sj1*x1197*x1198))+(((-1.0)*x1200*x1201*x1204))+(((-1.0)*x1201*x1202*x1206))+((cj1*x1197*x1200))+((x1201*x1204*x1207))+(((-1.0)*x1197*x1208)));
op[4]=x1215;
op[5]=x1214;
op[6]=x1215;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+((htj5*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj1*cj2*cj3*r10))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))))))+(((htj5*htj5*htj5)*(((((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))))))+(((4.0)*cj1*cj2*cj4*r10*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1216=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1216)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x1216))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1216))))+IKsqr(((((-1.0)*cj5*r10*x1216))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1216))), ((((-1.0)*cj5*r10*x1216))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1217=IKcos(j0);
IkReal x1218=IKsin(j0);
IkReal x1219=((0.1)*sj5);
IkReal x1220=(cj5*r11);
IkReal x1221=((1.0)*cj3);
IkReal x1222=(r11*sj5);
IkReal x1223=(cj5*r01);
IkReal x1224=(cj1*cj2);
IkReal x1225=(r01*sj5);
IkReal x1226=(cj3*cj4);
IkReal x1227=(r00*sj5);
IkReal x1228=(r10*sj5);
IkReal x1229=(cj4*cj5*r00);
IkReal x1230=(cj4*cj5*r10);
IkReal x1231=((1.0)*cj4*sj3);
IkReal x1232=(cj1*x1218);
IkReal x1233=(cj1*x1217);
IkReal x1234=(sj1*x1217);
IkReal x1235=((1.0)*cj5*sj4);
IkReal x1236=(sj1*sj2*x1218);
evalcond[0]=((((-1.0)*r00*x1235))+x1218+((sj4*x1225)));
evalcond[1]=(((sj4*x1222))+(((-1.0)*r10*x1235))+(((-1.0)*x1217)));
evalcond[2]=((((-1.0)*x1225*x1231))+((cj3*x1227))+((cj3*x1223))+((cj2*x1234))+((sj2*x1233))+((sj3*x1229)));
evalcond[3]=(((cj3*x1220))+((cj3*x1228))+((sj3*x1230))+((sj2*x1232))+(((-1.0)*x1222*x1231))+((cj2*sj1*x1218)));
evalcond[4]=(((x1217*x1224))+((sj3*x1227))+((sj3*x1223))+((x1225*x1226))+(((-1.0)*x1221*x1229))+(((-1.0)*sj2*x1234)));
evalcond[5]=((((-1.0)*x1236))+((sj3*x1228))+((sj3*x1220))+(((-1.0)*x1221*x1230))+((x1222*x1226))+((x1218*x1224)));
evalcond[6]=((((0.392)*sj2*x1234))+(((-1.0)*r00*x1219))+(((-0.425)*x1233))+(((-1.0)*px))+(((-0.392)*x1217*x1224))+(((-0.1)*x1223))+(((0.134)*x1218)));
evalcond[7]=((((0.392)*x1236))+(((-0.425)*x1232))+(((-1.0)*py))+(((-0.1)*x1220))+(((-1.0)*r10*x1219))+(((-0.134)*x1217))+(((-0.392)*x1218*x1224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1239 = IKatan2WithCheck(IkReal(((-0.1)*r21)),IkReal(((-0.1)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1239.valid){
continue;
}
IkReal x1237=((1.0)*(x1239.value));
if((((((0.01)*(r20*r20)))+(((0.01)*(r21*r21))))) < -0.00001)
continue;
CheckValue<IkReal> x1240=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.01)*(r20*r20)))+(((0.01)*(r21*r21)))))),-1);
if(!x1240.valid){
continue;
}
if( (((-1.0)*(x1240.value)*(((((-0.392)*cj1*sj2))+(((-0.392)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1240.value)*(((((-0.392)*cj1*sj2))+(((-0.392)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1238=((-1.0)*(IKasin(((-1.0)*(x1240.value)*(((((-0.392)*cj1*sj2))+(((-0.392)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))))))));
j5array[0]=((((-1.0)*x1237))+(((-1.0)*x1238)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1237))+(((1.0)*x1238)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1241=cj5*cj5;
IkReal x1242=r21*r21;
IkReal x1243=(sj3*x1241);
IkReal x1244=(((sj3*(r22*r22)))+(((-2.0)*cj5*r20*r21*sj3*sj5))+((sj3*x1242))+((x1243*(r20*r20)))+(((-1.0)*x1242*x1243)));
j4eval[0]=x1244;
j4eval[1]=IKsign(x1244);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1245=cj5*cj5;
IkReal x1246=r21*r21;
IkReal x1247=((1.0)*cj3);
IkReal x1248=(cj3*x1245);
IkReal x1249=((((-1.0)*x1245*x1247*(r20*r20)))+((x1246*x1248))+(((-1.0)*x1247*(r22*r22)))+(((-1.0)*x1246*x1247))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1249;
j4eval[1]=IKsign(x1249);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1250=cj2*cj2;
IkReal x1251=cj1*cj1;
IkReal x1252=(cj2*x1251);
IkReal x1253=(cj1*sj1*sj2);
IkReal x1254=(x1250*x1251);
j0eval[0]=((-6.36549089425466)+(((11.3989837172212)*cj2*x1253))+(((-12.3585920403546)*x1252))+(((-11.3989837172212)*x1254))+(((12.3585920403546)*x1253))+(((-1.0)*x1251))+(((5.69949185861059)*x1250)));
j0eval[1]=IKsign(((-42905.0)+(((83300.0)*x1253))+(((38416.0)*x1250))+(((-83300.0)*x1252))+(((76832.0)*cj2*x1253))+(((-76832.0)*x1254))+(((-6740.25)*x1251))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1255=((1.0)*cj5);
IkReal x1256=((1.0)*sj5);
IkReal x1257=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x1257;
j0eval[1]=IKsign(x1257);
j0eval[2]=((IKabs(((((-1.0)*r11*x1255))+(((-1.0)*r10*x1256)))))+(IKabs(((((-1.0)*r00*x1256))+(((-1.0)*r01*x1255))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1258=cj5*cj5;
IkReal x1259=r21*r21;
IkReal x1260=(sj1*sj2);
IkReal x1261=(r21*sj5);
IkReal x1262=(cj5*r20);
IkReal x1263=(cj1*cj2);
IkReal x1264=(x1259+((x1258*(r20*r20)))+(r22*r22)+(((-2.0)*x1261*x1262))+(((-1.0)*x1258*x1259)));
j4eval[0]=x1264;
j4eval[1]=IKsign(x1264);
j4eval[2]=((IKabs((((x1260*x1261))+((x1262*x1263))+(((-1.0)*x1260*x1262))+(((-1.0)*x1261*x1263)))))+(IKabs((((r22*x1260))+(((-1.0)*r22*x1263))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1265=(sj1*sj2);
IkReal x1266=(r00*sj5);
IkReal x1267=(cj1*cj2);
IkReal x1268=(cj5*r01);
IkReal x1269=((212.5)*cj1);
IkReal x1270=((500.0)*px);
CheckValue<IkReal> x1271=IKPowWithIntegerCheck(((((-67.0)*x1265))+(((67.0)*x1267))),-1);
if(!x1271.valid){
continue;
}
CheckValue<IkReal> x1272=IKPowWithIntegerCheck((x1267+(((-1.0)*x1265))),-1);
if(!x1272.valid){
continue;
}
if( IKabs(((x1271.value)*(((((146.0)*x1265*x1266))+(((146.0)*x1265*x1268))+(((-1.0)*x1268*x1269))+(((-146.0)*x1266*x1267))+(((-146.0)*x1267*x1268))+(((-1.0)*x1266*x1269))+((x1267*x1270))+(((-1.0)*x1265*x1270)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1272.value)*(((((-1.0)*x1266))+(((-1.0)*x1268)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1271.value)*(((((146.0)*x1265*x1266))+(((146.0)*x1265*x1268))+(((-1.0)*x1268*x1269))+(((-146.0)*x1266*x1267))+(((-146.0)*x1267*x1268))+(((-1.0)*x1266*x1269))+((x1267*x1270))+(((-1.0)*x1265*x1270))))))+IKsqr(((x1272.value)*(((((-1.0)*x1266))+(((-1.0)*x1268))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1271.value)*(((((146.0)*x1265*x1266))+(((146.0)*x1265*x1268))+(((-1.0)*x1268*x1269))+(((-146.0)*x1266*x1267))+(((-146.0)*x1267*x1268))+(((-1.0)*x1266*x1269))+((x1267*x1270))+(((-1.0)*x1265*x1270))))), ((x1272.value)*(((((-1.0)*x1266))+(((-1.0)*x1268))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1273=IKcos(j0);
IkReal x1274=IKsin(j0);
IkReal x1275=((0.1)*sj5);
IkReal x1276=(cj5*r11);
IkReal x1277=(cj5*r01);
IkReal x1278=(cj1*cj2);
IkReal x1279=((0.425)*cj1);
IkReal x1280=(sj1*sj2);
IkReal x1281=((0.392)*x1273);
IkReal x1282=(x1274*x1280);
evalcond[0]=(((r00*sj5))+x1277+(((-1.0)*x1273*x1280))+((x1273*x1278)));
evalcond[1]=((((-1.0)*x1282))+x1276+((r10*sj5))+((x1274*x1278)));
evalcond[2]=((((-1.0)*r00*x1275))+(((0.134)*x1274))+(((-1.0)*x1273*x1279))+(((-1.0)*px))+(((-1.0)*x1278*x1281))+(((-0.1)*x1277))+((x1280*x1281)));
evalcond[3]=((((-0.134)*x1273))+(((-1.0)*py))+(((-0.392)*x1274*x1278))+(((-1.0)*x1274*x1279))+(((-0.1)*x1276))+(((-1.0)*r10*x1275))+(((0.392)*x1282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1283=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1283;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1283);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1284=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1284;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1284);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1285=((1.0)*cj5);
IkReal x1286=((((-1.0)*r21*x1285))+(((-1.0)*r20*sj5)));
j4eval[0]=x1286;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs(((((-1.0)*r10*sj0*x1285))+((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1285))+((cj0*r01*sj5))))));
j4eval[2]=IKsign(x1286);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1287=((1.0)*cj5);
CheckValue<IkReal> x1288=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1287))+(((-1.0)*r20*sj5)))),-1);
if(!x1288.valid){
continue;
}
CheckValue<IkReal> x1289 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x1287))+((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1287))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1289.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1288.value)))+(x1289.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1290=IKsin(j4);
IkReal x1291=IKcos(j4);
IkReal x1292=(cj5*r10);
IkReal x1293=(cj2*sj1);
IkReal x1294=(r01*sj5);
IkReal x1295=(cj5*r00);
IkReal x1296=(cj5*r20);
IkReal x1297=(cj1*sj2);
IkReal x1298=((1.0)*x1291);
IkReal x1299=((1.0)*x1290);
IkReal x1300=(sj5*x1290);
evalcond[0]=(((r21*x1300))+(((-1.0)*r22*x1298))+(((-1.0)*x1296*x1299)));
evalcond[1]=(sj0+((x1290*x1294))+(((-1.0)*x1295*x1299))+(((-1.0)*r02*x1298)));
evalcond[2]=((((-1.0)*r12*x1298))+((r11*x1300))+(((-1.0)*x1292*x1299))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x1291*x1296))+(((-1.0)*r21*sj5*x1298))+(((-1.0)*r22*x1299)));
evalcond[4]=(((x1291*x1295))+(((-1.0)*r02*x1299))+((cj0*x1293))+((cj0*x1297))+(((-1.0)*x1294*x1298)));
evalcond[5]=(((sj0*x1293))+((sj0*x1297))+((x1291*x1292))+(((-1.0)*r12*x1299))+(((-1.0)*r11*sj5*x1298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1301=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1301.valid){
continue;
}
CheckValue<IkReal> x1302 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1302.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1301.value)))+(x1302.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1303=IKsin(j4);
IkReal x1304=IKcos(j4);
IkReal x1305=(cj5*r10);
IkReal x1306=(cj2*sj1);
IkReal x1307=(r01*sj5);
IkReal x1308=(cj5*r00);
IkReal x1309=(cj5*r20);
IkReal x1310=(cj1*sj2);
IkReal x1311=((1.0)*x1304);
IkReal x1312=((1.0)*x1303);
IkReal x1313=(sj5*x1303);
evalcond[0]=((((-1.0)*r22*x1311))+((r21*x1313))+(((-1.0)*x1309*x1312)));
evalcond[1]=(sj0+(((-1.0)*x1308*x1312))+((x1303*x1307))+(((-1.0)*r02*x1311)));
evalcond[2]=(((r11*x1313))+(((-1.0)*r12*x1311))+(((-1.0)*x1305*x1312))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x1312))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x1304*x1309))+(((-1.0)*r21*sj5*x1311)));
evalcond[4]=((((-1.0)*x1307*x1311))+(((-1.0)*r02*x1312))+((x1304*x1308))+((cj0*x1306))+((cj0*x1310)));
evalcond[5]=((((-1.0)*r12*x1312))+(((-1.0)*r11*sj5*x1311))+((x1304*x1305))+((sj0*x1306))+((sj0*x1310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1314=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1314.valid){
continue;
}
CheckValue<IkReal> x1315 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1315.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1314.value)))+(x1315.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1316=IKsin(j4);
IkReal x1317=IKcos(j4);
IkReal x1318=(cj5*r10);
IkReal x1319=(cj2*sj1);
IkReal x1320=(r01*sj5);
IkReal x1321=(cj5*r00);
IkReal x1322=(cj5*r20);
IkReal x1323=(cj1*sj2);
IkReal x1324=((1.0)*x1317);
IkReal x1325=((1.0)*x1316);
IkReal x1326=(sj5*x1316);
evalcond[0]=((((-1.0)*r22*x1324))+(((-1.0)*x1322*x1325))+((r21*x1326)));
evalcond[1]=(((x1316*x1320))+sj0+(((-1.0)*r02*x1324))+(((-1.0)*x1321*x1325)));
evalcond[2]=(((r11*x1326))+(((-1.0)*r12*x1324))+(((-1.0)*cj0))+(((-1.0)*x1318*x1325)));
evalcond[3]=((((-1.0)*r22*x1325))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x1324))+((x1317*x1322)));
evalcond[4]=((((-1.0)*r02*x1325))+((cj0*x1323))+(((-1.0)*x1320*x1324))+((x1317*x1321))+((cj0*x1319)));
evalcond[5]=(((x1317*x1318))+(((-1.0)*r12*x1325))+(((-1.0)*r11*sj5*x1324))+((sj0*x1323))+((sj0*x1319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1327=cj5*cj5;
IkReal x1328=r21*r21;
IkReal x1329=(sj1*sj2);
IkReal x1330=(r21*sj5);
IkReal x1331=(cj1*cj2);
IkReal x1332=(cj5*r20);
CheckValue<IkReal> x1333=IKPowWithIntegerCheck(IKsign((x1328+(r22*r22)+(((-2.0)*x1330*x1332))+((x1327*(r20*r20)))+(((-1.0)*x1327*x1328)))),-1);
if(!x1333.valid){
continue;
}
CheckValue<IkReal> x1334 = IKatan2WithCheck(IkReal((((r22*x1329))+(((-1.0)*r22*x1331)))),IkReal((((x1329*x1330))+((x1331*x1332))+(((-1.0)*x1330*x1331))+(((-1.0)*x1329*x1332)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1334.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1333.value)))+(x1334.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1335=IKsin(j4);
IkReal x1336=IKcos(j4);
IkReal x1337=(r21*sj5);
IkReal x1338=(cj5*r20);
IkReal x1339=((1.0)*x1336);
IkReal x1340=((1.0)*x1335);
evalcond[0]=((((-1.0)*x1338*x1340))+(((-1.0)*r22*x1339))+((x1335*x1337)));
evalcond[1]=(((x1336*x1338))+(((-1.0)*x1337*x1339))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x1340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1341=(cj5*sj4);
IkReal x1342=(sj4*sj5);
if( IKabs((((r00*x1341))+(((-1.0)*r01*x1342))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1341))+((r11*x1342))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1341))+(((-1.0)*r01*x1342))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x1341))+((r11*x1342))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x1341))+(((-1.0)*r01*x1342))+((cj4*r02))), ((((-1.0)*r10*x1341))+((r11*x1342))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1343=IKcos(j0);
IkReal x1344=IKsin(j0);
IkReal x1345=(cj4*cj5);
IkReal x1346=((0.1)*sj5);
IkReal x1347=(cj5*r11);
IkReal x1348=(cj5*r01);
IkReal x1349=(r11*sj5);
IkReal x1350=(cj1*cj2);
IkReal x1351=((1.0)*sj4);
IkReal x1352=((1.0)*cj4);
IkReal x1353=(r01*sj5);
IkReal x1354=(cj1*x1344);
IkReal x1355=(cj1*x1343);
IkReal x1356=(sj1*x1343);
IkReal x1357=(sj1*sj2*x1344);
evalcond[0]=(x1344+((sj4*x1353))+(((-1.0)*r02*x1352))+(((-1.0)*cj5*r00*x1351)));
evalcond[1]=((((-1.0)*r12*x1352))+((sj4*x1349))+(((-1.0)*cj5*r10*x1351))+(((-1.0)*x1343)));
evalcond[2]=(x1348+((r00*sj5))+(((-1.0)*sj2*x1356))+((x1343*x1350)));
evalcond[3]=(x1347+(((-1.0)*x1357))+((r10*sj5))+((x1344*x1350)));
evalcond[4]=((((-1.0)*x1352*x1353))+(((-1.0)*r02*x1351))+((r00*x1345))+((sj2*x1355))+((cj2*x1356)));
evalcond[5]=((((-1.0)*r12*x1351))+((cj2*sj1*x1344))+(((-1.0)*x1349*x1352))+((sj2*x1354))+((r10*x1345)));
evalcond[6]=((((0.134)*x1344))+(((-0.425)*x1355))+(((-1.0)*r00*x1346))+(((-1.0)*px))+(((-0.392)*x1343*x1350))+(((-0.1)*x1348))+(((0.392)*sj2*x1356)));
evalcond[7]=((((-0.392)*x1344*x1350))+(((-0.425)*x1354))+(((-1.0)*py))+(((-0.1)*x1347))+(((-0.134)*x1343))+(((-1.0)*r10*x1346))+(((0.392)*x1357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1358=((1.0)*cj5);
IkReal x1359=((1.0)*sj5);
CheckValue<IkReal> x1360 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1359))+(((-1.0)*r11*x1358)))),IkReal(((((-1.0)*r00*x1359))+(((-1.0)*r01*x1358)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1360.valid){
continue;
}
CheckValue<IkReal> x1361=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x1361.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1360.value)+(((1.5707963267949)*(x1361.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1362=IKcos(j0);
IkReal x1363=IKsin(j0);
IkReal x1364=((0.1)*sj5);
IkReal x1365=(cj5*r11);
IkReal x1366=(cj5*r01);
IkReal x1367=(cj1*cj2);
IkReal x1368=((0.425)*cj1);
IkReal x1369=(sj1*sj2);
IkReal x1370=((0.392)*x1362);
IkReal x1371=(x1363*x1369);
evalcond[0]=(x1366+((r00*sj5))+(((-1.0)*x1362*x1369))+((x1362*x1367)));
evalcond[1]=(x1365+((r10*sj5))+((x1363*x1367))+(((-1.0)*x1371)));
evalcond[2]=((((0.134)*x1363))+(((-1.0)*px))+(((-1.0)*x1362*x1368))+(((-1.0)*r00*x1364))+((x1369*x1370))+(((-1.0)*x1367*x1370))+(((-0.1)*x1366)));
evalcond[3]=((((0.392)*x1371))+(((-1.0)*py))+(((-0.392)*x1363*x1367))+(((-0.134)*x1362))+(((-1.0)*x1363*x1368))+(((-1.0)*r10*x1364))+(((-0.1)*x1365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1372=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1372;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1372);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1373=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1373;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1373);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1374=((1.0)*cj5);
IkReal x1375=((((-1.0)*r21*x1374))+(((-1.0)*r20*sj5)));
j4eval[0]=x1375;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1374))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1374)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x1375);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1376=((1.0)*cj5);
CheckValue<IkReal> x1377 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1376))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1376)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1377.valid){
continue;
}
CheckValue<IkReal> x1378=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1376))+(((-1.0)*r20*sj5)))),-1);
if(!x1378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1377.value)+(((1.5707963267949)*(x1378.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1379=IKsin(j4);
IkReal x1380=IKcos(j4);
IkReal x1381=(cj5*r10);
IkReal x1382=(cj2*sj1);
IkReal x1383=(r01*sj5);
IkReal x1384=(cj5*r00);
IkReal x1385=(cj5*r20);
IkReal x1386=(cj1*sj2);
IkReal x1387=((1.0)*x1380);
IkReal x1388=((1.0)*x1379);
IkReal x1389=(sj5*x1379);
evalcond[0]=(((r21*x1389))+(((-1.0)*r22*x1387))+(((-1.0)*x1385*x1388)));
evalcond[1]=(sj0+(((-1.0)*x1384*x1388))+(((-1.0)*r02*x1387))+((x1379*x1383)));
evalcond[2]=((((-1.0)*r12*x1387))+(((-1.0)*x1381*x1388))+((r11*x1389))+(((-1.0)*cj0)));
evalcond[3]=(((x1380*x1385))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x1387))+(((-1.0)*r22*x1388)));
evalcond[4]=(((x1380*x1384))+(((-1.0)*x1383*x1387))+(((-1.0)*r02*x1388))+((cj0*x1386))+((cj0*x1382)));
evalcond[5]=((((-1.0)*r12*x1388))+((x1380*x1381))+(((-1.0)*r11*sj5*x1387))+((sj0*x1386))+((sj0*x1382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1390=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1390.valid){
continue;
}
CheckValue<IkReal> x1391 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1391.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1390.value)))+(x1391.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1392=IKsin(j4);
IkReal x1393=IKcos(j4);
IkReal x1394=(cj5*r10);
IkReal x1395=(cj2*sj1);
IkReal x1396=(r01*sj5);
IkReal x1397=(cj5*r00);
IkReal x1398=(cj5*r20);
IkReal x1399=(cj1*sj2);
IkReal x1400=((1.0)*x1393);
IkReal x1401=((1.0)*x1392);
IkReal x1402=(sj5*x1392);
evalcond[0]=((((-1.0)*x1398*x1401))+(((-1.0)*r22*x1400))+((r21*x1402)));
evalcond[1]=(sj0+(((-1.0)*r02*x1400))+((x1392*x1396))+(((-1.0)*x1397*x1401)));
evalcond[2]=((((-1.0)*r12*x1400))+((r11*x1402))+(((-1.0)*cj0))+(((-1.0)*x1394*x1401)));
evalcond[3]=(((x1393*x1398))+(((-1.0)*r22*x1401))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x1400)));
evalcond[4]=(((x1393*x1397))+(((-1.0)*r02*x1401))+((cj0*x1399))+((cj0*x1395))+(((-1.0)*x1396*x1400)));
evalcond[5]=((((-1.0)*r12*x1401))+((x1393*x1394))+(((-1.0)*r11*sj5*x1400))+((sj0*x1399))+((sj0*x1395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1403=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1403.valid){
continue;
}
CheckValue<IkReal> x1404 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1404.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1403.value)))+(x1404.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1405=IKsin(j4);
IkReal x1406=IKcos(j4);
IkReal x1407=(cj5*r10);
IkReal x1408=(cj2*sj1);
IkReal x1409=(r01*sj5);
IkReal x1410=(cj5*r00);
IkReal x1411=(cj5*r20);
IkReal x1412=(cj1*sj2);
IkReal x1413=((1.0)*x1406);
IkReal x1414=((1.0)*x1405);
IkReal x1415=(sj5*x1405);
evalcond[0]=(((r21*x1415))+(((-1.0)*r22*x1413))+(((-1.0)*x1411*x1414)));
evalcond[1]=(sj0+(((-1.0)*r02*x1413))+((x1405*x1409))+(((-1.0)*x1410*x1414)));
evalcond[2]=((((-1.0)*x1407*x1414))+((r11*x1415))+(((-1.0)*r12*x1413))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*r22*x1414))+(((-1.0)*r21*sj5*x1413))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x1406*x1411)));
evalcond[4]=((((-1.0)*r02*x1414))+((cj0*x1412))+((cj0*x1408))+((x1406*x1410))+(((-1.0)*x1409*x1413)));
evalcond[5]=((((-1.0)*r11*sj5*x1413))+((sj0*x1408))+((x1406*x1407))+(((-1.0)*r12*x1414))+((sj0*x1412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1416=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x1416;
j0eval[1]=IKsign(x1416);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1417=r21*r21;
IkReal x1418=cj5*cj5;
IkReal x1419=(sj1*sj2);
IkReal x1420=(r21*sj5);
IkReal x1421=(cj5*r20);
IkReal x1422=(cj1*cj2);
IkReal x1423=((((-1.0)*x1418*(r20*r20)))+((x1417*x1418))+(((-1.0)*(r22*r22)))+(((2.0)*x1420*x1421))+(((-1.0)*x1417)));
j4eval[0]=x1423;
j4eval[1]=((IKabs((((r22*x1419))+(((-1.0)*r22*x1422)))))+(IKabs(((((-1.0)*x1419*x1421))+(((-1.0)*x1420*x1422))+((x1419*x1420))+((x1421*x1422))))));
j4eval[2]=IKsign(x1423);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1424=(sj1*sj2);
IkReal x1425=(cj1*cj2);
IkReal x1426=(r00*sj5);
IkReal x1427=(cj5*r01);
IkReal x1428=((212.5)*cj1);
IkReal x1429=((500.0)*px);
CheckValue<IkReal> x1430=IKPowWithIntegerCheck(((((67.0)*x1425))+(((-67.0)*x1424))),-1);
if(!x1430.valid){
continue;
}
CheckValue<IkReal> x1431=IKPowWithIntegerCheck(((((-1.0)*x1424))+x1425),-1);
if(!x1431.valid){
continue;
}
if( IKabs(((x1430.value)*((((x1425*x1429))+((x1426*x1428))+(((-1.0)*x1424*x1429))+(((-246.0)*x1424*x1426))+(((-246.0)*x1424*x1427))+(((246.0)*x1425*x1427))+(((246.0)*x1425*x1426))+((x1427*x1428)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1431.value)*((x1427+x1426)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1430.value)*((((x1425*x1429))+((x1426*x1428))+(((-1.0)*x1424*x1429))+(((-246.0)*x1424*x1426))+(((-246.0)*x1424*x1427))+(((246.0)*x1425*x1427))+(((246.0)*x1425*x1426))+((x1427*x1428))))))+IKsqr(((x1431.value)*((x1427+x1426))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1430.value)*((((x1425*x1429))+((x1426*x1428))+(((-1.0)*x1424*x1429))+(((-246.0)*x1424*x1426))+(((-246.0)*x1424*x1427))+(((246.0)*x1425*x1427))+(((246.0)*x1425*x1426))+((x1427*x1428))))), ((x1431.value)*((x1427+x1426))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1432=IKcos(j0);
IkReal x1433=IKsin(j0);
IkReal x1434=((0.1)*sj5);
IkReal x1435=(cj5*r11);
IkReal x1436=(cj1*cj2);
IkReal x1437=((1.0)*sj5);
IkReal x1438=(sj1*sj2);
IkReal x1439=(cj5*r01);
IkReal x1440=((0.425)*cj1);
IkReal x1441=((0.392)*x1432);
IkReal x1442=(x1433*x1438);
evalcond[0]=(((x1432*x1436))+(((-1.0)*x1439))+(((-1.0)*r00*x1437))+(((-1.0)*x1432*x1438)));
evalcond[1]=((((-1.0)*x1435))+((x1433*x1436))+(((-1.0)*x1442))+(((-1.0)*r10*x1437)));
evalcond[2]=(((x1438*x1441))+(((-0.1)*x1439))+(((-1.0)*x1432*x1440))+(((-1.0)*px))+(((-1.0)*r00*x1434))+(((-1.0)*x1436*x1441))+(((0.134)*x1433)));
evalcond[3]=((((0.392)*x1442))+(((-0.392)*x1433*x1436))+(((-1.0)*x1433*x1440))+(((-0.134)*x1432))+(((-0.1)*x1435))+(((-1.0)*py))+(((-1.0)*r10*x1434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1443=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1443;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1443);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1444=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1444;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1444);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1445=((1.0)*cj5);
IkReal x1446=((((-1.0)*r21*x1445))+(((-1.0)*r20*sj5)));
j4eval[0]=x1446;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1445))+(((-1.0)*cj0*r00*x1445))))));
j4eval[2]=IKsign(x1446);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1447=((1.0)*cj5);
CheckValue<IkReal> x1448 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1447))+(((-1.0)*cj0*r00*x1447)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1448.valid){
continue;
}
CheckValue<IkReal> x1449=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1447))+(((-1.0)*r20*sj5)))),-1);
if(!x1449.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1448.value)+(((1.5707963267949)*(x1449.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1450=IKsin(j4);
IkReal x1451=IKcos(j4);
IkReal x1452=(cj5*r00);
IkReal x1453=(cj5*r10);
IkReal x1454=(cj2*sj1);
IkReal x1455=(r21*sj5);
IkReal x1456=(cj5*r20);
IkReal x1457=(cj1*sj2);
IkReal x1458=((1.0)*x1451);
IkReal x1459=((1.0)*x1450);
IkReal x1460=(sj5*x1450);
IkReal x1461=(sj5*x1451);
evalcond[0]=((((-1.0)*r22*x1458))+((x1450*x1455))+(((-1.0)*x1456*x1459)));
evalcond[1]=(sj0+((r01*x1460))+(((-1.0)*r02*x1458))+(((-1.0)*x1452*x1459)));
evalcond[2]=((((-1.0)*x1453*x1459))+((r11*x1460))+(((-1.0)*cj0))+(((-1.0)*r12*x1458)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x1450))+(((-1.0)*x1456*x1458))+((x1451*x1455)));
evalcond[4]=(((r01*x1461))+((cj0*x1454))+((cj0*x1457))+(((-1.0)*x1452*x1458))+((r02*x1450)));
evalcond[5]=(((r12*x1450))+(((-1.0)*x1453*x1458))+((sj0*x1454))+((sj0*x1457))+((r11*x1461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1462=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1462.valid){
continue;
}
CheckValue<IkReal> x1463 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1463.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1462.value)))+(x1463.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1464=IKsin(j4);
IkReal x1465=IKcos(j4);
IkReal x1466=(cj5*r00);
IkReal x1467=(cj5*r10);
IkReal x1468=(cj2*sj1);
IkReal x1469=(r21*sj5);
IkReal x1470=(cj5*r20);
IkReal x1471=(cj1*sj2);
IkReal x1472=((1.0)*x1465);
IkReal x1473=((1.0)*x1464);
IkReal x1474=(sj5*x1464);
IkReal x1475=(sj5*x1465);
evalcond[0]=((((-1.0)*r22*x1472))+(((-1.0)*x1470*x1473))+((x1464*x1469)));
evalcond[1]=(sj0+(((-1.0)*r02*x1472))+((r01*x1474))+(((-1.0)*x1466*x1473)));
evalcond[2]=(((r11*x1474))+(((-1.0)*r12*x1472))+(((-1.0)*x1467*x1473))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x1470*x1472))+((x1465*x1469))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x1464)));
evalcond[4]=(((cj0*x1468))+((cj0*x1471))+((r01*x1475))+((r02*x1464))+(((-1.0)*x1466*x1472)));
evalcond[5]=(((sj0*x1471))+((r11*x1475))+((r12*x1464))+(((-1.0)*x1467*x1472))+((sj0*x1468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1476=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1476.valid){
continue;
}
CheckValue<IkReal> x1477 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1476.value)))+(x1477.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1478=IKsin(j4);
IkReal x1479=IKcos(j4);
IkReal x1480=(cj5*r00);
IkReal x1481=(cj5*r10);
IkReal x1482=(cj2*sj1);
IkReal x1483=(r21*sj5);
IkReal x1484=(cj5*r20);
IkReal x1485=(cj1*sj2);
IkReal x1486=((1.0)*x1479);
IkReal x1487=((1.0)*x1478);
IkReal x1488=(sj5*x1478);
IkReal x1489=(sj5*x1479);
evalcond[0]=((((-1.0)*x1484*x1487))+(((-1.0)*r22*x1486))+((x1478*x1483)));
evalcond[1]=(sj0+((r01*x1488))+(((-1.0)*x1480*x1487))+(((-1.0)*r02*x1486)));
evalcond[2]=((((-1.0)*r12*x1486))+(((-1.0)*x1481*x1487))+((r11*x1488))+(((-1.0)*cj0)));
evalcond[3]=(((r22*x1478))+(((-1.0)*x1484*x1486))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x1479*x1483)));
evalcond[4]=(((r01*x1489))+(((-1.0)*x1480*x1486))+((r02*x1478))+((cj0*x1485))+((cj0*x1482)));
evalcond[5]=(((r12*x1478))+((sj0*x1482))+((sj0*x1485))+(((-1.0)*x1481*x1486))+((r11*x1489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1490=r21*r21;
IkReal x1491=cj5*cj5;
IkReal x1492=(sj1*sj2);
IkReal x1493=(r21*sj5);
IkReal x1494=(cj1*cj2);
IkReal x1495=(cj5*r20);
CheckValue<IkReal> x1496=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1490))+(((2.0)*x1493*x1495))+(((-1.0)*(r22*r22)))+(((-1.0)*x1491*(r20*r20)))+((x1490*x1491)))),-1);
if(!x1496.valid){
continue;
}
CheckValue<IkReal> x1497 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1494))+((r22*x1492)))),IkReal(((((-1.0)*x1492*x1495))+(((-1.0)*x1493*x1494))+((x1494*x1495))+((x1492*x1493)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1497.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1496.value)))+(x1497.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1498=IKsin(j4);
IkReal x1499=IKcos(j4);
IkReal x1500=(r21*sj5);
IkReal x1501=(cj5*r20);
IkReal x1502=((1.0)*x1499);
evalcond[0]=((((-1.0)*x1498*x1501))+(((-1.0)*r22*x1502))+((x1498*x1500)));
evalcond[1]=(((x1499*x1500))+(((-1.0)*x1501*x1502))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x1498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1503=(cj5*sj4);
IkReal x1504=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x1504))+((r00*x1503))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1504))+(((-1.0)*r10*x1503))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1504))+((r00*x1503))+((cj4*r02))))+IKsqr((((r11*x1504))+(((-1.0)*r10*x1503))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x1504))+((r00*x1503))+((cj4*r02))), (((r11*x1504))+(((-1.0)*r10*x1503))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1505=IKcos(j0);
IkReal x1506=IKsin(j0);
IkReal x1507=((0.1)*sj5);
IkReal x1508=(cj5*r11);
IkReal x1509=(r11*sj5);
IkReal x1510=(cj1*cj2);
IkReal x1511=((1.0)*r00);
IkReal x1512=(cj4*cj5);
IkReal x1513=((1.0)*r10);
IkReal x1514=(cj5*r01);
IkReal x1515=(cj5*sj4);
IkReal x1516=((1.0)*cj4);
IkReal x1517=(r01*sj5);
IkReal x1518=(cj1*x1506);
IkReal x1519=(sj1*x1505);
IkReal x1520=(cj1*x1505);
IkReal x1521=(sj1*sj2*x1506);
evalcond[0]=(x1506+(((-1.0)*r02*x1516))+((sj4*x1517))+(((-1.0)*x1511*x1515)));
evalcond[1]=((((-1.0)*x1505))+(((-1.0)*x1513*x1515))+((sj4*x1509))+(((-1.0)*r12*x1516)));
evalcond[2]=((((-1.0)*sj5*x1511))+(((-1.0)*x1514))+(((-1.0)*sj2*x1519))+((x1505*x1510)));
evalcond[3]=((((-1.0)*sj5*x1513))+(((-1.0)*x1508))+((x1506*x1510))+(((-1.0)*x1521)));
evalcond[4]=(((cj2*x1519))+((sj2*x1520))+((r02*sj4))+((cj4*x1517))+(((-1.0)*x1511*x1512)));
evalcond[5]=(((sj2*x1518))+((cj2*sj1*x1506))+((cj4*x1509))+((r12*sj4))+(((-1.0)*x1512*x1513)));
evalcond[6]=((((0.134)*x1506))+(((-1.0)*r00*x1507))+(((-1.0)*px))+(((0.392)*sj2*x1519))+(((-0.1)*x1514))+(((-0.392)*x1505*x1510))+(((-0.425)*x1520)));
evalcond[7]=((((-1.0)*py))+(((-0.134)*x1505))+(((-0.392)*x1506*x1510))+(((-0.1)*x1508))+(((0.392)*x1521))+(((-0.425)*x1518))+(((-1.0)*r10*x1507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1522=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x1522.valid){
continue;
}
CheckValue<IkReal> x1523 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1523.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1522.value)))+(x1523.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1524=IKcos(j0);
IkReal x1525=IKsin(j0);
IkReal x1526=((0.1)*sj5);
IkReal x1527=(cj5*r11);
IkReal x1528=(cj1*cj2);
IkReal x1529=((1.0)*sj5);
IkReal x1530=(sj1*sj2);
IkReal x1531=(cj5*r01);
IkReal x1532=((0.425)*cj1);
IkReal x1533=((0.392)*x1524);
IkReal x1534=(x1525*x1530);
evalcond[0]=(((x1524*x1528))+(((-1.0)*x1531))+(((-1.0)*r00*x1529))+(((-1.0)*x1524*x1530)));
evalcond[1]=((((-1.0)*x1534))+((x1525*x1528))+(((-1.0)*r10*x1529))+(((-1.0)*x1527)));
evalcond[2]=((((-1.0)*x1524*x1532))+(((-1.0)*r00*x1526))+(((0.134)*x1525))+((x1530*x1533))+(((-1.0)*px))+(((-0.1)*x1531))+(((-1.0)*x1528*x1533)));
evalcond[3]=((((-1.0)*x1525*x1532))+(((-0.392)*x1525*x1528))+(((-1.0)*py))+(((-0.1)*x1527))+(((-0.134)*x1524))+(((0.392)*x1534))+(((-1.0)*r10*x1526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1535=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1535;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1535);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1536=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1536;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1536);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1537=((1.0)*cj5);
IkReal x1538=((((-1.0)*r21*x1537))+(((-1.0)*r20*sj5)));
j4eval[0]=x1538;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1537))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1537))))));
j4eval[2]=IKsign(x1538);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1539=((1.0)*cj5);
CheckValue<IkReal> x1540=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1539))+(((-1.0)*r20*sj5)))),-1);
if(!x1540.valid){
continue;
}
CheckValue<IkReal> x1541 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1539))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1539)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1541.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1540.value)))+(x1541.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1542=IKsin(j4);
IkReal x1543=IKcos(j4);
IkReal x1544=(cj5*r00);
IkReal x1545=(cj5*r10);
IkReal x1546=(cj2*sj1);
IkReal x1547=(r21*sj5);
IkReal x1548=(cj5*r20);
IkReal x1549=(cj1*sj2);
IkReal x1550=((1.0)*x1543);
IkReal x1551=((1.0)*x1542);
IkReal x1552=(sj5*x1542);
IkReal x1553=(sj5*x1543);
evalcond[0]=((((-1.0)*r22*x1550))+(((-1.0)*x1548*x1551))+((x1542*x1547)));
evalcond[1]=(((r01*x1552))+sj0+(((-1.0)*r02*x1550))+(((-1.0)*x1544*x1551)));
evalcond[2]=(((r11*x1552))+(((-1.0)*x1545*x1551))+(((-1.0)*r12*x1550))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x1548*x1550))+((x1543*x1547))+((r22*x1542)));
evalcond[4]=(((r01*x1553))+((cj0*x1546))+((cj0*x1549))+(((-1.0)*x1544*x1550))+((r02*x1542)));
evalcond[5]=(((r11*x1553))+((r12*x1542))+((sj0*x1546))+((sj0*x1549))+(((-1.0)*x1545*x1550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1554=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1554.valid){
continue;
}
CheckValue<IkReal> x1555 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1555.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1554.value)))+(x1555.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1556=IKsin(j4);
IkReal x1557=IKcos(j4);
IkReal x1558=(cj5*r00);
IkReal x1559=(cj5*r10);
IkReal x1560=(cj2*sj1);
IkReal x1561=(r21*sj5);
IkReal x1562=(cj5*r20);
IkReal x1563=(cj1*sj2);
IkReal x1564=((1.0)*x1557);
IkReal x1565=((1.0)*x1556);
IkReal x1566=(sj5*x1556);
IkReal x1567=(sj5*x1557);
evalcond[0]=(((x1556*x1561))+(((-1.0)*x1562*x1565))+(((-1.0)*r22*x1564)));
evalcond[1]=(sj0+(((-1.0)*r02*x1564))+(((-1.0)*x1558*x1565))+((r01*x1566)));
evalcond[2]=((((-1.0)*x1559*x1565))+((r11*x1566))+(((-1.0)*r12*x1564))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x1562*x1564))+((r22*x1556))+((x1557*x1561)));
evalcond[4]=(((r02*x1556))+((cj0*x1563))+((cj0*x1560))+(((-1.0)*x1558*x1564))+((r01*x1567)));
evalcond[5]=((((-1.0)*x1559*x1564))+((r11*x1567))+((sj0*x1563))+((sj0*x1560))+((r12*x1556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1568=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1568.valid){
continue;
}
CheckValue<IkReal> x1569 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1569.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1568.value)))+(x1569.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1570=IKsin(j4);
IkReal x1571=IKcos(j4);
IkReal x1572=(cj5*r00);
IkReal x1573=(cj5*r10);
IkReal x1574=(cj2*sj1);
IkReal x1575=(r21*sj5);
IkReal x1576=(cj5*r20);
IkReal x1577=(cj1*sj2);
IkReal x1578=((1.0)*x1571);
IkReal x1579=((1.0)*x1570);
IkReal x1580=(sj5*x1570);
IkReal x1581=(sj5*x1571);
evalcond[0]=((((-1.0)*x1576*x1579))+((x1570*x1575))+(((-1.0)*r22*x1578)));
evalcond[1]=((((-1.0)*r02*x1578))+((r01*x1580))+sj0+(((-1.0)*x1572*x1579)));
evalcond[2]=((((-1.0)*x1573*x1579))+((r11*x1580))+(((-1.0)*r12*x1578))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x1576*x1578))+((x1571*x1575))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x1570)));
evalcond[4]=(((r01*x1581))+(((-1.0)*x1572*x1578))+((cj0*x1577))+((cj0*x1574))+((r02*x1570)));
evalcond[5]=((((-1.0)*x1573*x1578))+((r12*x1570))+((r11*x1581))+((sj0*x1574))+((sj0*x1577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1582=((1.0)*cj5);
IkReal x1583=((1.0)*sj5);
IkReal x1584=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x1584;
j0eval[1]=((IKabs(((((-1.0)*r11*x1582))+(((-1.0)*r10*x1583)))))+(IKabs(((((-1.0)*r00*x1583))+(((-1.0)*r01*x1582))))));
j0eval[2]=IKsign(x1584);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1585=r21*r21;
IkReal x1586=cj5*cj5;
IkReal x1587=(cj2*sj1);
IkReal x1588=(cj1*sj2);
IkReal x1589=(r21*sj5);
IkReal x1590=((1.0)*cj5*r20);
IkReal x1591=((((2.0)*cj5*r20*x1589))+(((-1.0)*(r22*r22)))+(((-1.0)*x1585))+((x1585*x1586))+(((-1.0)*x1586*(r20*r20))));
j4eval[0]=x1591;
j4eval[1]=((IKabs((((r22*x1587))+((r22*x1588)))))+(IKabs((((x1587*x1589))+((x1588*x1589))+(((-1.0)*x1588*x1590))+(((-1.0)*x1587*x1590))))));
j4eval[2]=IKsign(x1591);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1592=cj1*cj1;
IkReal x1593=(cj2*sj2);
IkReal x1594=(cj1*sj1);
j0eval[0]=((((-2.0)*x1594*(cj2*cj2)))+x1594+x1593+(((-2.0)*x1592*x1593))+(((-1.08418367346939)*sj2*x1592))+(((-1.08418367346939)*cj2*x1594)));
j0eval[1]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1595=cj1*cj1;
IkReal x1596=(cj1*sj2);
IkReal x1597=((500.0)*py);
IkReal x1598=(cj2*sj2);
IkReal x1599=(cj5*r01);
IkReal x1600=(cj1*sj1);
IkReal x1601=(r00*sj5);
IkReal x1602=(cj2*sj1);
IkReal x1603=((50.0)*r10*sj5);
IkReal x1604=((50.0)*cj5*r11);
CheckValue<IkReal> x1605=IKPowWithIntegerCheck(((((-392.0)*x1600*(cj2*cj2)))+(((196.0)*x1598))+(((196.0)*x1600))+(((-392.0)*x1595*x1598))+(((-212.5)*cj2*x1600))+(((-212.5)*sj2*x1595))),-1);
if(!x1605.valid){
continue;
}
CheckValue<IkReal> x1606=IKPowWithIntegerCheck((x1602+x1596),-1);
if(!x1606.valid){
continue;
}
if( IKabs(((x1605.value)*((((x1596*x1597))+(((-67.0)*x1599))+(((-67.0)*x1601))+((x1602*x1603))+((x1602*x1604))+((x1596*x1604))+((x1596*x1603))+((x1597*x1602)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1606.value)*(((((-1.0)*x1601))+(((-1.0)*x1599)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1605.value)*((((x1596*x1597))+(((-67.0)*x1599))+(((-67.0)*x1601))+((x1602*x1603))+((x1602*x1604))+((x1596*x1604))+((x1596*x1603))+((x1597*x1602))))))+IKsqr(((x1606.value)*(((((-1.0)*x1601))+(((-1.0)*x1599))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1605.value)*((((x1596*x1597))+(((-67.0)*x1599))+(((-67.0)*x1601))+((x1602*x1603))+((x1602*x1604))+((x1596*x1604))+((x1596*x1603))+((x1597*x1602))))), ((x1606.value)*(((((-1.0)*x1601))+(((-1.0)*x1599))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1607=IKcos(j0);
IkReal x1608=IKsin(j0);
IkReal x1609=((0.1)*sj5);
IkReal x1610=(sj1*sj2);
IkReal x1611=(cj5*r11);
IkReal x1612=(cj5*r01);
IkReal x1613=(cj2*sj1);
IkReal x1614=((0.392)*x1608);
IkReal x1615=(cj1*x1607);
IkReal x1616=(cj1*x1608);
evalcond[0]=(((r00*sj5))+((sj2*x1615))+x1612+((x1607*x1613)));
evalcond[1]=(((sj2*x1616))+((r10*sj5))+x1611+((x1608*x1613)));
evalcond[2]=((((0.392)*x1607*x1610))+(((-0.392)*cj2*x1615))+(((-0.1)*x1612))+(((0.134)*x1608))+(((-1.0)*r00*x1609))+(((-1.0)*px))+(((-0.425)*x1615)));
evalcond[3]=((((-0.134)*x1607))+(((-1.0)*cj1*cj2*x1614))+(((-0.1)*x1611))+(((-1.0)*py))+(((-0.425)*x1616))+(((-1.0)*r10*x1609))+((x1610*x1614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1617=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1617;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1617);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1618=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1618;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1618);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1619=((1.0)*cj5);
IkReal x1620=((((-1.0)*r21*x1619))+(((-1.0)*r20*sj5)));
j4eval[0]=x1620;
j4eval[1]=((IKabs(((((-1.0)*r10*sj0*x1619))+((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1619))+((cj0*r01*sj5)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x1620);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1621=((1.0)*cj5);
CheckValue<IkReal> x1622=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1621))+(((-1.0)*r20*sj5)))),-1);
if(!x1622.valid){
continue;
}
CheckValue<IkReal> x1623 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1621))+(((-1.0)*r10*sj0*x1621))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1623.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1622.value)))+(x1623.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1624=IKsin(j4);
IkReal x1625=IKcos(j4);
IkReal x1626=(cj5*r00);
IkReal x1627=(cj1*cj2);
IkReal x1628=(cj5*r10);
IkReal x1629=(r21*sj5);
IkReal x1630=(cj5*r20);
IkReal x1631=((1.0)*x1625);
IkReal x1632=((1.0)*x1624);
IkReal x1633=(sj5*x1624);
IkReal x1634=(sj5*x1625);
IkReal x1635=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x1631))+(((-1.0)*x1630*x1632))+((x1624*x1629)));
evalcond[1]=(sj0+((r01*x1633))+(((-1.0)*x1626*x1632))+(((-1.0)*r02*x1631)));
evalcond[2]=(((r11*x1633))+(((-1.0)*r12*x1631))+(((-1.0)*x1628*x1632))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x1624))+(((-1.0)*x1630*x1631))+((x1625*x1629)));
evalcond[4]=(((r02*x1624))+((cj0*x1627))+((r01*x1634))+(((-1.0)*x1626*x1631))+(((-1.0)*cj0*x1635)));
evalcond[5]=(((r11*x1634))+((sj0*x1627))+((r12*x1624))+(((-1.0)*x1628*x1631))+(((-1.0)*sj0*x1635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1636=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1636.valid){
continue;
}
CheckValue<IkReal> x1637 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1636.value)))+(x1637.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1638=IKsin(j4);
IkReal x1639=IKcos(j4);
IkReal x1640=(cj5*r00);
IkReal x1641=(cj1*cj2);
IkReal x1642=(cj5*r10);
IkReal x1643=(r21*sj5);
IkReal x1644=(cj5*r20);
IkReal x1645=((1.0)*x1639);
IkReal x1646=((1.0)*x1638);
IkReal x1647=(sj5*x1638);
IkReal x1648=(sj5*x1639);
IkReal x1649=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x1645))+(((-1.0)*x1644*x1646))+((x1638*x1643)));
evalcond[1]=(sj0+(((-1.0)*x1640*x1646))+((r01*x1647))+(((-1.0)*r02*x1645)));
evalcond[2]=(((r11*x1647))+(((-1.0)*r12*x1645))+(((-1.0)*x1642*x1646))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x1644*x1645))+((cj1*sj2))+((x1639*x1643))+((r22*x1638)));
evalcond[4]=(((r02*x1638))+(((-1.0)*x1640*x1645))+((r01*x1648))+((cj0*x1641))+(((-1.0)*cj0*x1649)));
evalcond[5]=(((r11*x1648))+((sj0*x1641))+((r12*x1638))+(((-1.0)*x1642*x1645))+(((-1.0)*sj0*x1649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1650=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1650.valid){
continue;
}
CheckValue<IkReal> x1651 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1651.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1650.value)))+(x1651.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1652=IKsin(j4);
IkReal x1653=IKcos(j4);
IkReal x1654=(cj5*r00);
IkReal x1655=(cj1*cj2);
IkReal x1656=(cj5*r10);
IkReal x1657=(r21*sj5);
IkReal x1658=(cj5*r20);
IkReal x1659=((1.0)*x1653);
IkReal x1660=((1.0)*x1652);
IkReal x1661=(sj5*x1652);
IkReal x1662=(sj5*x1653);
IkReal x1663=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x1659))+(((-1.0)*x1658*x1660))+((x1652*x1657)));
evalcond[1]=(sj0+(((-1.0)*x1654*x1660))+((r01*x1661))+(((-1.0)*r02*x1659)));
evalcond[2]=((((-1.0)*x1656*x1660))+((r11*x1661))+(((-1.0)*r12*x1659))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((r22*x1652))+((cj1*sj2))+(((-1.0)*x1658*x1659))+((x1653*x1657)));
evalcond[4]=(((r02*x1652))+(((-1.0)*x1654*x1659))+((r01*x1662))+((cj0*x1655))+(((-1.0)*cj0*x1663)));
evalcond[5]=(((sj0*x1655))+(((-1.0)*x1656*x1659))+((r12*x1652))+((r11*x1662))+(((-1.0)*sj0*x1663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1664=r21*r21;
IkReal x1665=cj5*cj5;
IkReal x1666=(cj2*sj1);
IkReal x1667=(cj1*sj2);
IkReal x1668=(r21*sj5);
IkReal x1669=((1.0)*cj5*r20);
CheckValue<IkReal> x1670=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1664))+(((2.0)*cj5*r20*x1668))+(((-1.0)*x1665*(r20*r20)))+(((-1.0)*(r22*r22)))+((x1664*x1665)))),-1);
if(!x1670.valid){
continue;
}
CheckValue<IkReal> x1671 = IKatan2WithCheck(IkReal((((r22*x1667))+((r22*x1666)))),IkReal(((((-1.0)*x1667*x1669))+((x1667*x1668))+((x1666*x1668))+(((-1.0)*x1666*x1669)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1671.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1670.value)))+(x1671.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1672=IKsin(j4);
IkReal x1673=IKcos(j4);
IkReal x1674=(r21*sj5);
IkReal x1675=(cj5*r20);
IkReal x1676=((1.0)*x1673);
evalcond[0]=((((-1.0)*x1672*x1675))+((x1672*x1674))+(((-1.0)*r22*x1676)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((x1673*x1674))+((r22*x1672))+(((-1.0)*x1675*x1676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1677=(cj5*sj4);
IkReal x1678=(sj4*sj5);
if( IKabs((((r00*x1677))+(((-1.0)*r01*x1678))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1677))+((r11*x1678))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1677))+(((-1.0)*r01*x1678))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x1677))+((r11*x1678))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x1677))+(((-1.0)*r01*x1678))+((cj4*r02))), ((((-1.0)*r10*x1677))+((r11*x1678))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1679=IKcos(j0);
IkReal x1680=IKsin(j0);
IkReal x1681=((0.1)*sj5);
IkReal x1682=(cj5*r11);
IkReal x1683=(cj5*r01);
IkReal x1684=(r11*sj5);
IkReal x1685=(cj1*cj2);
IkReal x1686=((1.0)*cj4);
IkReal x1687=(r01*sj5);
IkReal x1688=(cj1*x1680);
IkReal x1689=(cj5*x1686);
IkReal x1690=(cj1*x1679);
IkReal x1691=(sj1*x1679);
IkReal x1692=((1.0)*cj5*sj4);
IkReal x1693=(sj1*sj2*x1680);
evalcond[0]=(x1680+((sj4*x1687))+(((-1.0)*r02*x1686))+(((-1.0)*r00*x1692)));
evalcond[1]=((((-1.0)*r12*x1686))+((sj4*x1684))+(((-1.0)*x1679))+(((-1.0)*r10*x1692)));
evalcond[2]=(((sj2*x1690))+((r00*sj5))+x1683+((cj2*x1691)));
evalcond[3]=(((r10*sj5))+x1682+((cj2*sj1*x1680))+((sj2*x1688)));
evalcond[4]=(((cj4*x1687))+((r02*sj4))+((x1679*x1685))+(((-1.0)*sj2*x1691))+(((-1.0)*r00*x1689)));
evalcond[5]=(((x1680*x1685))+(((-1.0)*r10*x1689))+(((-1.0)*x1693))+((cj4*x1684))+((r12*sj4)));
evalcond[6]=((((-0.392)*x1679*x1685))+(((-0.425)*x1690))+(((0.392)*sj2*x1691))+(((-1.0)*px))+(((-0.1)*x1683))+(((0.134)*x1680))+(((-1.0)*r00*x1681)));
evalcond[7]=((((0.392)*x1693))+(((-1.0)*r10*x1681))+(((-0.392)*x1680*x1685))+(((-1.0)*py))+(((-0.425)*x1688))+(((-0.1)*x1682))+(((-0.134)*x1679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1694=((1.0)*cj5);
IkReal x1695=((1.0)*sj5);
CheckValue<IkReal> x1696=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x1696.valid){
continue;
}
CheckValue<IkReal> x1697 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x1694))+(((-1.0)*r10*x1695)))),IkReal(((((-1.0)*r01*x1694))+(((-1.0)*r00*x1695)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1697.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1696.value)))+(x1697.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1698=IKcos(j0);
IkReal x1699=IKsin(j0);
IkReal x1700=((0.1)*sj5);
IkReal x1701=(sj1*sj2);
IkReal x1702=(cj5*r11);
IkReal x1703=(cj5*r01);
IkReal x1704=(cj2*sj1);
IkReal x1705=((0.392)*x1699);
IkReal x1706=(cj1*x1698);
IkReal x1707=(cj1*x1699);
evalcond[0]=(((r00*sj5))+x1703+((sj2*x1706))+((x1698*x1704)));
evalcond[1]=(((r10*sj5))+x1702+((sj2*x1707))+((x1699*x1704)));
evalcond[2]=((((-0.1)*x1703))+(((-0.425)*x1706))+(((-1.0)*px))+(((0.392)*x1698*x1701))+(((-0.392)*cj2*x1706))+(((-1.0)*r00*x1700))+(((0.134)*x1699)));
evalcond[3]=((((-0.1)*x1702))+(((-0.425)*x1707))+(((-0.134)*x1698))+(((-1.0)*r10*x1700))+(((-1.0)*py))+((x1701*x1705))+(((-1.0)*cj1*cj2*x1705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1708=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1708;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1708);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1709=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1709;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1709);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1710=((1.0)*cj5);
IkReal x1711=((((-1.0)*r21*x1710))+(((-1.0)*r20*sj5)));
j4eval[0]=x1711;
j4eval[1]=((IKabs(((((-1.0)*cj0*r00*x1710))+((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1710))+((cj0*r01*sj5)))))+(IKabs((((r12*sj0))+((cj0*r02))))));
j4eval[2]=IKsign(x1711);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1712=((1.0)*cj5);
CheckValue<IkReal> x1713=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1712))+(((-1.0)*r20*sj5)))),-1);
if(!x1713.valid){
continue;
}
CheckValue<IkReal> x1714 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x1712))+((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1712))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1714.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1713.value)))+(x1714.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1715=IKsin(j4);
IkReal x1716=IKcos(j4);
IkReal x1717=(cj5*r00);
IkReal x1718=(cj1*cj2);
IkReal x1719=(cj5*r10);
IkReal x1720=(r21*sj5);
IkReal x1721=(cj5*r20);
IkReal x1722=((1.0)*x1716);
IkReal x1723=((1.0)*x1715);
IkReal x1724=(sj5*x1715);
IkReal x1725=(sj5*x1716);
IkReal x1726=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x1722))+((x1715*x1720))+(((-1.0)*x1721*x1723)));
evalcond[1]=(((r01*x1724))+sj0+(((-1.0)*x1717*x1723))+(((-1.0)*r02*x1722)));
evalcond[2]=((((-1.0)*r12*x1722))+((r11*x1724))+(((-1.0)*x1719*x1723))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((r22*x1715))+((cj1*sj2))+((x1716*x1720))+(((-1.0)*x1721*x1722)));
evalcond[4]=(((r02*x1715))+((r01*x1725))+(((-1.0)*cj0*x1726))+((cj0*x1718))+(((-1.0)*x1717*x1722)));
evalcond[5]=((((-1.0)*sj0*x1726))+((r12*x1715))+((r11*x1725))+(((-1.0)*x1719*x1722))+((sj0*x1718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1727=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1727.valid){
continue;
}
CheckValue<IkReal> x1728 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1728.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1727.value)))+(x1728.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1729=IKsin(j4);
IkReal x1730=IKcos(j4);
IkReal x1731=(cj5*r00);
IkReal x1732=(cj1*cj2);
IkReal x1733=(cj5*r10);
IkReal x1734=(r21*sj5);
IkReal x1735=(cj5*r20);
IkReal x1736=((1.0)*x1730);
IkReal x1737=((1.0)*x1729);
IkReal x1738=(sj5*x1729);
IkReal x1739=(sj5*x1730);
IkReal x1740=((1.0)*sj1*sj2);
evalcond[0]=(((x1729*x1734))+(((-1.0)*x1735*x1737))+(((-1.0)*r22*x1736)));
evalcond[1]=((((-1.0)*x1731*x1737))+((r01*x1738))+sj0+(((-1.0)*r02*x1736)));
evalcond[2]=((((-1.0)*x1733*x1737))+(((-1.0)*r12*x1736))+((r11*x1738))+(((-1.0)*cj0)));
evalcond[3]=(((x1730*x1734))+((cj2*sj1))+((cj1*sj2))+((r22*x1729))+(((-1.0)*x1735*x1736)));
evalcond[4]=(((cj0*x1732))+(((-1.0)*x1731*x1736))+((r01*x1739))+(((-1.0)*cj0*x1740))+((r02*x1729)));
evalcond[5]=((((-1.0)*x1733*x1736))+((sj0*x1732))+(((-1.0)*sj0*x1740))+((r11*x1739))+((r12*x1729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1741=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1741.valid){
continue;
}
CheckValue<IkReal> x1742 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1742.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1741.value)))+(x1742.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1743=IKsin(j4);
IkReal x1744=IKcos(j4);
IkReal x1745=(cj5*r00);
IkReal x1746=(cj1*cj2);
IkReal x1747=(cj5*r10);
IkReal x1748=(r21*sj5);
IkReal x1749=(cj5*r20);
IkReal x1750=((1.0)*x1744);
IkReal x1751=((1.0)*x1743);
IkReal x1752=(sj5*x1743);
IkReal x1753=(sj5*x1744);
IkReal x1754=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x1750))+(((-1.0)*x1749*x1751))+((x1743*x1748)));
evalcond[1]=(sj0+(((-1.0)*x1745*x1751))+((r01*x1752))+(((-1.0)*r02*x1750)));
evalcond[2]=((((-1.0)*r12*x1750))+(((-1.0)*x1747*x1751))+((r11*x1752))+(((-1.0)*cj0)));
evalcond[3]=(((cj2*sj1))+((r22*x1743))+((x1744*x1748))+((cj1*sj2))+(((-1.0)*x1749*x1750)));
evalcond[4]=((((-1.0)*cj0*x1754))+((r02*x1743))+(((-1.0)*x1745*x1750))+((r01*x1753))+((cj0*x1746)));
evalcond[5]=(((r12*x1743))+(((-1.0)*sj0*x1754))+(((-1.0)*x1747*x1750))+((sj0*x1746))+((r11*x1753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1755=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x1755;
j0eval[1]=IKsign(x1755);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1756=cj5*cj5;
IkReal x1757=r21*r21;
IkReal x1758=(cj2*sj1);
IkReal x1759=(cj1*sj2);
IkReal x1760=(r21*sj5);
IkReal x1761=((1.0)*cj5*r20);
IkReal x1762=(x1757+(r22*r22)+(((-1.0)*x1756*x1757))+((x1756*(r20*r20)))+(((-2.0)*cj5*r20*x1760)));
j4eval[0]=x1762;
j4eval[1]=IKsign(x1762);
j4eval[2]=((IKabs((((r22*x1759))+((r22*x1758)))))+(IKabs((((x1759*x1760))+(((-1.0)*x1759*x1761))+((x1758*x1760))+(((-1.0)*x1758*x1761))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1763=cj1*cj1;
IkReal x1764=(cj2*sj2);
IkReal x1765=(cj1*sj1);
j0eval[0]=((((-1.08418367346939)*sj2*x1763))+x1764+x1765+(((-2.0)*x1765*(cj2*cj2)))+(((-2.0)*x1763*x1764))+(((-1.08418367346939)*cj2*x1765)));
j0eval[1]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1766=cj1*cj1;
IkReal x1767=(cj1*sj2);
IkReal x1768=((500.0)*py);
IkReal x1769=(cj2*sj2);
IkReal x1770=(cj5*r01);
IkReal x1771=(cj2*sj1);
IkReal x1772=(cj1*sj1);
IkReal x1773=(r00*sj5);
IkReal x1774=((50.0)*r10*sj5);
IkReal x1775=((50.0)*cj5*r11);
CheckValue<IkReal> x1776=IKPowWithIntegerCheck(((((196.0)*x1772))+(((196.0)*x1769))+(((-392.0)*x1766*x1769))+(((-392.0)*cj1*cj2*x1771))+(((-212.5)*sj2*x1766))+(((-212.5)*cj1*x1771))),-1);
if(!x1776.valid){
continue;
}
CheckValue<IkReal> x1777=IKPowWithIntegerCheck((x1767+x1771),-1);
if(!x1777.valid){
continue;
}
if( IKabs(((x1776.value)*((((x1767*x1774))+((x1767*x1775))+((x1771*x1775))+((x1771*x1774))+(((67.0)*x1770))+(((67.0)*x1773))+((x1767*x1768))+((x1768*x1771)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1777.value)*((x1770+x1773)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1776.value)*((((x1767*x1774))+((x1767*x1775))+((x1771*x1775))+((x1771*x1774))+(((67.0)*x1770))+(((67.0)*x1773))+((x1767*x1768))+((x1768*x1771))))))+IKsqr(((x1777.value)*((x1770+x1773))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1776.value)*((((x1767*x1774))+((x1767*x1775))+((x1771*x1775))+((x1771*x1774))+(((67.0)*x1770))+(((67.0)*x1773))+((x1767*x1768))+((x1768*x1771))))), ((x1777.value)*((x1770+x1773))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1778=IKcos(j0);
IkReal x1779=IKsin(j0);
IkReal x1780=((0.1)*sj5);
IkReal x1781=(sj1*sj2);
IkReal x1782=(cj5*r11);
IkReal x1783=(cj1*cj2);
IkReal x1784=(cj2*sj1);
IkReal x1785=((1.0)*sj5);
IkReal x1786=(cj5*r01);
IkReal x1787=((0.425)*cj1);
IkReal x1788=(cj1*sj2);
IkReal x1789=((0.392)*x1779);
IkReal x1790=((0.392)*x1778);
evalcond[0]=((((-1.0)*r00*x1785))+((x1778*x1788))+((x1778*x1784))+(((-1.0)*x1786)));
evalcond[1]=((((-1.0)*r10*x1785))+((x1779*x1784))+((x1779*x1788))+(((-1.0)*x1782)));
evalcond[2]=((((-1.0)*r00*x1780))+(((0.134)*x1779))+(((-0.1)*x1786))+(((-1.0)*px))+(((-1.0)*x1778*x1787))+((x1781*x1790))+(((-1.0)*x1783*x1790)));
evalcond[3]=((((-0.134)*x1778))+(((-1.0)*x1783*x1789))+(((-1.0)*r10*x1780))+(((-0.1)*x1782))+(((-1.0)*py))+(((-1.0)*x1779*x1787))+((x1781*x1789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1791=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1791;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1791);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1792=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1792;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1792);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1793=((1.0)*cj5);
IkReal x1794=((((-1.0)*r21*x1793))+(((-1.0)*r20*sj5)));
j4eval[0]=x1794;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1793))+(((-1.0)*r10*sj0*x1793))))));
j4eval[2]=IKsign(x1794);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1795=((1.0)*cj5);
CheckValue<IkReal> x1796 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1795))+(((-1.0)*r10*sj0*x1795)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1796.valid){
continue;
}
CheckValue<IkReal> x1797=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1795))+(((-1.0)*r20*sj5)))),-1);
if(!x1797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1796.value)+(((1.5707963267949)*(x1797.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1798=IKsin(j4);
IkReal x1799=IKcos(j4);
IkReal x1800=(cj1*cj2);
IkReal x1801=(cj5*r10);
IkReal x1802=(r01*sj5);
IkReal x1803=(cj5*r00);
IkReal x1804=(cj5*r20);
IkReal x1805=((1.0)*cj0);
IkReal x1806=(sj1*sj2);
IkReal x1807=((1.0)*x1799);
IkReal x1808=((1.0)*x1798);
IkReal x1809=(sj5*x1798);
evalcond[0]=((((-1.0)*x1804*x1808))+((r21*x1809))+(((-1.0)*r22*x1807)));
evalcond[1]=(sj0+((x1798*x1802))+(((-1.0)*r02*x1807))+(((-1.0)*x1803*x1808)));
evalcond[2]=((((-1.0)*x1801*x1808))+(((-1.0)*x1805))+((r11*x1809))+(((-1.0)*r12*x1807)));
evalcond[3]=(((cj2*sj1))+((x1799*x1804))+((cj1*sj2))+(((-1.0)*r21*sj5*x1807))+(((-1.0)*r22*x1808)));
evalcond[4]=(((x1799*x1803))+(((-1.0)*x1805*x1806))+((cj0*x1800))+(((-1.0)*x1802*x1807))+(((-1.0)*r02*x1808)));
evalcond[5]=(((x1799*x1801))+((sj0*x1800))+(((-1.0)*r11*sj5*x1807))+(((-1.0)*sj0*x1806))+(((-1.0)*r12*x1808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1810=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1810.valid){
continue;
}
CheckValue<IkReal> x1811 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1811.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1810.value)))+(x1811.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1812=IKsin(j4);
IkReal x1813=IKcos(j4);
IkReal x1814=(cj1*cj2);
IkReal x1815=(cj5*r10);
IkReal x1816=(r01*sj5);
IkReal x1817=(cj5*r00);
IkReal x1818=(cj5*r20);
IkReal x1819=((1.0)*cj0);
IkReal x1820=(sj1*sj2);
IkReal x1821=((1.0)*x1813);
IkReal x1822=((1.0)*x1812);
IkReal x1823=(sj5*x1812);
evalcond[0]=((((-1.0)*x1818*x1822))+(((-1.0)*r22*x1821))+((r21*x1823)));
evalcond[1]=(sj0+(((-1.0)*x1817*x1822))+((x1812*x1816))+(((-1.0)*r02*x1821)));
evalcond[2]=((((-1.0)*x1819))+(((-1.0)*r12*x1821))+((r11*x1823))+(((-1.0)*x1815*x1822)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x1813*x1818))+(((-1.0)*r22*x1822))+(((-1.0)*r21*sj5*x1821)));
evalcond[4]=(((cj0*x1814))+((x1813*x1817))+(((-1.0)*x1819*x1820))+(((-1.0)*r02*x1822))+(((-1.0)*x1816*x1821)));
evalcond[5]=((((-1.0)*r11*sj5*x1821))+(((-1.0)*sj0*x1820))+((x1813*x1815))+((sj0*x1814))+(((-1.0)*r12*x1822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1824=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1824.valid){
continue;
}
CheckValue<IkReal> x1825 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1824.value)))+(x1825.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1826=IKsin(j4);
IkReal x1827=IKcos(j4);
IkReal x1828=(cj1*cj2);
IkReal x1829=(cj5*r10);
IkReal x1830=(r01*sj5);
IkReal x1831=(cj5*r00);
IkReal x1832=(cj5*r20);
IkReal x1833=((1.0)*cj0);
IkReal x1834=(sj1*sj2);
IkReal x1835=((1.0)*x1827);
IkReal x1836=((1.0)*x1826);
IkReal x1837=(sj5*x1826);
evalcond[0]=((((-1.0)*x1832*x1836))+((r21*x1837))+(((-1.0)*r22*x1835)));
evalcond[1]=(sj0+((x1826*x1830))+(((-1.0)*r02*x1835))+(((-1.0)*x1831*x1836)));
evalcond[2]=((((-1.0)*x1833))+((r11*x1837))+(((-1.0)*r12*x1835))+(((-1.0)*x1829*x1836)));
evalcond[3]=(((cj2*sj1))+((x1827*x1832))+((cj1*sj2))+(((-1.0)*r21*sj5*x1835))+(((-1.0)*r22*x1836)));
evalcond[4]=(((cj0*x1828))+(((-1.0)*x1833*x1834))+((x1827*x1831))+(((-1.0)*r02*x1836))+(((-1.0)*x1830*x1835)));
evalcond[5]=((((-1.0)*r11*sj5*x1835))+((x1827*x1829))+(((-1.0)*sj0*x1834))+((sj0*x1828))+(((-1.0)*r12*x1836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1838=cj5*cj5;
IkReal x1839=r21*r21;
IkReal x1840=(cj2*sj1);
IkReal x1841=(cj1*sj2);
IkReal x1842=(r21*sj5);
IkReal x1843=((1.0)*cj5*r20);
CheckValue<IkReal> x1844=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj5*r20*x1842))+(r22*r22)+x1839+(((-1.0)*x1838*x1839))+((x1838*(r20*r20))))),-1);
if(!x1844.valid){
continue;
}
CheckValue<IkReal> x1845 = IKatan2WithCheck(IkReal((((r22*x1841))+((r22*x1840)))),IkReal(((((-1.0)*x1841*x1843))+((x1840*x1842))+(((-1.0)*x1840*x1843))+((x1841*x1842)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1845.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1844.value)))+(x1845.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1846=IKsin(j4);
IkReal x1847=IKcos(j4);
IkReal x1848=(r21*sj5);
IkReal x1849=(cj5*r20);
IkReal x1850=((1.0)*x1847);
IkReal x1851=((1.0)*x1846);
evalcond[0]=((((-1.0)*x1849*x1851))+(((-1.0)*r22*x1850))+((x1846*x1848)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*x1848*x1850))+((cj1*sj2))+(((-1.0)*r22*x1851))+((x1847*x1849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1852=(cj5*sj4);
IkReal x1853=(sj4*sj5);
if( IKabs((((r00*x1852))+(((-1.0)*r01*x1853))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1852))+((r11*x1853))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1852))+(((-1.0)*r01*x1853))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x1852))+((r11*x1853))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x1852))+(((-1.0)*r01*x1853))+((cj4*r02))), ((((-1.0)*r10*x1852))+((r11*x1853))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1854=IKcos(j0);
IkReal x1855=IKsin(j0);
IkReal x1856=(cj4*cj5);
IkReal x1857=((0.1)*sj5);
IkReal x1858=(cj5*r11);
IkReal x1859=(r11*sj5);
IkReal x1860=(cj1*cj2);
IkReal x1861=((1.0)*sj4);
IkReal x1862=((1.0)*sj5);
IkReal x1863=(cj5*r01);
IkReal x1864=((1.0)*cj4);
IkReal x1865=(cj1*x1855);
IkReal x1866=(sj1*x1854);
IkReal x1867=(cj1*x1854);
IkReal x1868=(sj1*sj2*x1855);
evalcond[0]=((((-1.0)*cj5*r00*x1861))+(((-1.0)*r02*x1864))+((r01*sj4*sj5))+x1855);
evalcond[1]=(((sj4*x1859))+(((-1.0)*x1854))+(((-1.0)*cj5*r10*x1861))+(((-1.0)*r12*x1864)));
evalcond[2]=(((sj2*x1867))+(((-1.0)*r00*x1862))+(((-1.0)*x1863))+((cj2*x1866)));
evalcond[3]=(((cj2*sj1*x1855))+(((-1.0)*x1858))+((sj2*x1865))+(((-1.0)*r10*x1862)));
evalcond[4]=((((-1.0)*r02*x1861))+((r00*x1856))+(((-1.0)*sj2*x1866))+((x1854*x1860))+(((-1.0)*cj4*r01*x1862)));
evalcond[5]=(((r10*x1856))+(((-1.0)*r12*x1861))+(((-1.0)*x1859*x1864))+((x1855*x1860))+(((-1.0)*x1868)));
evalcond[6]=((((-0.392)*x1854*x1860))+(((0.392)*sj2*x1866))+(((-0.425)*x1867))+(((-1.0)*px))+(((-1.0)*r00*x1857))+(((0.134)*x1855))+(((-0.1)*x1863)));
evalcond[7]=((((0.392)*x1868))+(((-0.392)*x1855*x1860))+(((-0.134)*x1854))+(((-0.425)*x1865))+(((-1.0)*py))+(((-0.1)*x1858))+(((-1.0)*r10*x1857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1869=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x1869.valid){
continue;
}
CheckValue<IkReal> x1870 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1870.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1869.value)))+(x1870.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1871=IKcos(j0);
IkReal x1872=IKsin(j0);
IkReal x1873=((0.1)*sj5);
IkReal x1874=(sj1*sj2);
IkReal x1875=(cj5*r11);
IkReal x1876=(cj1*cj2);
IkReal x1877=(cj2*sj1);
IkReal x1878=((1.0)*sj5);
IkReal x1879=(cj5*r01);
IkReal x1880=((0.425)*cj1);
IkReal x1881=(cj1*sj2);
IkReal x1882=((0.392)*x1872);
IkReal x1883=((0.392)*x1871);
evalcond[0]=(((x1871*x1877))+(((-1.0)*r00*x1878))+((x1871*x1881))+(((-1.0)*x1879)));
evalcond[1]=((((-1.0)*r10*x1878))+((x1872*x1881))+((x1872*x1877))+(((-1.0)*x1875)));
evalcond[2]=((((-1.0)*x1876*x1883))+((x1874*x1883))+(((0.134)*x1872))+(((-0.1)*x1879))+(((-1.0)*r00*x1873))+(((-1.0)*x1871*x1880))+(((-1.0)*px)));
evalcond[3]=((((-1.0)*x1872*x1880))+(((-1.0)*x1876*x1882))+((x1874*x1882))+(((-0.1)*x1875))+(((-1.0)*r10*x1873))+(((-1.0)*py))+(((-0.134)*x1871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1884=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1884;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1884);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1885=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1885;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1885);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1886=((1.0)*cj5);
IkReal x1887=((((-1.0)*r21*x1886))+(((-1.0)*r20*sj5)));
j4eval[0]=x1887;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1886))+(((-1.0)*r10*sj0*x1886))+((cj0*r01*sj5))))));
j4eval[2]=IKsign(x1887);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1888=((1.0)*cj5);
CheckValue<IkReal> x1889 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1888))+(((-1.0)*r10*sj0*x1888))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1889.valid){
continue;
}
CheckValue<IkReal> x1890=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1888))+(((-1.0)*r20*sj5)))),-1);
if(!x1890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1889.value)+(((1.5707963267949)*(x1890.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1891=IKsin(j4);
IkReal x1892=IKcos(j4);
IkReal x1893=(cj1*cj2);
IkReal x1894=(cj5*r10);
IkReal x1895=(r01*sj5);
IkReal x1896=(cj5*r00);
IkReal x1897=(cj5*r20);
IkReal x1898=((1.0)*cj0);
IkReal x1899=(sj1*sj2);
IkReal x1900=((1.0)*x1892);
IkReal x1901=((1.0)*x1891);
IkReal x1902=(sj5*x1891);
evalcond[0]=((((-1.0)*r22*x1900))+((r21*x1902))+(((-1.0)*x1897*x1901)));
evalcond[1]=(sj0+((x1891*x1895))+(((-1.0)*x1896*x1901))+(((-1.0)*r02*x1900)));
evalcond[2]=((((-1.0)*x1894*x1901))+(((-1.0)*r12*x1900))+((r11*x1902))+(((-1.0)*x1898)));
evalcond[3]=(((cj2*sj1))+((x1892*x1897))+((cj1*sj2))+(((-1.0)*r22*x1901))+(((-1.0)*r21*sj5*x1900)));
evalcond[4]=(((x1892*x1896))+(((-1.0)*x1898*x1899))+((cj0*x1893))+(((-1.0)*r02*x1901))+(((-1.0)*x1895*x1900)));
evalcond[5]=((((-1.0)*sj0*x1899))+((x1892*x1894))+(((-1.0)*r11*sj5*x1900))+(((-1.0)*r12*x1901))+((sj0*x1893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1903=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1903.valid){
continue;
}
CheckValue<IkReal> x1904 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1904.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1903.value)))+(x1904.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1905=IKsin(j4);
IkReal x1906=IKcos(j4);
IkReal x1907=(cj1*cj2);
IkReal x1908=(cj5*r10);
IkReal x1909=(r01*sj5);
IkReal x1910=(cj5*r00);
IkReal x1911=(cj5*r20);
IkReal x1912=((1.0)*cj0);
IkReal x1913=(sj1*sj2);
IkReal x1914=((1.0)*x1906);
IkReal x1915=((1.0)*x1905);
IkReal x1916=(sj5*x1905);
evalcond[0]=((((-1.0)*x1911*x1915))+(((-1.0)*r22*x1914))+((r21*x1916)));
evalcond[1]=((((-1.0)*x1910*x1915))+sj0+((x1905*x1909))+(((-1.0)*r02*x1914)));
evalcond[2]=((((-1.0)*r12*x1914))+((r11*x1916))+(((-1.0)*x1912))+(((-1.0)*x1908*x1915)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x1915))+((cj1*sj2))+((x1906*x1911))+(((-1.0)*r21*sj5*x1914)));
evalcond[4]=((((-1.0)*r02*x1915))+((cj0*x1907))+((x1906*x1910))+(((-1.0)*x1909*x1914))+(((-1.0)*x1912*x1913)));
evalcond[5]=((((-1.0)*r11*sj5*x1914))+(((-1.0)*r12*x1915))+(((-1.0)*sj0*x1913))+((sj0*x1907))+((x1906*x1908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1917=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1917.valid){
continue;
}
CheckValue<IkReal> x1918 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1917.value)))+(x1918.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1919=IKsin(j4);
IkReal x1920=IKcos(j4);
IkReal x1921=(cj1*cj2);
IkReal x1922=(cj5*r10);
IkReal x1923=(r01*sj5);
IkReal x1924=(cj5*r00);
IkReal x1925=(cj5*r20);
IkReal x1926=((1.0)*cj0);
IkReal x1927=(sj1*sj2);
IkReal x1928=((1.0)*x1920);
IkReal x1929=((1.0)*x1919);
IkReal x1930=(sj5*x1919);
evalcond[0]=(((r21*x1930))+(((-1.0)*r22*x1928))+(((-1.0)*x1925*x1929)));
evalcond[1]=(sj0+(((-1.0)*x1924*x1929))+(((-1.0)*r02*x1928))+((x1919*x1923)));
evalcond[2]=((((-1.0)*r12*x1928))+(((-1.0)*x1922*x1929))+(((-1.0)*x1926))+((r11*x1930)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x1928))+(((-1.0)*r22*x1929))+((x1920*x1925)));
evalcond[4]=(((cj0*x1921))+(((-1.0)*x1926*x1927))+(((-1.0)*r02*x1929))+((x1920*x1924))+(((-1.0)*x1923*x1928)));
evalcond[5]=((((-1.0)*r12*x1929))+(((-1.0)*r11*sj5*x1928))+((x1920*x1922))+(((-1.0)*sj0*x1927))+((sj0*x1921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1931=cj1*cj1;
IkReal x1932=cj2*cj2;
IkReal x1933=(r10*sj5);
IkReal x1934=(cj1*px);
IkReal x1935=((98000.0)*cj2);
IkReal x1936=(r00*sj5);
IkReal x1937=(cj5*r11);
IkReal x1938=(cj5*r01);
IkReal x1939=((10625.0)*cj1);
IkReal x1940=(sj1*sj2);
IkReal x1941=(cj1*py);
IkReal x1942=((9800.0)*x1940);
IkReal x1943=((9800.0)*cj1*cj2);
CheckValue<IkReal> x1944=IKPowWithIntegerCheck(IKsign(((-42905.0)+(((83300.0)*cj1*x1940))+(((76832.0)*cj1*cj2*x1940))+(((-6740.25)*x1931))+(((-76832.0)*x1931*x1932))+(((-83300.0)*cj2*x1931))+(((38416.0)*x1932)))),-1);
if(!x1944.valid){
continue;
}
CheckValue<IkReal> x1945 = IKatan2WithCheck(IkReal(((((-1.0)*x1937*x1942))+((x1937*x1943))+(((106250.0)*x1941))+(((-3350.0)*x1936))+(((-3350.0)*x1938))+((x1935*x1941))+(((-33500.0)*px))+((x1933*x1939))+((x1933*x1943))+(((-98000.0)*py*x1940))+(((-1.0)*x1933*x1942))+((x1937*x1939)))),IkReal(((((3350.0)*x1933))+(((3350.0)*x1937))+(((106250.0)*x1934))+((x1938*x1943))+((x1934*x1935))+(((33500.0)*py))+((x1936*x1943))+((x1936*x1939))+(((-1.0)*x1938*x1942))+(((-98000.0)*px*x1940))+(((-1.0)*x1936*x1942))+((x1938*x1939)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1945.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1944.value)))+(x1945.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1946=IKcos(j0);
IkReal x1947=IKsin(j0);
IkReal x1948=((0.1)*sj5);
IkReal x1949=((0.425)*cj1);
IkReal x1950=((0.1)*cj5);
IkReal x1951=((0.392)*sj1*sj2);
IkReal x1952=((0.392)*cj1*cj2);
evalcond[0]=(((x1946*x1951))+(((-1.0)*px))+(((0.134)*x1947))+(((-1.0)*x1946*x1949))+(((-1.0)*x1946*x1952))+(((-1.0)*r00*x1948))+(((-1.0)*r01*x1950)));
evalcond[1]=((((-1.0)*x1947*x1949))+(((-1.0)*x1947*x1952))+(((-1.0)*py))+(((-0.134)*x1946))+(((-1.0)*r11*x1950))+(((-1.0)*r10*x1948))+((x1947*x1951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x1953=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1953;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1953);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1954=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1954;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1954);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1955=((1.0)*cj5);
IkReal x1956=((((-1.0)*r21*x1955))+(((-1.0)*r20*sj5)));
j4eval[0]=x1956;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1955))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1955))))));
j4eval[2]=IKsign(x1956);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1957=((-1.0)*r20);
IkReal x1959 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1959)==0){
continue;
}
IkReal x1958=pow(x1959,-0.5);
CheckValue<IkReal> x1960 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1957),IKFAST_ATAN2_MAGTHRESH);
if(!x1960.valid){
continue;
}
IkReal gconst0=((-1.0)*(x1960.value));
IkReal gconst1=(r21*x1958);
IkReal gconst2=(x1957*x1958);
CheckValue<IkReal> x1961 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1961.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1961.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1962=((-1.0)*r20);
IkReal x1963=x1958;
CheckValue<IkReal> x1965 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1962),IKFAST_ATAN2_MAGTHRESH);
if(!x1965.valid){
continue;
}
IkReal x1964=((-1.0)*(x1965.value));
sj5=gconst1;
cj5=gconst2;
j5=x1964;
IkReal gconst0=x1964;
IkReal gconst1=(r21*x1963);
IkReal gconst2=(x1962*x1963);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1966=((-1.0)*r20);
IkReal x1967=x1958;
CheckValue<IkReal> x1969 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1966),IKFAST_ATAN2_MAGTHRESH);
if(!x1969.valid){
continue;
}
IkReal x1968=((-1.0)*(x1969.value));
sj5=gconst1;
cj5=gconst2;
j5=x1968;
IkReal gconst0=x1968;
IkReal gconst1=(r21*x1967);
IkReal gconst2=(x1966*x1967);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1970=((-1.0)*r20);
IkReal x1971=x1958;
CheckValue<IkReal> x1973 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1970),IKFAST_ATAN2_MAGTHRESH);
if(!x1973.valid){
continue;
}
IkReal x1972=((-1.0)*(x1973.value));
sj5=gconst1;
cj5=gconst2;
j5=x1972;
IkReal gconst0=x1972;
IkReal gconst1=(r21*x1971);
IkReal gconst2=(x1970*x1971);
IkReal x1974=r22*r22;
CheckValue<IkReal> x1978=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1974))),-1);
if(!x1978.valid){
continue;
}
IkReal x1975=x1978.value;
IkReal x1976=(sj3*x1975);
IkReal x1977=(((x1976*(r21*r21*r21*r21)))+((sj3*x1974))+((x1976*(r20*r20*r20*r20)))+(((2.0)*x1976*(r20*r20)*(r21*r21))));
j4eval[0]=x1977;
j4eval[1]=IKsign(x1977);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1979=gconst1*gconst1;
IkReal x1980=r21*r21;
IkReal x1981=gconst2*gconst2;
IkReal x1982=r20*r20;
IkReal x1983=(gconst2*r20);
IkReal x1984=(cj1*cj2);
IkReal x1985=(sj1*sj2);
IkReal x1986=(gconst1*r21);
IkReal x1987=(cj3*gconst2);
IkReal x1988=(cj3*r20);
CheckValue<IkReal> x1989=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x1979*x1980))+((sj3*x1981*x1982))+(((-2.0)*sj3*x1983*x1986)))),-1);
if(!x1989.valid){
continue;
}
CheckValue<IkReal> x1990 = IKatan2WithCheck(IkReal((((gconst1*r22*x1988))+((r22*x1985))+((r21*r22*x1987))+(((-1.0)*r22*x1984)))),IkReal((((r21*x1979*x1988))+(((-1.0)*x1984*x1986))+(((-1.0)*r21*x1981*x1988))+(((-1.0)*x1983*x1985))+((gconst1*x1980*x1987))+(((-1.0)*gconst1*x1982*x1987))+((x1983*x1984))+((x1985*x1986)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1990.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1989.value)))+(x1990.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1991=IKsin(j4);
IkReal x1992=IKcos(j4);
IkReal x1993=(gconst1*sj3);
IkReal x1994=(cj2*sj0);
IkReal x1995=(cj3*gconst1);
IkReal x1996=(sj1*sj2);
IkReal x1997=(cj3*gconst2);
IkReal x1998=(cj1*cj2);
IkReal x1999=(gconst2*sj3);
IkReal x2000=(cj2*sj1);
IkReal x2001=((1.0)*cj0);
IkReal x2002=(cj1*sj2);
IkReal x2003=((1.0)*x1992);
IkReal x2004=((1.0)*x1991);
IkReal x2005=(gconst1*x1991);
IkReal x2006=(cj3*x1991);
IkReal x2007=(x1992*x1999);
evalcond[0]=(((r21*x2005))+(((-1.0)*r22*x2003))+(((-1.0)*gconst2*r20*x2004)));
evalcond[1]=(sj0+((r01*x2005))+(((-1.0)*r02*x2003))+(((-1.0)*gconst2*r00*x2004)));
evalcond[2]=(((r11*x2005))+(((-1.0)*gconst2*r10*x2004))+(((-1.0)*r12*x2003))+(((-1.0)*x2001)));
evalcond[3]=(((r22*x2006))+((r21*x1999))+x2002+x2000+((r20*x1993))+(((-1.0)*r20*x1997*x2003))+((r21*x1992*x1995)));
evalcond[4]=(((r21*x1997))+(((-1.0)*r21*x1993*x2003))+((r20*x1995))+x1996+((r20*x2007))+(((-1.0)*x1998))+(((-1.0)*r22*sj3*x2004)));
evalcond[5]=(((r00*x2007))+((cj0*x2002))+((cj0*x2000))+(((-1.0)*r01*x1993*x2003))+(((-1.0)*r02*sj3*x2004))+((r00*x1995))+((r01*x1997)));
evalcond[6]=((((-1.0)*r00*x1997*x2003))+((cj0*x1998))+((r02*x2006))+(((-1.0)*x1996*x2001))+((r00*x1993))+((r01*x1999))+((r01*x1992*x1995)));
evalcond[7]=(((sj1*x1994))+(((-1.0)*r12*sj3*x2004))+((r11*x1997))+(((-1.0)*r11*x1993*x2003))+((r10*x2007))+((r10*x1995))+((sj0*x2002)));
evalcond[8]=((((-1.0)*r10*x1997*x2003))+((r12*x2006))+((r11*x1999))+((r10*x1993))+((cj1*x1994))+(((-1.0)*sj0*x1996))+((r11*x1992*x1995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2008=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x2008.valid){
continue;
}
CheckValue<IkReal> x2009 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2008.value)))+(x2009.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2010=IKsin(j4);
IkReal x2011=IKcos(j4);
IkReal x2012=(gconst1*sj3);
IkReal x2013=(cj2*sj0);
IkReal x2014=(cj3*gconst1);
IkReal x2015=(sj1*sj2);
IkReal x2016=(cj3*gconst2);
IkReal x2017=(cj1*cj2);
IkReal x2018=(gconst2*sj3);
IkReal x2019=(cj2*sj1);
IkReal x2020=((1.0)*cj0);
IkReal x2021=(cj1*sj2);
IkReal x2022=((1.0)*x2011);
IkReal x2023=((1.0)*x2010);
IkReal x2024=(gconst1*x2010);
IkReal x2025=(cj3*x2010);
IkReal x2026=(x2011*x2018);
evalcond[0]=((((-1.0)*r22*x2022))+(((-1.0)*gconst2*r20*x2023))+((r21*x2024)));
evalcond[1]=(((r01*x2024))+sj0+(((-1.0)*r02*x2022))+(((-1.0)*gconst2*r00*x2023)));
evalcond[2]=(((r11*x2024))+(((-1.0)*r12*x2022))+(((-1.0)*x2020))+(((-1.0)*gconst2*r10*x2023)));
evalcond[3]=(((r20*x2012))+((r22*x2025))+x2021+x2019+(((-1.0)*r20*x2016*x2022))+((r21*x2018))+((r21*x2011*x2014)));
evalcond[4]=(((r20*x2014))+x2015+((r21*x2016))+(((-1.0)*x2017))+(((-1.0)*r21*x2012*x2022))+(((-1.0)*r22*sj3*x2023))+((r20*x2026)));
evalcond[5]=(((r00*x2026))+(((-1.0)*r01*x2012*x2022))+((r00*x2014))+((r01*x2016))+((cj0*x2021))+(((-1.0)*r02*sj3*x2023))+((cj0*x2019)));
evalcond[6]=(((r00*x2012))+((r01*x2018))+((r02*x2025))+(((-1.0)*r00*x2016*x2022))+((r01*x2011*x2014))+((cj0*x2017))+(((-1.0)*x2015*x2020)));
evalcond[7]=((((-1.0)*r11*x2012*x2022))+((r10*x2026))+((sj1*x2013))+((r10*x2014))+((sj0*x2021))+((r11*x2016))+(((-1.0)*r12*sj3*x2023)));
evalcond[8]=(((cj1*x2013))+(((-1.0)*sj0*x2015))+((r10*x2012))+((r11*x2018))+((r11*x2011*x2014))+(((-1.0)*r10*x2016*x2022))+((r12*x2025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2027=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x2027.valid){
continue;
}
CheckValue<IkReal> x2028 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst2*r20*sj0))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2028.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2027.value)))+(x2028.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2029=IKsin(j4);
IkReal x2030=IKcos(j4);
IkReal x2031=(gconst1*sj3);
IkReal x2032=(cj2*sj0);
IkReal x2033=(cj3*gconst1);
IkReal x2034=(sj1*sj2);
IkReal x2035=(cj3*gconst2);
IkReal x2036=(cj1*cj2);
IkReal x2037=(gconst2*sj3);
IkReal x2038=(cj2*sj1);
IkReal x2039=((1.0)*cj0);
IkReal x2040=(cj1*sj2);
IkReal x2041=((1.0)*x2030);
IkReal x2042=((1.0)*x2029);
IkReal x2043=(gconst1*x2029);
IkReal x2044=(cj3*x2029);
IkReal x2045=(x2030*x2037);
evalcond[0]=(((r21*x2043))+(((-1.0)*r22*x2041))+(((-1.0)*gconst2*r20*x2042)));
evalcond[1]=(sj0+(((-1.0)*r02*x2041))+(((-1.0)*gconst2*r00*x2042))+((r01*x2043)));
evalcond[2]=((((-1.0)*gconst2*r10*x2042))+((r11*x2043))+(((-1.0)*x2039))+(((-1.0)*r12*x2041)));
evalcond[3]=(((r22*x2044))+((r21*x2037))+x2040+x2038+(((-1.0)*r20*x2035*x2041))+((r20*x2031))+((r21*x2030*x2033)));
evalcond[4]=(((r21*x2035))+(((-1.0)*r22*sj3*x2042))+x2034+((r20*x2045))+(((-1.0)*x2036))+((r20*x2033))+(((-1.0)*r21*x2031*x2041)));
evalcond[5]=(((cj0*x2040))+((r00*x2033))+((r01*x2035))+((cj0*x2038))+(((-1.0)*r01*x2031*x2041))+((r00*x2045))+(((-1.0)*r02*sj3*x2042)));
evalcond[6]=(((r00*x2031))+((r01*x2030*x2033))+((r01*x2037))+(((-1.0)*r00*x2035*x2041))+((r02*x2044))+((cj0*x2036))+(((-1.0)*x2034*x2039)));
evalcond[7]=(((r10*x2033))+(((-1.0)*r11*x2031*x2041))+(((-1.0)*r12*sj3*x2042))+((sj1*x2032))+((sj0*x2040))+((r10*x2045))+((r11*x2035)));
evalcond[8]=(((r10*x2031))+((r11*x2030*x2033))+((r12*x2044))+(((-1.0)*sj0*x2034))+(((-1.0)*r10*x2035*x2041))+((cj1*x2032))+((r11*x2037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2046=((-1.0)*r21);
IkReal x2048 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2048)==0){
continue;
}
IkReal x2047=pow(x2048,-0.5);
CheckValue<IkReal> x2049 = IKatan2WithCheck(IkReal(x2046),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2049.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x2049.value))));
IkReal gconst4=(x2046*x2047);
IkReal gconst5=((1.0)*r20*x2047);
CheckValue<IkReal> x2050 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2050.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2050.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2051=((-1.0)*r21);
CheckValue<IkReal> x2054 = IKatan2WithCheck(IkReal(x2051),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2054.valid){
continue;
}
IkReal x2052=((1.0)*(x2054.value));
IkReal x2053=x2047;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x2052)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x2052)));
IkReal gconst4=(x2051*x2053);
IkReal gconst5=((1.0)*r20*x2053);
IkReal x2055=r22*r22;
IkReal x2056=((1.0)*x2055);
CheckValue<IkReal> x2060=IKPowWithIntegerCheck(((-1.0)+x2055),-1);
if(!x2060.valid){
continue;
}
IkReal x2057=x2060.value;
if((((1.0)+(((-1.0)*x2056)))) < -0.00001)
continue;
IkReal x2058=IKsqrt(((1.0)+(((-1.0)*x2056))));
IkReal x2059=(sj0*x2057*x2058);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x2059+(((-1.0)*x2056*x2059))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2061=((-1.0)*r21);
CheckValue<IkReal> x2064 = IKatan2WithCheck(IkReal(x2061),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2064.valid){
continue;
}
IkReal x2062=((1.0)*(x2064.value));
IkReal x2063=x2047;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x2062)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x2062)));
IkReal gconst4=(x2061*x2063);
IkReal gconst5=((1.0)*r20*x2063);
IkReal x2065=r22*r22;
IkReal x2066=((1.0)*x2065);
CheckValue<IkReal> x2070=IKPowWithIntegerCheck(((-1.0)+x2065),-1);
if(!x2070.valid){
continue;
}
IkReal x2067=x2070.value;
if((((1.0)+(((-1.0)*x2066)))) < -0.00001)
continue;
IkReal x2068=IKsqrt(((1.0)+(((-1.0)*x2066))));
IkReal x2069=(cj0*x2067*x2068);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x2069+(((-1.0)*x2066*x2069))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2071=((-1.0)*r21);
CheckValue<IkReal> x2074 = IKatan2WithCheck(IkReal(x2071),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2074.valid){
continue;
}
IkReal x2072=((1.0)*(x2074.value));
IkReal x2073=x2047;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x2072)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x2072)));
IkReal gconst4=(x2071*x2073);
IkReal gconst5=((1.0)*r20*x2073);
IkReal x2075=r22*r22;
IkReal x2076=(cj0*r02);
IkReal x2077=(r12*sj0);
CheckValue<IkReal> x2081=IKPowWithIntegerCheck(((-1.0)+x2075),-1);
if(!x2081.valid){
continue;
}
IkReal x2078=x2081.value;
if((((1.0)+(((-1.0)*x2075)))) < -0.00001)
continue;
IkReal x2079=IKsqrt(((1.0)+(((-1.0)*x2075))));
IkReal x2080=((1.0)*r22*x2078*x2079);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x2076*x2080))+(((-1.0)*x2077*x2080)))))+(IKabs((x2077+x2076))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2082=((1.0)*gconst5);
CheckValue<IkReal> x2083 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x2082))+((cj0*gconst4*r01))+((gconst4*r11*sj0))+(((-1.0)*cj0*r00*x2082)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2083.valid){
continue;
}
CheckValue<IkReal> x2084=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2082))+(((-1.0)*gconst4*r20)))),-1);
if(!x2084.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2083.value)+(((1.5707963267949)*(x2084.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2085=IKsin(j4);
IkReal x2086=IKcos(j4);
IkReal x2087=(gconst4*r11);
IkReal x2088=(cj2*sj0);
IkReal x2089=(sj1*sj2);
IkReal x2090=(gconst4*sj3);
IkReal x2091=(gconst5*r10);
IkReal x2092=(cj1*cj2);
IkReal x2093=(gconst4*r01);
IkReal x2094=(cj2*sj1);
IkReal x2095=(gconst4*r21);
IkReal x2096=(gconst5*r00);
IkReal x2097=(gconst5*sj3);
IkReal x2098=(cj3*gconst5);
IkReal x2099=(cj3*gconst4);
IkReal x2100=(cj1*sj2);
IkReal x2101=((1.0)*cj0);
IkReal x2102=((1.0)*x2086);
IkReal x2103=((1.0)*x2085);
IkReal x2104=(cj3*x2085);
IkReal x2105=(cj3*x2086);
IkReal x2106=(x2086*x2097);
evalcond[0]=((((-1.0)*r22*x2102))+((x2085*x2095))+(((-1.0)*gconst5*r20*x2103)));
evalcond[1]=((((-1.0)*r02*x2102))+sj0+(((-1.0)*x2096*x2103))+((x2085*x2093)));
evalcond[2]=((((-1.0)*r12*x2102))+((x2085*x2087))+(((-1.0)*x2101))+(((-1.0)*x2091*x2103)));
evalcond[3]=(((r20*x2090))+x2094+x2100+((r22*x2104))+((r21*x2097))+(((-1.0)*r20*x2098*x2102))+((x2095*x2105)));
evalcond[4]=(((r20*x2106))+((r20*x2099))+(((-1.0)*r21*x2090*x2102))+x2089+((r21*x2098))+(((-1.0)*r22*sj3*x2103))+(((-1.0)*x2092)));
evalcond[5]=(((cj0*x2100))+((sj3*x2086*x2096))+((r01*x2098))+((r00*x2099))+(((-1.0)*r01*x2090*x2102))+((cj0*x2094))+(((-1.0)*r02*sj3*x2103)));
evalcond[6]=((((-1.0)*cj3*x2096*x2102))+((r02*x2104))+((x2093*x2105))+((r01*x2097))+((r00*x2090))+((cj0*x2092))+(((-1.0)*x2089*x2101)));
evalcond[7]=((((-1.0)*sj3*x2087*x2102))+((sj3*x2086*x2091))+((sj1*x2088))+((r10*x2099))+(((-1.0)*r12*sj3*x2103))+((sj0*x2100))+((r11*x2098)));
evalcond[8]=(((r12*x2104))+((r10*x2090))+(((-1.0)*sj0*x2089))+((cj1*x2088))+((r11*x2097))+((x2087*x2105))+(((-1.0)*cj3*x2091*x2102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2107=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x2107.valid){
continue;
}
CheckValue<IkReal> x2108 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst5*r20))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2107.value)))+(x2108.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2109=IKsin(j4);
IkReal x2110=IKcos(j4);
IkReal x2111=(gconst4*r11);
IkReal x2112=(cj2*sj0);
IkReal x2113=(sj1*sj2);
IkReal x2114=(gconst4*sj3);
IkReal x2115=(gconst5*r10);
IkReal x2116=(cj1*cj2);
IkReal x2117=(gconst4*r01);
IkReal x2118=(cj2*sj1);
IkReal x2119=(gconst4*r21);
IkReal x2120=(gconst5*r00);
IkReal x2121=(gconst5*sj3);
IkReal x2122=(cj3*gconst5);
IkReal x2123=(cj3*gconst4);
IkReal x2124=(cj1*sj2);
IkReal x2125=((1.0)*cj0);
IkReal x2126=((1.0)*x2110);
IkReal x2127=((1.0)*x2109);
IkReal x2128=(cj3*x2109);
IkReal x2129=(cj3*x2110);
IkReal x2130=(x2110*x2121);
evalcond[0]=(((x2109*x2119))+(((-1.0)*r22*x2126))+(((-1.0)*gconst5*r20*x2127)));
evalcond[1]=(((x2109*x2117))+sj0+(((-1.0)*x2120*x2127))+(((-1.0)*r02*x2126)));
evalcond[2]=(((x2109*x2111))+(((-1.0)*x2115*x2127))+(((-1.0)*x2125))+(((-1.0)*r12*x2126)));
evalcond[3]=((((-1.0)*r20*x2122*x2126))+x2124+x2118+((r21*x2121))+((r20*x2114))+((x2119*x2129))+((r22*x2128)));
evalcond[4]=(((r20*x2123))+x2113+(((-1.0)*r21*x2114*x2126))+((r21*x2122))+(((-1.0)*r22*sj3*x2127))+(((-1.0)*x2116))+((r20*x2130)));
evalcond[5]=(((cj0*x2118))+(((-1.0)*r02*sj3*x2127))+(((-1.0)*r01*x2114*x2126))+((sj3*x2110*x2120))+((r01*x2122))+((r00*x2123))+((cj0*x2124)));
evalcond[6]=((((-1.0)*cj3*x2120*x2126))+((r00*x2114))+((cj0*x2116))+((r02*x2128))+(((-1.0)*x2113*x2125))+((r01*x2121))+((x2117*x2129)));
evalcond[7]=((((-1.0)*r12*sj3*x2127))+(((-1.0)*sj3*x2111*x2126))+((sj1*x2112))+((sj0*x2124))+((r10*x2123))+((sj3*x2110*x2115))+((r11*x2122)));
evalcond[8]=((((-1.0)*sj0*x2113))+((r12*x2128))+((r11*x2121))+((x2111*x2129))+((r10*x2114))+((cj1*x2112))+(((-1.0)*cj3*x2115*x2126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2131=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x2131.valid){
continue;
}
CheckValue<IkReal> x2132 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst5*r20*sj0))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2132.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2131.value)))+(x2132.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2133=IKsin(j4);
IkReal x2134=IKcos(j4);
IkReal x2135=(gconst4*r11);
IkReal x2136=(cj2*sj0);
IkReal x2137=(sj1*sj2);
IkReal x2138=(gconst4*sj3);
IkReal x2139=(gconst5*r10);
IkReal x2140=(cj1*cj2);
IkReal x2141=(gconst4*r01);
IkReal x2142=(cj2*sj1);
IkReal x2143=(gconst4*r21);
IkReal x2144=(gconst5*r00);
IkReal x2145=(gconst5*sj3);
IkReal x2146=(cj3*gconst5);
IkReal x2147=(cj3*gconst4);
IkReal x2148=(cj1*sj2);
IkReal x2149=((1.0)*cj0);
IkReal x2150=((1.0)*x2134);
IkReal x2151=((1.0)*x2133);
IkReal x2152=(cj3*x2133);
IkReal x2153=(cj3*x2134);
IkReal x2154=(x2134*x2145);
evalcond[0]=(((x2133*x2143))+(((-1.0)*gconst5*r20*x2151))+(((-1.0)*r22*x2150)));
evalcond[1]=(((x2133*x2141))+(((-1.0)*x2144*x2151))+sj0+(((-1.0)*r02*x2150)));
evalcond[2]=((((-1.0)*x2139*x2151))+(((-1.0)*r12*x2150))+(((-1.0)*x2149))+((x2133*x2135)));
evalcond[3]=(((x2143*x2153))+x2142+x2148+((r22*x2152))+((r21*x2145))+(((-1.0)*r20*x2146*x2150))+((r20*x2138)));
evalcond[4]=((((-1.0)*x2140))+((r20*x2147))+((r20*x2154))+x2137+((r21*x2146))+(((-1.0)*r21*x2138*x2150))+(((-1.0)*r22*sj3*x2151)));
evalcond[5]=((((-1.0)*r01*x2138*x2150))+((cj0*x2142))+((cj0*x2148))+(((-1.0)*r02*sj3*x2151))+((r01*x2146))+((r00*x2147))+((sj3*x2134*x2144)));
evalcond[6]=((((-1.0)*cj3*x2144*x2150))+((cj0*x2140))+((r00*x2138))+((r02*x2152))+((x2141*x2153))+((r01*x2145))+(((-1.0)*x2137*x2149)));
evalcond[7]=(((r11*x2146))+(((-1.0)*r12*sj3*x2151))+((sj3*x2134*x2139))+((sj0*x2148))+(((-1.0)*sj3*x2135*x2150))+((r10*x2147))+((sj1*x2136)));
evalcond[8]=(((r11*x2145))+(((-1.0)*sj0*x2137))+((r10*x2138))+(((-1.0)*cj3*x2139*x2150))+((cj1*x2136))+((x2135*x2153))+((r12*x2152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2156 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2156)==0){
continue;
}
IkReal x2155=pow(x2156,-0.5);
CheckValue<IkReal> x2157 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2157.valid){
continue;
}
IkReal gconst6=((-1.0)*(x2157.value));
IkReal gconst7=((-1.0)*r01*x2155);
IkReal gconst8=(r00*x2155);
CheckValue<IkReal> x2158 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2158.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2158.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2161 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2161.valid){
continue;
}
IkReal x2159=((-1.0)*(x2161.value));
IkReal x2160=x2155;
sj5=gconst7;
cj5=gconst8;
j5=x2159;
IkReal gconst6=x2159;
IkReal gconst7=((-1.0)*r01*x2160);
IkReal gconst8=(r00*x2160);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2162=((1.0)*gconst8);
CheckValue<IkReal> x2163 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((cj0*gconst7*r01))+(((-1.0)*r10*sj0*x2162))+((gconst7*r11*sj0))+(((-1.0)*cj0*r00*x2162)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2163.valid){
continue;
}
CheckValue<IkReal> x2164=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r20))+(((-1.0)*r21*x2162)))),-1);
if(!x2164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2163.value)+(((1.5707963267949)*(x2164.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2165=IKsin(j4);
IkReal x2166=IKcos(j4);
IkReal x2167=(gconst7*sj3);
IkReal x2168=(cj3*gconst8);
IkReal x2169=(cj2*sj0);
IkReal x2170=(cj3*gconst7);
IkReal x2171=(sj1*sj2);
IkReal x2172=(cj1*cj2);
IkReal x2173=(cj2*sj1);
IkReal x2174=((1.0)*cj0);
IkReal x2175=(gconst8*sj3);
IkReal x2176=(cj1*sj2);
IkReal x2177=((1.0)*x2166);
IkReal x2178=((1.0)*x2165);
IkReal x2179=(cj3*x2165);
IkReal x2180=(gconst7*x2165);
IkReal x2181=(x2166*x2175);
evalcond[0]=(((r21*x2180))+(((-1.0)*gconst8*r20*x2178))+(((-1.0)*r22*x2177)));
evalcond[1]=((((-1.0)*gconst8*r00*x2178))+sj0+(((-1.0)*r02*x2177))+((r01*x2180)));
evalcond[2]=(((r11*x2180))+(((-1.0)*gconst8*r10*x2178))+(((-1.0)*x2174))+(((-1.0)*r12*x2177)));
evalcond[3]=(((r22*x2179))+((r21*x2175))+(((-1.0)*r20*x2168*x2177))+x2173+x2176+((r20*x2167))+((r21*x2166*x2170)));
evalcond[4]=((((-1.0)*r21*x2167*x2177))+x2171+((r21*x2168))+((r20*x2181))+((r20*x2170))+(((-1.0)*x2172))+(((-1.0)*r22*sj3*x2178)));
evalcond[5]=(((r00*x2170))+(((-1.0)*r02*sj3*x2178))+((cj0*x2173))+((cj0*x2176))+((r01*x2168))+(((-1.0)*r01*x2167*x2177))+((r00*x2181)));
evalcond[6]=((((-1.0)*r00*x2168*x2177))+(((-1.0)*x2171*x2174))+((r01*x2175))+((cj0*x2172))+((r00*x2167))+((r02*x2179))+((r01*x2166*x2170)));
evalcond[7]=(((sj1*x2169))+(((-1.0)*r12*sj3*x2178))+((r10*x2170))+((r11*x2168))+(((-1.0)*r11*x2167*x2177))+((sj0*x2176))+((r10*x2181)));
evalcond[8]=(((r11*x2175))+((r11*x2166*x2170))+(((-1.0)*r10*x2168*x2177))+((r10*x2167))+((cj1*x2169))+((r12*x2179))+(((-1.0)*sj0*x2171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2182 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst8*r20*sj0))+((gconst7*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2182.valid){
continue;
}
CheckValue<IkReal> x2183=IKPowWithIntegerCheck(IKsign((((gconst7*r10))+((gconst8*r11)))),-1);
if(!x2183.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2182.value)+(((1.5707963267949)*(x2183.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2184=IKsin(j4);
IkReal x2185=IKcos(j4);
IkReal x2186=(gconst7*sj3);
IkReal x2187=(cj3*gconst8);
IkReal x2188=(cj2*sj0);
IkReal x2189=(cj3*gconst7);
IkReal x2190=(sj1*sj2);
IkReal x2191=(cj1*cj2);
IkReal x2192=(cj2*sj1);
IkReal x2193=((1.0)*cj0);
IkReal x2194=(gconst8*sj3);
IkReal x2195=(cj1*sj2);
IkReal x2196=((1.0)*x2185);
IkReal x2197=((1.0)*x2184);
IkReal x2198=(cj3*x2184);
IkReal x2199=(gconst7*x2184);
IkReal x2200=(x2185*x2194);
evalcond[0]=((((-1.0)*gconst8*r20*x2197))+((r21*x2199))+(((-1.0)*r22*x2196)));
evalcond[1]=(sj0+(((-1.0)*r02*x2196))+(((-1.0)*gconst8*r00*x2197))+((r01*x2199)));
evalcond[2]=((((-1.0)*gconst8*r10*x2197))+((r11*x2199))+(((-1.0)*x2193))+(((-1.0)*r12*x2196)));
evalcond[3]=((((-1.0)*r20*x2187*x2196))+((r22*x2198))+x2192+x2195+((r20*x2186))+((r21*x2185*x2189))+((r21*x2194)));
evalcond[4]=(((r20*x2200))+(((-1.0)*x2191))+(((-1.0)*r22*sj3*x2197))+x2190+((r20*x2189))+((r21*x2187))+(((-1.0)*r21*x2186*x2196)));
evalcond[5]=((((-1.0)*r01*x2186*x2196))+(((-1.0)*r02*sj3*x2197))+((r00*x2200))+((cj0*x2192))+((cj0*x2195))+((r01*x2187))+((r00*x2189)));
evalcond[6]=((((-1.0)*r00*x2187*x2196))+((r01*x2185*x2189))+((cj0*x2191))+((r02*x2198))+(((-1.0)*x2190*x2193))+((r01*x2194))+((r00*x2186)));
evalcond[7]=((((-1.0)*r12*sj3*x2197))+((sj0*x2195))+((sj1*x2188))+((r10*x2200))+((r11*x2187))+(((-1.0)*r11*x2186*x2196))+((r10*x2189)));
evalcond[8]=((((-1.0)*r10*x2187*x2196))+((cj1*x2188))+((r12*x2198))+((r11*x2194))+(((-1.0)*sj0*x2190))+((r10*x2186))+((r11*x2185*x2189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2202 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2202)==0){
continue;
}
IkReal x2201=pow(x2202,-0.5);
CheckValue<IkReal> x2203 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2203.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x2203.value))));
IkReal gconst10=((1.0)*r01*x2201);
IkReal gconst11=((-1.0)*r00*x2201);
CheckValue<IkReal> x2204 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2204.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2204.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2207 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2207.valid){
continue;
}
IkReal x2205=((1.0)*(x2207.value));
IkReal x2206=x2201;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x2205)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x2205)));
IkReal gconst10=((1.0)*r01*x2206);
IkReal gconst11=((-1.0)*r00*x2206);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x2210 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2210.valid){
continue;
}
IkReal x2208=((1.0)*(x2210.value));
IkReal x2209=x2201;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x2208)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x2208)));
IkReal gconst10=((1.0)*r01*x2209);
IkReal gconst11=((-1.0)*r00*x2209);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2213 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2213.valid){
continue;
}
IkReal x2211=((1.0)*(x2213.value));
IkReal x2212=x2201;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x2211)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x2211)));
IkReal gconst10=((1.0)*r01*x2212);
IkReal gconst11=((-1.0)*r00*x2212);
IkReal x2214=r02*r02;
IkReal x2215=(r12*sj0);
IkReal x2216=x2201;
IkReal x2217=(cj0*x2216);
j4eval[0]=((IKabs((x2215+((cj0*r02)))))+(IKabs(((((-1.0)*x2217))+((r02*x2215*x2216))+((x2214*x2217))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2218=((1.0)*gconst11);
CheckValue<IkReal> x2219 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x2218))+(((-1.0)*r10*sj0*x2218))+((gconst10*r11*sj0))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2219.valid){
continue;
}
CheckValue<IkReal> x2220=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x2218)))),-1);
if(!x2220.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2219.value)+(((1.5707963267949)*(x2220.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2221=IKsin(j4);
IkReal x2222=IKcos(j4);
IkReal x2223=(gconst10*sj3);
IkReal x2224=(cj3*r10);
IkReal x2225=(gconst11*r20);
IkReal x2226=(gconst11*sj3);
IkReal x2227=(cj3*gconst11);
IkReal x2228=(sj1*sj2);
IkReal x2229=(cj1*cj2);
IkReal x2230=(cj2*sj1);
IkReal x2231=(cj1*sj2);
IkReal x2232=(cj3*gconst10);
IkReal x2233=((1.0)*cj0);
IkReal x2234=((1.0)*x2222);
IkReal x2235=((1.0)*x2221);
IkReal x2236=(cj3*x2221);
IkReal x2237=(gconst10*x2221);
IkReal x2238=(x2222*x2232);
evalcond[0]=((((-1.0)*x2225*x2235))+((r21*x2237))+(((-1.0)*r22*x2234)));
evalcond[1]=((((-1.0)*gconst11*r00*x2235))+sj0+(((-1.0)*r02*x2234))+((r01*x2237)));
evalcond[2]=((((-1.0)*x2233))+(((-1.0)*r12*x2234))+(((-1.0)*gconst11*r10*x2235))+((r11*x2237)));
evalcond[3]=(x2231+x2230+((r22*x2236))+((r21*x2238))+((r21*x2226))+(((-1.0)*cj3*x2225*x2234))+((r20*x2223)));
evalcond[4]=(x2228+(((-1.0)*r22*sj3*x2235))+((r21*x2227))+((r20*x2232))+(((-1.0)*x2229))+(((-1.0)*r21*x2223*x2234))+((sj3*x2222*x2225)));
evalcond[5]=(((r00*x2222*x2226))+((cj0*x2230))+((cj0*x2231))+(((-1.0)*r02*sj3*x2235))+(((-1.0)*r01*x2223*x2234))+((r00*x2232))+((r01*x2227)));
evalcond[6]=((((-1.0)*r00*x2227*x2234))+((r02*x2236))+((cj0*x2229))+(((-1.0)*x2228*x2233))+((r00*x2223))+((r01*x2238))+((r01*x2226)));
evalcond[7]=(((sj0*x2230))+((sj0*x2231))+(((-1.0)*r11*x2223*x2234))+((gconst10*x2224))+((r10*x2222*x2226))+(((-1.0)*r12*sj3*x2235))+((r11*x2227)));
evalcond[8]=((((-1.0)*gconst11*x2224*x2234))+((sj0*x2229))+((r10*x2223))+(((-1.0)*sj0*x2228))+((r11*x2226))+((r11*x2238))+((r12*x2236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2239 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst11*r20))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2239.valid){
continue;
}
CheckValue<IkReal> x2240=IKPowWithIntegerCheck(IKsign((((gconst10*r00))+((gconst11*r01)))),-1);
if(!x2240.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2239.value)+(((1.5707963267949)*(x2240.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2241=IKsin(j4);
IkReal x2242=IKcos(j4);
IkReal x2243=(gconst10*sj3);
IkReal x2244=(cj3*r10);
IkReal x2245=(gconst11*r20);
IkReal x2246=(gconst11*sj3);
IkReal x2247=(cj3*gconst11);
IkReal x2248=(sj1*sj2);
IkReal x2249=(cj1*cj2);
IkReal x2250=(cj2*sj1);
IkReal x2251=(cj1*sj2);
IkReal x2252=(cj3*gconst10);
IkReal x2253=((1.0)*cj0);
IkReal x2254=((1.0)*x2242);
IkReal x2255=((1.0)*x2241);
IkReal x2256=(cj3*x2241);
IkReal x2257=(gconst10*x2241);
IkReal x2258=(x2242*x2252);
evalcond[0]=((((-1.0)*r22*x2254))+(((-1.0)*x2245*x2255))+((r21*x2257)));
evalcond[1]=(sj0+(((-1.0)*r02*x2254))+(((-1.0)*gconst11*r00*x2255))+((r01*x2257)));
evalcond[2]=((((-1.0)*gconst11*r10*x2255))+(((-1.0)*r12*x2254))+(((-1.0)*x2253))+((r11*x2257)));
evalcond[3]=(x2251+x2250+(((-1.0)*cj3*x2245*x2254))+((r20*x2243))+((r21*x2246))+((r22*x2256))+((r21*x2258)));
evalcond[4]=(x2248+(((-1.0)*x2249))+((sj3*x2242*x2245))+((r20*x2252))+((r21*x2247))+(((-1.0)*r22*sj3*x2255))+(((-1.0)*r21*x2243*x2254)));
evalcond[5]=(((cj0*x2250))+((cj0*x2251))+(((-1.0)*r02*sj3*x2255))+((r01*x2247))+((r00*x2242*x2246))+(((-1.0)*r01*x2243*x2254))+((r00*x2252)));
evalcond[6]=((((-1.0)*r00*x2247*x2254))+((r01*x2246))+((r00*x2243))+(((-1.0)*x2248*x2253))+((r01*x2258))+((r02*x2256))+((cj0*x2249)));
evalcond[7]=(((r10*x2242*x2246))+((r11*x2247))+(((-1.0)*r12*sj3*x2255))+(((-1.0)*r11*x2243*x2254))+((sj0*x2250))+((sj0*x2251))+((gconst10*x2244)));
evalcond[8]=(((r10*x2243))+((r11*x2246))+((r12*x2256))+(((-1.0)*gconst11*x2244*x2254))+((sj0*x2249))+(((-1.0)*sj0*x2248))+((r11*x2258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2259=IKPowWithIntegerCheck(IKsign((((gconst10*r10))+((gconst11*r11)))),-1);
if(!x2259.valid){
continue;
}
CheckValue<IkReal> x2260 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst11*r20*sj0))+((gconst10*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2260.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2259.value)))+(x2260.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2261=IKsin(j4);
IkReal x2262=IKcos(j4);
IkReal x2263=(gconst10*sj3);
IkReal x2264=(cj3*r10);
IkReal x2265=(gconst11*r20);
IkReal x2266=(gconst11*sj3);
IkReal x2267=(cj3*gconst11);
IkReal x2268=(sj1*sj2);
IkReal x2269=(cj1*cj2);
IkReal x2270=(cj2*sj1);
IkReal x2271=(cj1*sj2);
IkReal x2272=(cj3*gconst10);
IkReal x2273=((1.0)*cj0);
IkReal x2274=((1.0)*x2262);
IkReal x2275=((1.0)*x2261);
IkReal x2276=(cj3*x2261);
IkReal x2277=(gconst10*x2261);
IkReal x2278=(x2262*x2272);
evalcond[0]=(((r21*x2277))+(((-1.0)*r22*x2274))+(((-1.0)*x2265*x2275)));
evalcond[1]=(((r01*x2277))+sj0+(((-1.0)*r02*x2274))+(((-1.0)*gconst11*r00*x2275)));
evalcond[2]=(((r11*x2277))+(((-1.0)*x2273))+(((-1.0)*gconst11*r10*x2275))+(((-1.0)*r12*x2274)));
evalcond[3]=(((r21*x2278))+x2271+x2270+((r21*x2266))+(((-1.0)*cj3*x2265*x2274))+((r22*x2276))+((r20*x2263)));
evalcond[4]=(x2268+((r21*x2267))+((sj3*x2262*x2265))+(((-1.0)*r22*sj3*x2275))+((r20*x2272))+(((-1.0)*x2269))+(((-1.0)*r21*x2263*x2274)));
evalcond[5]=(((r00*x2262*x2266))+((r01*x2267))+((r00*x2272))+(((-1.0)*r02*sj3*x2275))+((cj0*x2270))+((cj0*x2271))+(((-1.0)*r01*x2263*x2274)));
evalcond[6]=(((r00*x2263))+((r01*x2278))+((r01*x2266))+(((-1.0)*r00*x2267*x2274))+((cj0*x2269))+((r02*x2276))+(((-1.0)*x2268*x2273)));
evalcond[7]=(((sj0*x2270))+((sj0*x2271))+((gconst10*x2264))+((r11*x2267))+(((-1.0)*r12*sj3*x2275))+((r10*x2262*x2266))+(((-1.0)*r11*x2263*x2274)));
evalcond[8]=(((sj0*x2269))+(((-1.0)*sj0*x2268))+((r11*x2266))+((r10*x2263))+(((-1.0)*gconst11*x2264*x2274))+((r11*x2278))+((r12*x2276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2279=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2279;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2279);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2280=((1.0)*cj5);
IkReal x2281=((((-1.0)*r21*x2280))+(((-1.0)*r20*sj5)));
j4eval[0]=x2281;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x2280))+((r11*sj5))))));
j4eval[2]=IKsign(x2281);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2282=cj5*cj5;
IkReal x2283=(cj3*r01);
IkReal x2284=(cj5*sj5);
IkReal x2285=((1.0)*cj3);
IkReal x2286=((((-1.0)*r00*r20*x2282*x2285))+(((-1.0)*r21*x2283))+((r20*x2283*x2284))+((r21*x2282*x2283))+(((-1.0)*r02*r22*x2285))+((cj3*r00*r21*x2284)));
j4eval[0]=x2286;
j4eval[1]=IKsign(x2286);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2287=cj5*cj5;
IkReal x2288=(cj3*r20);
IkReal x2289=(r21*sj3);
IkReal x2290=((1.0)*cj3);
IkReal x2291=(r01*r21);
IkReal x2292=(r01*sj3);
IkReal x2293=(r00*sj5);
IkReal x2294=(cj5*r01*sj5);
IkReal x2295=((1.0)*x2287);
CheckValue<IkReal> x2296=IKPowWithIntegerCheck(IKsign((((cj3*x2287*x2291))+((cj3*cj5*r21*x2293))+(((-1.0)*r00*x2288*x2295))+(((-1.0)*x2290*x2291))+(((-1.0)*r02*r22*x2290))+((x2288*x2294)))),-1);
if(!x2296.valid){
continue;
}
CheckValue<IkReal> x2297 = IKatan2WithCheck(IkReal((((cj5*r22*x2292))+((r22*sj3*x2293)))),IkReal(((((-1.0)*cj5*r20*sj3*x2293))+((x2289*x2294))+((r00*x2289))+(((-1.0)*r20*x2292*x2295))+(((-1.0)*r00*x2289*x2295)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2297.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2296.value)))+(x2297.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2298=IKsin(j4);
IkReal x2299=IKcos(j4);
IkReal x2300=(cj2*sj1);
IkReal x2301=(cj1*sj2);
IkReal x2302=(r11*sj5);
IkReal x2303=(cj5*r10);
IkReal x2304=(sj1*sj2);
IkReal x2305=(cj5*r01);
IkReal x2306=(cj5*r00);
IkReal x2307=(cj3*sj5);
IkReal x2308=(r21*sj5);
IkReal x2309=(cj1*cj2);
IkReal x2310=(cj5*sj3);
IkReal x2311=(sj3*sj5);
IkReal x2312=(r01*sj5);
IkReal x2313=(cj3*cj5);
IkReal x2314=(cj5*r20);
IkReal x2315=((1.0)*x2299);
IkReal x2316=((1.0)*x2298);
IkReal x2317=(cj3*x2299);
IkReal x2318=(sj3*x2299);
IkReal x2319=(cj3*x2298);
IkReal x2320=(x2301+x2300);
evalcond[0]=((((-1.0)*r22*x2315))+((x2298*x2308))+(((-1.0)*x2314*x2316)));
evalcond[1]=(((x2298*x2302))+(((-1.0)*r12*x2315))+(((-1.0)*x2303*x2316)));
evalcond[2]=((1.0)+(((-1.0)*r02*x2315))+(((-1.0)*x2306*x2316))+((x2298*x2312)));
evalcond[3]=((((-1.0)*cj3*x2306*x2315))+((r01*x2299*x2307))+((sj3*x2305))+((r00*x2311))+((r02*x2319)));
evalcond[4]=(((x2306*x2318))+(((-1.0)*r01*x2311*x2315))+((r00*x2307))+(((-1.0)*r02*sj3*x2316))+((cj3*x2305)));
evalcond[5]=(((r21*x2310))+x2320+((r22*x2319))+((r21*x2299*x2307))+(((-1.0)*r20*x2313*x2315))+((r20*x2311)));
evalcond[6]=((((-1.0)*r12*sj3*x2316))+((r10*x2307))+x2320+(((-1.0)*sj3*x2302*x2315))+((r11*x2313))+((x2303*x2318)));
evalcond[7]=(((r10*x2311))+(((-1.0)*x2304))+x2309+(((-1.0)*cj3*x2303*x2315))+((r11*x2310))+((r12*x2319))+((x2302*x2317)));
evalcond[8]=((((-1.0)*x2309))+((r21*x2313))+x2304+((r20*x2299*x2310))+((r20*x2307))+(((-1.0)*r22*sj3*x2316))+(((-1.0)*sj3*x2308*x2315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2321=((1.0)*cj5);
CheckValue<IkReal> x2322=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj5))+(((-1.0)*r21*x2321)))),-1);
if(!x2322.valid){
continue;
}
CheckValue<IkReal> x2323 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x2321)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2323.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2322.value)))+(x2323.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2324=IKsin(j4);
IkReal x2325=IKcos(j4);
IkReal x2326=(cj2*sj1);
IkReal x2327=(cj1*sj2);
IkReal x2328=(r11*sj5);
IkReal x2329=(cj5*r10);
IkReal x2330=(sj1*sj2);
IkReal x2331=(cj5*r01);
IkReal x2332=(cj5*r00);
IkReal x2333=(cj3*sj5);
IkReal x2334=(r21*sj5);
IkReal x2335=(cj1*cj2);
IkReal x2336=(cj5*sj3);
IkReal x2337=(sj3*sj5);
IkReal x2338=(r01*sj5);
IkReal x2339=(cj3*cj5);
IkReal x2340=(cj5*r20);
IkReal x2341=((1.0)*x2325);
IkReal x2342=((1.0)*x2324);
IkReal x2343=(cj3*x2325);
IkReal x2344=(sj3*x2325);
IkReal x2345=(cj3*x2324);
IkReal x2346=(x2327+x2326);
evalcond[0]=((((-1.0)*x2340*x2342))+((x2324*x2334))+(((-1.0)*r22*x2341)));
evalcond[1]=(((x2324*x2328))+(((-1.0)*r12*x2341))+(((-1.0)*x2329*x2342)));
evalcond[2]=((1.0)+((x2324*x2338))+(((-1.0)*r02*x2341))+(((-1.0)*x2332*x2342)));
evalcond[3]=(((sj3*x2331))+((r01*x2325*x2333))+(((-1.0)*cj3*x2332*x2341))+((r00*x2337))+((r02*x2345)));
evalcond[4]=((((-1.0)*r02*sj3*x2342))+((x2332*x2344))+((cj3*x2331))+((r00*x2333))+(((-1.0)*r01*x2337*x2341)));
evalcond[5]=(((r21*x2336))+x2346+((r22*x2345))+(((-1.0)*r20*x2339*x2341))+((r21*x2325*x2333))+((r20*x2337)));
evalcond[6]=(x2346+((x2329*x2344))+(((-1.0)*sj3*x2328*x2341))+((r11*x2339))+(((-1.0)*r12*sj3*x2342))+((r10*x2333)));
evalcond[7]=(x2335+((r12*x2345))+((r11*x2336))+(((-1.0)*cj3*x2329*x2341))+(((-1.0)*x2330))+((r10*x2337))+((x2328*x2343)));
evalcond[8]=(((r21*x2339))+(((-1.0)*sj3*x2334*x2341))+x2330+((r20*x2325*x2336))+(((-1.0)*r22*sj3*x2342))+((r20*x2333))+(((-1.0)*x2335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2347 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2347.valid){
continue;
}
CheckValue<IkReal> x2348=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2348.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2347.value)+(((1.5707963267949)*(x2348.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2349=IKsin(j4);
IkReal x2350=IKcos(j4);
IkReal x2351=(cj2*sj1);
IkReal x2352=(cj1*sj2);
IkReal x2353=(r11*sj5);
IkReal x2354=(cj5*r10);
IkReal x2355=(sj1*sj2);
IkReal x2356=(cj5*r01);
IkReal x2357=(cj5*r00);
IkReal x2358=(cj3*sj5);
IkReal x2359=(r21*sj5);
IkReal x2360=(cj1*cj2);
IkReal x2361=(cj5*sj3);
IkReal x2362=(sj3*sj5);
IkReal x2363=(r01*sj5);
IkReal x2364=(cj3*cj5);
IkReal x2365=(cj5*r20);
IkReal x2366=((1.0)*x2350);
IkReal x2367=((1.0)*x2349);
IkReal x2368=(cj3*x2350);
IkReal x2369=(sj3*x2350);
IkReal x2370=(cj3*x2349);
IkReal x2371=(x2352+x2351);
evalcond[0]=((((-1.0)*x2365*x2367))+(((-1.0)*r22*x2366))+((x2349*x2359)));
evalcond[1]=((((-1.0)*x2354*x2367))+((x2349*x2353))+(((-1.0)*r12*x2366)));
evalcond[2]=((1.0)+(((-1.0)*x2357*x2367))+((x2349*x2363))+(((-1.0)*r02*x2366)));
evalcond[3]=(((r02*x2370))+((r01*x2350*x2358))+(((-1.0)*cj3*x2357*x2366))+((sj3*x2356))+((r00*x2362)));
evalcond[4]=(((r00*x2358))+((cj3*x2356))+(((-1.0)*r02*sj3*x2367))+((x2357*x2369))+(((-1.0)*r01*x2362*x2366)));
evalcond[5]=((((-1.0)*r20*x2364*x2366))+((r20*x2362))+x2371+((r21*x2350*x2358))+((r22*x2370))+((r21*x2361)));
evalcond[6]=(((r11*x2364))+((r10*x2358))+x2371+(((-1.0)*r12*sj3*x2367))+(((-1.0)*sj3*x2353*x2366))+((x2354*x2369)));
evalcond[7]=(((r11*x2361))+((r12*x2370))+x2360+(((-1.0)*x2355))+((r10*x2362))+((x2353*x2368))+(((-1.0)*cj3*x2354*x2366)));
evalcond[8]=((((-1.0)*r22*sj3*x2367))+((r20*x2350*x2361))+x2355+(((-1.0)*x2360))+((r20*x2358))+(((-1.0)*sj3*x2359*x2366))+((r21*x2364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2372=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2372;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2372);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2373=((1.0)*cj5);
IkReal x2374=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2373)));
j4eval[0]=x2374;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2373)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2374);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2375=cj5*cj5;
IkReal x2376=(cj3*r01);
IkReal x2377=(cj5*sj5);
IkReal x2378=((1.0)*cj3);
IkReal x2379=(((cj3*r00*r21*x2377))+(((-1.0)*r21*x2376))+((r20*x2376*x2377))+(((-1.0)*r02*r22*x2378))+((r21*x2375*x2376))+(((-1.0)*r00*r20*x2375*x2378)));
j4eval[0]=x2379;
j4eval[1]=IKsign(x2379);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2380=cj5*cj5;
IkReal x2381=(cj3*r20);
IkReal x2382=(r21*sj3);
IkReal x2383=((1.0)*cj3);
IkReal x2384=(r01*r21);
IkReal x2385=(r01*sj3);
IkReal x2386=(r00*sj5);
IkReal x2387=(cj5*r01*sj5);
IkReal x2388=((1.0)*x2380);
CheckValue<IkReal> x2389=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2381*x2388))+((x2381*x2387))+((cj3*cj5*r21*x2386))+(((-1.0)*x2383*x2384))+(((-1.0)*r02*r22*x2383))+((cj3*x2380*x2384)))),-1);
if(!x2389.valid){
continue;
}
CheckValue<IkReal> x2390 = IKatan2WithCheck(IkReal((((cj5*r22*x2385))+((r22*sj3*x2386)))),IkReal((((r00*x2382))+((x2382*x2387))+(((-1.0)*r20*x2385*x2388))+(((-1.0)*cj5*r20*sj3*x2386))+(((-1.0)*r00*x2382*x2388)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2389.value)))+(x2390.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2391=IKsin(j4);
IkReal x2392=IKcos(j4);
IkReal x2393=(sj1*sj2);
IkReal x2394=(r11*sj5);
IkReal x2395=(cj5*r10);
IkReal x2396=(cj5*r01);
IkReal x2397=(cj5*r00);
IkReal x2398=((1.0)*cj1);
IkReal x2399=(cj3*sj5);
IkReal x2400=(r21*sj5);
IkReal x2401=(cj5*sj3);
IkReal x2402=(sj3*sj5);
IkReal x2403=(cj2*sj1);
IkReal x2404=(r01*sj5);
IkReal x2405=(cj3*cj5);
IkReal x2406=(cj5*r20);
IkReal x2407=(cj2*x2398);
IkReal x2408=((1.0)*x2392);
IkReal x2409=((1.0)*x2391);
IkReal x2410=(cj3*x2392);
IkReal x2411=(sj3*x2392);
IkReal x2412=(cj3*x2391);
evalcond[0]=((((-1.0)*x2406*x2409))+(((-1.0)*r22*x2408))+((x2391*x2400)));
evalcond[1]=((((-1.0)*x2395*x2409))+((x2391*x2394))+(((-1.0)*r12*x2408)));
evalcond[2]=((-1.0)+(((-1.0)*x2397*x2409))+(((-1.0)*r02*x2408))+((x2391*x2404)));
evalcond[3]=((((-1.0)*cj3*x2397*x2408))+((r01*x2392*x2399))+((r00*x2402))+((sj3*x2396))+((r02*x2412)));
evalcond[4]=((((-1.0)*r02*sj3*x2409))+(((-1.0)*r01*x2402*x2408))+((r00*x2399))+((cj3*x2396))+((x2397*x2411)));
evalcond[5]=(((r22*x2412))+x2403+((r20*x2402))+((cj1*sj2))+((r21*x2401))+(((-1.0)*r20*x2405*x2408))+((r21*x2392*x2399)));
evalcond[6]=(((r10*x2402))+(((-1.0)*cj3*x2395*x2408))+(((-1.0)*x2407))+x2393+((r11*x2401))+((r12*x2412))+((x2394*x2410)));
evalcond[7]=(((r20*x2392*x2401))+(((-1.0)*x2407))+x2393+(((-1.0)*sj3*x2400*x2408))+((r20*x2399))+((r21*x2405))+(((-1.0)*r22*sj3*x2409)));
evalcond[8]=((((-1.0)*x2403))+(((-1.0)*sj2*x2398))+((r11*x2405))+(((-1.0)*r12*sj3*x2409))+((x2395*x2411))+(((-1.0)*sj3*x2394*x2408))+((r10*x2399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2413=((1.0)*cj5);
CheckValue<IkReal> x2414 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2413))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2414.valid){
continue;
}
CheckValue<IkReal> x2415=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2413)))),-1);
if(!x2415.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2414.value)+(((1.5707963267949)*(x2415.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2416=IKsin(j4);
IkReal x2417=IKcos(j4);
IkReal x2418=(sj1*sj2);
IkReal x2419=(r11*sj5);
IkReal x2420=(cj5*r10);
IkReal x2421=(cj5*r01);
IkReal x2422=(cj5*r00);
IkReal x2423=((1.0)*cj1);
IkReal x2424=(cj3*sj5);
IkReal x2425=(r21*sj5);
IkReal x2426=(cj5*sj3);
IkReal x2427=(sj3*sj5);
IkReal x2428=(cj2*sj1);
IkReal x2429=(r01*sj5);
IkReal x2430=(cj3*cj5);
IkReal x2431=(cj5*r20);
IkReal x2432=(cj2*x2423);
IkReal x2433=((1.0)*x2417);
IkReal x2434=((1.0)*x2416);
IkReal x2435=(cj3*x2417);
IkReal x2436=(sj3*x2417);
IkReal x2437=(cj3*x2416);
evalcond[0]=((((-1.0)*r22*x2433))+((x2416*x2425))+(((-1.0)*x2431*x2434)));
evalcond[1]=((((-1.0)*x2420*x2434))+((x2416*x2419))+(((-1.0)*r12*x2433)));
evalcond[2]=((-1.0)+((x2416*x2429))+(((-1.0)*r02*x2433))+(((-1.0)*x2422*x2434)));
evalcond[3]=(((r01*x2417*x2424))+((r02*x2437))+((r00*x2427))+(((-1.0)*cj3*x2422*x2433))+((sj3*x2421)));
evalcond[4]=(((r00*x2424))+((x2422*x2436))+((cj3*x2421))+(((-1.0)*r02*sj3*x2434))+(((-1.0)*r01*x2427*x2433)));
evalcond[5]=(x2428+((r21*x2426))+(((-1.0)*r20*x2430*x2433))+((cj1*sj2))+((r22*x2437))+((r21*x2417*x2424))+((r20*x2427)));
evalcond[6]=(x2418+(((-1.0)*x2432))+((x2419*x2435))+((r12*x2437))+((r10*x2427))+((r11*x2426))+(((-1.0)*cj3*x2420*x2433)));
evalcond[7]=((((-1.0)*sj3*x2425*x2433))+x2418+((r20*x2417*x2426))+(((-1.0)*x2432))+((r21*x2430))+((r20*x2424))+(((-1.0)*r22*sj3*x2434)));
evalcond[8]=(((r11*x2430))+(((-1.0)*r12*sj3*x2434))+(((-1.0)*sj3*x2419*x2433))+((r10*x2424))+(((-1.0)*x2428))+((x2420*x2436))+(((-1.0)*sj2*x2423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2438=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2438.valid){
continue;
}
CheckValue<IkReal> x2439 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2439.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2438.value)))+(x2439.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2440=IKsin(j4);
IkReal x2441=IKcos(j4);
IkReal x2442=(sj1*sj2);
IkReal x2443=(r11*sj5);
IkReal x2444=(cj5*r10);
IkReal x2445=(cj5*r01);
IkReal x2446=(cj5*r00);
IkReal x2447=((1.0)*cj1);
IkReal x2448=(cj3*sj5);
IkReal x2449=(r21*sj5);
IkReal x2450=(cj5*sj3);
IkReal x2451=(sj3*sj5);
IkReal x2452=(cj2*sj1);
IkReal x2453=(r01*sj5);
IkReal x2454=(cj3*cj5);
IkReal x2455=(cj5*r20);
IkReal x2456=(cj2*x2447);
IkReal x2457=((1.0)*x2441);
IkReal x2458=((1.0)*x2440);
IkReal x2459=(cj3*x2441);
IkReal x2460=(sj3*x2441);
IkReal x2461=(cj3*x2440);
evalcond[0]=(((x2440*x2449))+(((-1.0)*r22*x2457))+(((-1.0)*x2455*x2458)));
evalcond[1]=(((x2440*x2443))+(((-1.0)*x2444*x2458))+(((-1.0)*r12*x2457)));
evalcond[2]=((-1.0)+((x2440*x2453))+(((-1.0)*x2446*x2458))+(((-1.0)*r02*x2457)));
evalcond[3]=(((sj3*x2445))+((r00*x2451))+((r02*x2461))+(((-1.0)*cj3*x2446*x2457))+((r01*x2441*x2448)));
evalcond[4]=((((-1.0)*r02*sj3*x2458))+((r00*x2448))+(((-1.0)*r01*x2451*x2457))+((x2446*x2460))+((cj3*x2445)));
evalcond[5]=(((r21*x2441*x2448))+x2452+(((-1.0)*r20*x2454*x2457))+((cj1*sj2))+((r22*x2461))+((r20*x2451))+((r21*x2450)));
evalcond[6]=(x2442+((r10*x2451))+((x2443*x2459))+((r12*x2461))+(((-1.0)*x2456))+((r11*x2450))+(((-1.0)*cj3*x2444*x2457)));
evalcond[7]=(x2442+(((-1.0)*r22*sj3*x2458))+((r20*x2441*x2450))+(((-1.0)*sj3*x2449*x2457))+(((-1.0)*x2456))+((r20*x2448))+((r21*x2454)));
evalcond[8]=(((r10*x2448))+(((-1.0)*r12*sj3*x2458))+((x2444*x2460))+(((-1.0)*x2452))+((r11*x2454))+(((-1.0)*sj3*x2443*x2457))+(((-1.0)*sj2*x2447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2463 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2463)==0){
continue;
}
IkReal x2462=pow(x2463,-0.5);
CheckValue<IkReal> x2464 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2464.valid){
continue;
}
IkReal gconst12=((-1.0)*(x2464.value));
IkReal gconst13=((-1.0)*r11*x2462);
IkReal gconst14=(r10*x2462);
CheckValue<IkReal> x2465 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2465.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2465.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2468 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2468.valid){
continue;
}
IkReal x2466=((-1.0)*(x2468.value));
IkReal x2467=x2462;
sj5=gconst13;
cj5=gconst14;
j5=x2466;
IkReal gconst12=x2466;
IkReal gconst13=((-1.0)*r11*x2467);
IkReal gconst14=(r10*x2467);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2469=((1.0)*gconst14);
CheckValue<IkReal> x2470=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*r21*x2469)))),-1);
if(!x2470.valid){
continue;
}
CheckValue<IkReal> x2471 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x2469))+((cj0*gconst13*r01))+(((-1.0)*cj0*r00*x2469))+((gconst13*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2471.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2470.value)))+(x2471.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2472=IKsin(j4);
IkReal x2473=IKcos(j4);
IkReal x2474=((1.0)*r22);
IkReal x2475=((1.0)*r12);
IkReal x2476=(cj2*sj0);
IkReal x2477=(gconst13*sj3);
IkReal x2478=(gconst13*r01);
IkReal x2479=(sj1*sj2);
IkReal x2480=(gconst14*sj3);
IkReal x2481=(cj1*cj2);
IkReal x2482=((1.0)*gconst14);
IkReal x2483=(cj3*gconst13);
IkReal x2484=(cj3*gconst14);
IkReal x2485=(cj2*sj1);
IkReal x2486=((1.0)*r02);
IkReal x2487=(cj1*sj2);
IkReal x2488=((1.0)*cj0);
IkReal x2489=(sj3*x2472);
IkReal x2490=(cj3*x2473);
IkReal x2491=(cj3*x2472);
IkReal x2492=(gconst13*x2472);
IkReal x2493=((1.0)*x2473);
evalcond[0]=((((-1.0)*x2473*x2474))+((r21*x2492))+(((-1.0)*r20*x2472*x2482)));
evalcond[1]=(sj0+(((-1.0)*r00*x2472*x2482))+(((-1.0)*x2473*x2486))+((x2472*x2478)));
evalcond[2]=((((-1.0)*r10*x2472*x2482))+(((-1.0)*x2473*x2475))+(((-1.0)*x2488))+((r11*x2492)));
evalcond[3]=(x2487+x2485+((r22*x2491))+((r21*x2473*x2483))+((r20*x2477))+(((-1.0)*r20*x2482*x2490))+((r21*x2480)));
evalcond[4]=((((-1.0)*r21*x2477*x2493))+x2479+(((-1.0)*x2481))+(((-1.0)*x2474*x2489))+((r21*x2484))+((r20*x2473*x2480))+((r20*x2483)));
evalcond[5]=(((r01*x2484))+((r00*x2473*x2480))+(((-1.0)*x2486*x2489))+(((-1.0)*r01*x2477*x2493))+((cj0*x2485))+((cj0*x2487))+((r00*x2483)));
evalcond[6]=(((r01*x2480))+(((-1.0)*r00*x2482*x2490))+((r02*x2491))+((r00*x2477))+((x2478*x2490))+((cj0*x2481))+(((-1.0)*x2479*x2488)));
evalcond[7]=(((sj0*x2487))+((r10*x2473*x2480))+(((-1.0)*r11*x2477*x2493))+((r11*x2484))+((sj1*x2476))+((r10*x2483))+(((-1.0)*x2475*x2489)));
evalcond[8]=((((-1.0)*sj0*x2479))+(((-1.0)*r10*x2482*x2490))+((r10*x2477))+((r11*x2480))+((r12*x2491))+((r11*x2473*x2483))+((cj1*x2476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2494 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst13*r21))+(((-1.0)*cj0*gconst14*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2494.valid){
continue;
}
CheckValue<IkReal> x2495=IKPowWithIntegerCheck(IKsign((((gconst14*r01))+((gconst13*r00)))),-1);
if(!x2495.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2494.value)+(((1.5707963267949)*(x2495.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2496=IKsin(j4);
IkReal x2497=IKcos(j4);
IkReal x2498=((1.0)*r22);
IkReal x2499=((1.0)*r12);
IkReal x2500=(cj2*sj0);
IkReal x2501=(gconst13*sj3);
IkReal x2502=(gconst13*r01);
IkReal x2503=(sj1*sj2);
IkReal x2504=(gconst14*sj3);
IkReal x2505=(cj1*cj2);
IkReal x2506=((1.0)*gconst14);
IkReal x2507=(cj3*gconst13);
IkReal x2508=(cj3*gconst14);
IkReal x2509=(cj2*sj1);
IkReal x2510=((1.0)*r02);
IkReal x2511=(cj1*sj2);
IkReal x2512=((1.0)*cj0);
IkReal x2513=(sj3*x2496);
IkReal x2514=(cj3*x2497);
IkReal x2515=(cj3*x2496);
IkReal x2516=(gconst13*x2496);
IkReal x2517=((1.0)*x2497);
evalcond[0]=((((-1.0)*r20*x2496*x2506))+(((-1.0)*x2497*x2498))+((r21*x2516)));
evalcond[1]=(sj0+((x2496*x2502))+(((-1.0)*x2497*x2510))+(((-1.0)*r00*x2496*x2506)));
evalcond[2]=((((-1.0)*x2512))+(((-1.0)*x2497*x2499))+((r11*x2516))+(((-1.0)*r10*x2496*x2506)));
evalcond[3]=(x2511+x2509+((r22*x2515))+(((-1.0)*r20*x2506*x2514))+((r21*x2497*x2507))+((r21*x2504))+((r20*x2501)));
evalcond[4]=(x2503+((r20*x2497*x2504))+(((-1.0)*x2505))+((r21*x2508))+(((-1.0)*r21*x2501*x2517))+(((-1.0)*x2498*x2513))+((r20*x2507)));
evalcond[5]=(((cj0*x2511))+(((-1.0)*r01*x2501*x2517))+((cj0*x2509))+(((-1.0)*x2510*x2513))+((r00*x2497*x2504))+((r00*x2507))+((r01*x2508)));
evalcond[6]=((((-1.0)*r00*x2506*x2514))+((r02*x2515))+((cj0*x2505))+(((-1.0)*x2503*x2512))+((x2502*x2514))+((r00*x2501))+((r01*x2504)));
evalcond[7]=((((-1.0)*r11*x2501*x2517))+((r10*x2507))+((sj0*x2511))+((r10*x2497*x2504))+((sj1*x2500))+(((-1.0)*x2499*x2513))+((r11*x2508)));
evalcond[8]=(((r10*x2501))+((cj1*x2500))+((r11*x2497*x2507))+(((-1.0)*r10*x2506*x2514))+((r11*x2504))+((r12*x2515))+(((-1.0)*sj0*x2503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2519 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2519)==0){
continue;
}
IkReal x2518=pow(x2519,-0.5);
CheckValue<IkReal> x2520 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2520.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x2520.value))));
IkReal gconst16=((1.0)*r11*x2518);
IkReal gconst17=((-1.0)*r10*x2518);
CheckValue<IkReal> x2521 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2521.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2521.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2524 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2524.valid){
continue;
}
IkReal x2522=((1.0)*(x2524.value));
IkReal x2523=x2518;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2522)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2522)));
IkReal gconst16=((1.0)*r11*x2523);
IkReal gconst17=((-1.0)*r10*x2523);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2527 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2527.valid){
continue;
}
IkReal x2525=((1.0)*(x2527.value));
IkReal x2526=x2518;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2525)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2525)));
IkReal gconst16=((1.0)*r11*x2526);
IkReal gconst17=((-1.0)*r10*x2526);
IkReal x2528=r12*r12;
IkReal x2529=(cj0*r02);
IkReal x2530=x2518;
IkReal x2531=(sj0*x2530);
j4eval[0]=((IKabs((((r12*x2529*x2530))+(((-1.0)*x2531))+((x2528*x2531)))))+(IKabs((x2529+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x2534 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2534.valid){
continue;
}
IkReal x2532=((1.0)*(x2534.value));
IkReal x2533=x2518;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x2532)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2532)));
IkReal gconst16=((1.0)*r11*x2533);
IkReal gconst17=((-1.0)*r10*x2533);
IkReal x2535=((1.0)*cj3);
CheckValue<IkReal> x2540=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x2540.valid){
continue;
}
IkReal x2536=x2540.value;
IkReal x2537=(cj3*x2536);
IkReal x2538=(x2535*x2536);
IkReal x2539=((((-1.0)*x2538*(r10*r10)*(r20*r20)))+(((-1.0)*x2535*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x2537))+(((-1.0)*x2538*(r11*r11)*(r21*r21))));
j4eval[0]=x2539;
j4eval[1]=IKsign(x2539);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2541=r21*r21;
IkReal x2542=gconst16*gconst16;
IkReal x2543=r20*r20;
IkReal x2544=gconst17*gconst17;
IkReal x2545=(gconst16*r21);
IkReal x2546=(cj1*sj2);
IkReal x2547=(cj2*sj1);
IkReal x2548=(gconst17*r20);
IkReal x2549=(gconst16*sj3);
IkReal x2550=(r21*sj3);
IkReal x2551=((1.0)*cj3);
CheckValue<IkReal> x2552=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2551*(r22*r22)))+(((2.0)*cj3*x2545*x2548))+(((-1.0)*x2543*x2544*x2551))+(((-1.0)*x2541*x2542*x2551)))),-1);
if(!x2552.valid){
continue;
}
CheckValue<IkReal> x2553 = IKatan2WithCheck(IkReal((((gconst17*r22*x2550))+((r20*r22*x2549))+((r22*x2547))+((r22*x2546)))),IkReal(((((-1.0)*x2547*x2548))+(((-1.0)*x2546*x2548))+(((-1.0)*gconst17*x2543*x2549))+((gconst17*x2541*x2549))+((x2545*x2547))+((x2545*x2546))+(((-1.0)*r20*x2544*x2550))+((r20*x2542*x2550)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2553.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2552.value)))+(x2553.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2554=IKsin(j4);
IkReal x2555=IKcos(j4);
IkReal x2556=(cj3*gconst17);
IkReal x2557=(gconst16*r21);
IkReal x2558=(gconst17*sj3);
IkReal x2559=(gconst16*r20);
IkReal x2560=(sj1*sj2);
IkReal x2561=(cj1*cj2);
IkReal x2562=(gconst16*r10);
IkReal x2563=(cj2*sj1);
IkReal x2564=(gconst16*sj3);
IkReal x2565=(cj1*sj2);
IkReal x2566=((1.0)*cj0);
IkReal x2567=((1.0)*x2555);
IkReal x2568=(gconst16*x2554);
IkReal x2569=(cj3*x2555);
IkReal x2570=(cj3*x2554);
IkReal x2571=((1.0)*gconst17*x2554);
IkReal x2572=((1.0)*sj3*x2554);
evalcond[0]=((((-1.0)*r22*x2567))+(((-1.0)*r20*x2571))+((x2554*x2557)));
evalcond[1]=(sj0+((r01*x2568))+(((-1.0)*r02*x2567))+(((-1.0)*r00*x2571)));
evalcond[2]=((((-1.0)*r10*x2571))+(((-1.0)*x2566))+((r11*x2568))+(((-1.0)*r12*x2567)));
evalcond[3]=(x2563+x2565+((x2557*x2569))+(((-1.0)*r20*x2556*x2567))+((sj3*x2559))+((r21*x2558))+((r22*x2570)));
evalcond[4]=(x2560+(((-1.0)*x2561))+((cj3*x2559))+(((-1.0)*sj3*x2557*x2567))+((r20*x2555*x2558))+(((-1.0)*r22*x2572))+((r21*x2556)));
evalcond[5]=((((-1.0)*r01*x2564*x2567))+((cj0*x2563))+((cj0*x2565))+((r01*x2556))+(((-1.0)*r02*x2572))+((r00*x2555*x2558))+((cj3*gconst16*r00)));
evalcond[6]=((((-1.0)*r00*x2556*x2567))+((r00*x2564))+((cj0*x2561))+((r01*x2558))+(((-1.0)*x2560*x2566))+((gconst16*r01*x2569))+((r02*x2570)));
evalcond[7]=(((r10*x2555*x2558))+(((-1.0)*r12*x2572))+((cj3*x2562))+((r11*x2556))+(((-1.0)*r11*x2564*x2567))+((sj0*x2565))+((sj0*x2563)));
evalcond[8]=(((sj3*x2562))+((r12*x2570))+((r11*x2558))+((gconst16*r11*x2569))+(((-1.0)*r10*x2556*x2567))+(((-1.0)*sj0*x2560))+((sj0*x2561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2573=((1.0)*gconst17);
CheckValue<IkReal> x2574 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x2573))+((gconst16*r11*sj0))+((cj0*gconst16*r01))+(((-1.0)*r10*sj0*x2573)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2574.valid){
continue;
}
CheckValue<IkReal> x2575=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x2573)))),-1);
if(!x2575.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2574.value)+(((1.5707963267949)*(x2575.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2576=IKsin(j4);
IkReal x2577=IKcos(j4);
IkReal x2578=(cj3*gconst17);
IkReal x2579=(gconst16*r21);
IkReal x2580=(gconst17*sj3);
IkReal x2581=(gconst16*r20);
IkReal x2582=(sj1*sj2);
IkReal x2583=(cj1*cj2);
IkReal x2584=(gconst16*r10);
IkReal x2585=(cj2*sj1);
IkReal x2586=(gconst16*sj3);
IkReal x2587=(cj1*sj2);
IkReal x2588=((1.0)*cj0);
IkReal x2589=((1.0)*x2577);
IkReal x2590=(gconst16*x2576);
IkReal x2591=(cj3*x2577);
IkReal x2592=(cj3*x2576);
IkReal x2593=((1.0)*gconst17*x2576);
IkReal x2594=((1.0)*sj3*x2576);
evalcond[0]=((((-1.0)*r20*x2593))+((x2576*x2579))+(((-1.0)*r22*x2589)));
evalcond[1]=((((-1.0)*r00*x2593))+sj0+((r01*x2590))+(((-1.0)*r02*x2589)));
evalcond[2]=((((-1.0)*x2588))+((r11*x2590))+(((-1.0)*r10*x2593))+(((-1.0)*r12*x2589)));
evalcond[3]=(((r22*x2592))+x2587+x2585+((sj3*x2581))+((x2579*x2591))+(((-1.0)*r20*x2578*x2589))+((r21*x2580)));
evalcond[4]=(((r21*x2578))+((r20*x2577*x2580))+x2582+(((-1.0)*r22*x2594))+((cj3*x2581))+(((-1.0)*x2583))+(((-1.0)*sj3*x2579*x2589)));
evalcond[5]=(((r00*x2577*x2580))+((cj0*x2587))+((cj0*x2585))+(((-1.0)*r02*x2594))+((r01*x2578))+(((-1.0)*r01*x2586*x2589))+((cj3*gconst16*r00)));
evalcond[6]=(((r01*x2580))+((r00*x2586))+((cj0*x2583))+((gconst16*r01*x2591))+(((-1.0)*x2582*x2588))+((r02*x2592))+(((-1.0)*r00*x2578*x2589)));
evalcond[7]=(((r10*x2577*x2580))+(((-1.0)*r11*x2586*x2589))+((r11*x2578))+((cj3*x2584))+((sj0*x2587))+((sj0*x2585))+(((-1.0)*r12*x2594)));
evalcond[8]=(((sj3*x2584))+(((-1.0)*r10*x2578*x2589))+((gconst16*r11*x2591))+((r12*x2592))+(((-1.0)*sj0*x2582))+((r11*x2580))+((sj0*x2583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2595=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x2595.valid){
continue;
}
CheckValue<IkReal> x2596 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst17*r20))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2596.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2595.value)))+(x2596.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2597=IKsin(j4);
IkReal x2598=IKcos(j4);
IkReal x2599=(cj3*gconst17);
IkReal x2600=(gconst16*r21);
IkReal x2601=(gconst17*sj3);
IkReal x2602=(gconst16*r20);
IkReal x2603=(sj1*sj2);
IkReal x2604=(cj1*cj2);
IkReal x2605=(gconst16*r10);
IkReal x2606=(cj2*sj1);
IkReal x2607=(gconst16*sj3);
IkReal x2608=(cj1*sj2);
IkReal x2609=((1.0)*cj0);
IkReal x2610=((1.0)*x2598);
IkReal x2611=(gconst16*x2597);
IkReal x2612=(cj3*x2598);
IkReal x2613=(cj3*x2597);
IkReal x2614=((1.0)*gconst17*x2597);
IkReal x2615=((1.0)*sj3*x2597);
evalcond[0]=(((x2597*x2600))+(((-1.0)*r22*x2610))+(((-1.0)*r20*x2614)));
evalcond[1]=((((-1.0)*r00*x2614))+((r01*x2611))+sj0+(((-1.0)*r02*x2610)));
evalcond[2]=((((-1.0)*r12*x2610))+((r11*x2611))+(((-1.0)*r10*x2614))+(((-1.0)*x2609)));
evalcond[3]=(((sj3*x2602))+(((-1.0)*r20*x2599*x2610))+((x2600*x2612))+((r21*x2601))+((r22*x2613))+x2606+x2608);
evalcond[4]=((((-1.0)*sj3*x2600*x2610))+(((-1.0)*x2604))+(((-1.0)*r22*x2615))+((cj3*x2602))+((r20*x2598*x2601))+x2603+((r21*x2599)));
evalcond[5]=(((r01*x2599))+((r00*x2598*x2601))+(((-1.0)*r01*x2607*x2610))+((cj0*x2608))+((cj0*x2606))+(((-1.0)*r02*x2615))+((cj3*gconst16*r00)));
evalcond[6]=((((-1.0)*r00*x2599*x2610))+((r02*x2613))+(((-1.0)*x2603*x2609))+((cj0*x2604))+((r01*x2601))+((r00*x2607))+((gconst16*r01*x2612)));
evalcond[7]=(((r10*x2598*x2601))+(((-1.0)*r12*x2615))+(((-1.0)*r11*x2607*x2610))+((cj3*x2605))+((sj0*x2606))+((sj0*x2608))+((r11*x2599)));
evalcond[8]=(((sj3*x2605))+((gconst16*r11*x2612))+((sj0*x2604))+(((-1.0)*sj0*x2603))+(((-1.0)*r10*x2599*x2610))+((r12*x2613))+((r11*x2601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2616=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2616;
j4eval[1]=IKsign(x2616);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2617=((1.0)*cj5);
IkReal x2618=((((-1.0)*r21*x2617))+(((-1.0)*r20*sj5)));
j4eval[0]=x2618;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x2617))+((r01*sj5))))));
j4eval[2]=IKsign(x2618);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2619=cj5*cj5;
IkReal x2620=(cj3*r21);
IkReal x2621=(cj5*sj5);
IkReal x2622=((1.0)*cj3);
IkReal x2623=((((-1.0)*r10*r20*x2619*x2622))+(((-1.0)*r12*r22*x2622))+((cj3*r11*r20*x2621))+(((-1.0)*r11*x2620))+((r11*x2619*x2620))+((r10*x2620*x2621)));
j4eval[0]=x2623;
j4eval[1]=IKsign(x2623);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2624=cj5*cj5;
IkReal x2625=((1.0)*cj3);
IkReal x2626=(r10*r21);
IkReal x2627=(cj5*sj5);
IkReal x2628=(r11*r21);
IkReal x2629=(r11*r20);
IkReal x2630=(r22*sj3);
IkReal x2631=(r10*r20);
IkReal x2632=((1.0)*sj3*x2624);
CheckValue<IkReal> x2633=IKPowWithIntegerCheck(IKsign((((cj3*x2624*x2628))+((cj3*x2627*x2629))+(((-1.0)*x2625*x2628))+(((-1.0)*r12*r22*x2625))+((cj3*x2626*x2627))+(((-1.0)*x2624*x2625*x2631)))),-1);
if(!x2633.valid){
continue;
}
CheckValue<IkReal> x2634 = IKatan2WithCheck(IkReal((((cj5*r11*x2630))+((r10*sj5*x2630)))),IkReal(((((-1.0)*sj3*x2627*x2631))+((sj3*x2626))+(((-1.0)*x2629*x2632))+((sj3*x2627*x2628))+(((-1.0)*x2626*x2632)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2634.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2633.value)))+(x2634.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2635=IKsin(j4);
IkReal x2636=IKcos(j4);
IkReal x2637=(cj2*sj1);
IkReal x2638=(cj1*sj2);
IkReal x2639=(cj5*sj3);
IkReal x2640=(cj5*r10);
IkReal x2641=(r00*sj5);
IkReal x2642=(sj1*sj2);
IkReal x2643=(r11*sj5);
IkReal x2644=(cj3*cj5);
IkReal x2645=(cj3*sj5);
IkReal x2646=(r21*sj5);
IkReal x2647=(cj1*cj2);
IkReal x2648=(sj3*sj5);
IkReal x2649=(r01*sj5);
IkReal x2650=((1.0)*x2636);
IkReal x2651=((1.0)*x2635);
IkReal x2652=(cj3*x2635);
IkReal x2653=(cj3*x2636);
IkReal x2654=(x2638+x2637);
evalcond[0]=((((-1.0)*r22*x2650))+(((-1.0)*cj5*r20*x2651))+((x2635*x2646)));
evalcond[1]=((((-1.0)*r02*x2650))+(((-1.0)*cj5*r00*x2651))+((x2635*x2649)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x2650))+(((-1.0)*x2640*x2651))+((x2635*x2643)));
evalcond[3]=(((r12*x2652))+(((-1.0)*cj3*x2640*x2650))+((r11*x2639))+((r10*x2648))+((x2643*x2653)));
evalcond[4]=(((r11*x2644))+(((-1.0)*sj3*x2643*x2650))+((r10*x2645))+((r10*x2636*x2639))+(((-1.0)*r12*sj3*x2651)));
evalcond[5]=(((r21*x2639))+((r22*x2652))+((r21*x2636*x2645))+x2654+(((-1.0)*r20*x2644*x2650))+((r20*x2648)));
evalcond[6]=(((r00*x2636*x2639))+(((-1.0)*r01*x2648*x2650))+((r01*x2644))+(((-1.0)*r02*sj3*x2651))+((cj3*x2641))+x2654);
evalcond[7]=((((-1.0)*r00*x2644*x2650))+((r02*x2652))+((r01*x2639))+((sj3*x2641))+((r01*x2636*x2645))+(((-1.0)*x2642))+x2647);
evalcond[8]=((((-1.0)*sj3*x2646*x2650))+((r21*x2644))+(((-1.0)*r22*sj3*x2651))+((r20*x2636*x2639))+(((-1.0)*x2647))+x2642+((r20*x2645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2655=((1.0)*cj5);
CheckValue<IkReal> x2656 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2655)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2656.valid){
continue;
}
CheckValue<IkReal> x2657=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2655))+(((-1.0)*r20*sj5)))),-1);
if(!x2657.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2656.value)+(((1.5707963267949)*(x2657.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2658=IKsin(j4);
IkReal x2659=IKcos(j4);
IkReal x2660=(cj2*sj1);
IkReal x2661=(cj1*sj2);
IkReal x2662=(cj5*sj3);
IkReal x2663=(cj5*r10);
IkReal x2664=(r00*sj5);
IkReal x2665=(sj1*sj2);
IkReal x2666=(r11*sj5);
IkReal x2667=(cj3*cj5);
IkReal x2668=(cj3*sj5);
IkReal x2669=(r21*sj5);
IkReal x2670=(cj1*cj2);
IkReal x2671=(sj3*sj5);
IkReal x2672=(r01*sj5);
IkReal x2673=((1.0)*x2659);
IkReal x2674=((1.0)*x2658);
IkReal x2675=(cj3*x2658);
IkReal x2676=(cj3*x2659);
IkReal x2677=(x2660+x2661);
evalcond[0]=(((x2658*x2669))+(((-1.0)*cj5*r20*x2674))+(((-1.0)*r22*x2673)));
evalcond[1]=(((x2658*x2672))+(((-1.0)*r02*x2673))+(((-1.0)*cj5*r00*x2674)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x2673))+((x2658*x2666))+(((-1.0)*x2663*x2674)));
evalcond[3]=(((r12*x2675))+((x2666*x2676))+((r10*x2671))+(((-1.0)*cj3*x2663*x2673))+((r11*x2662)));
evalcond[4]=((((-1.0)*r12*sj3*x2674))+((r10*x2668))+((r10*x2659*x2662))+(((-1.0)*sj3*x2666*x2673))+((r11*x2667)));
evalcond[5]=(((r21*x2662))+((r22*x2675))+((r21*x2659*x2668))+((r20*x2671))+(((-1.0)*r20*x2667*x2673))+x2677);
evalcond[6]=((((-1.0)*r01*x2671*x2673))+((cj3*x2664))+((r01*x2667))+x2677+((r00*x2659*x2662))+(((-1.0)*r02*sj3*x2674)));
evalcond[7]=((((-1.0)*x2665))+((r01*x2659*x2668))+((r02*x2675))+((sj3*x2664))+((r01*x2662))+(((-1.0)*r00*x2667*x2673))+x2670);
evalcond[8]=((((-1.0)*x2670))+((r21*x2667))+(((-1.0)*sj3*x2669*x2673))+(((-1.0)*r22*sj3*x2674))+((r20*x2659*x2662))+((r20*x2668))+x2665);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2678 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2678.valid){
continue;
}
CheckValue<IkReal> x2679=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2678.value)+(((1.5707963267949)*(x2679.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2680=IKsin(j4);
IkReal x2681=IKcos(j4);
IkReal x2682=(cj2*sj1);
IkReal x2683=(cj1*sj2);
IkReal x2684=(cj5*sj3);
IkReal x2685=(cj5*r10);
IkReal x2686=(r00*sj5);
IkReal x2687=(sj1*sj2);
IkReal x2688=(r11*sj5);
IkReal x2689=(cj3*cj5);
IkReal x2690=(cj3*sj5);
IkReal x2691=(r21*sj5);
IkReal x2692=(cj1*cj2);
IkReal x2693=(sj3*sj5);
IkReal x2694=(r01*sj5);
IkReal x2695=((1.0)*x2681);
IkReal x2696=((1.0)*x2680);
IkReal x2697=(cj3*x2680);
IkReal x2698=(cj3*x2681);
IkReal x2699=(x2682+x2683);
evalcond[0]=((((-1.0)*r22*x2695))+((x2680*x2691))+(((-1.0)*cj5*r20*x2696)));
evalcond[1]=((((-1.0)*cj5*r00*x2696))+(((-1.0)*r02*x2695))+((x2680*x2694)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x2695))+((x2680*x2688))+(((-1.0)*x2685*x2696)));
evalcond[3]=(((r12*x2697))+((r11*x2684))+((r10*x2693))+(((-1.0)*cj3*x2685*x2695))+((x2688*x2698)));
evalcond[4]=(((r11*x2689))+((r10*x2690))+((r10*x2681*x2684))+(((-1.0)*sj3*x2688*x2695))+(((-1.0)*r12*sj3*x2696)));
evalcond[5]=(((r22*x2697))+((r21*x2681*x2690))+(((-1.0)*r20*x2689*x2695))+((r21*x2684))+((r20*x2693))+x2699);
evalcond[6]=(((cj3*x2686))+(((-1.0)*r02*sj3*x2696))+((r01*x2689))+((r00*x2681*x2684))+(((-1.0)*r01*x2693*x2695))+x2699);
evalcond[7]=(((r01*x2681*x2690))+((r01*x2684))+(((-1.0)*r00*x2689*x2695))+(((-1.0)*x2687))+((sj3*x2686))+((r02*x2697))+x2692);
evalcond[8]=((((-1.0)*sj3*x2691*x2695))+((r21*x2689))+((r20*x2681*x2684))+(((-1.0)*x2692))+(((-1.0)*r22*sj3*x2696))+((r20*x2690))+x2687);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2700=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2700;
j4eval[1]=IKsign(x2700);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2701=((1.0)*cj5);
IkReal x2702=((((-1.0)*r01*x2701))+(((-1.0)*r00*sj5)));
j4eval[0]=x2702;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2701)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2702);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2703=cj5*cj5;
IkReal x2704=(cj3*r21);
IkReal x2705=(cj5*sj5);
IkReal x2706=((1.0)*cj3);
IkReal x2707=(((r11*x2703*x2704))+(((-1.0)*r12*r22*x2706))+(((-1.0)*r11*x2704))+(((-1.0)*r10*r20*x2703*x2706))+((cj3*r11*r20*x2705))+((r10*x2704*x2705)));
j4eval[0]=x2707;
j4eval[1]=IKsign(x2707);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2708=cj5*cj5;
IkReal x2709=((1.0)*cj3);
IkReal x2710=(r10*r21);
IkReal x2711=(cj5*sj5);
IkReal x2712=(r11*r21);
IkReal x2713=(r11*r20);
IkReal x2714=(r22*sj3);
IkReal x2715=(r10*r20);
IkReal x2716=((1.0)*sj3*x2708);
CheckValue<IkReal> x2717 = IKatan2WithCheck(IkReal((((cj5*r11*x2714))+((r10*sj5*x2714)))),IkReal(((((-1.0)*sj3*x2711*x2715))+(((-1.0)*x2713*x2716))+((sj3*x2710))+((sj3*x2711*x2712))+(((-1.0)*x2710*x2716)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2717.valid){
continue;
}
CheckValue<IkReal> x2718=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2708*x2709*x2715))+(((-1.0)*r12*r22*x2709))+(((-1.0)*x2709*x2712))+((cj3*x2708*x2712))+((cj3*x2710*x2711))+((cj3*x2711*x2713)))),-1);
if(!x2718.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2717.value)+(((1.5707963267949)*(x2718.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2719=IKsin(j4);
IkReal x2720=IKcos(j4);
IkReal x2721=(sj1*sj2);
IkReal x2722=(cj5*sj3);
IkReal x2723=(cj5*r10);
IkReal x2724=(r00*sj5);
IkReal x2725=(r11*sj5);
IkReal x2726=(cj3*cj5);
IkReal x2727=((1.0)*cj1);
IkReal x2728=(cj3*sj5);
IkReal x2729=(r21*sj5);
IkReal x2730=(cj2*sj1);
IkReal x2731=(sj3*sj5);
IkReal x2732=(r01*sj5);
IkReal x2733=(cj2*x2727);
IkReal x2734=((1.0)*x2720);
IkReal x2735=((1.0)*x2719);
IkReal x2736=(cj3*x2719);
IkReal x2737=(cj3*x2720);
evalcond[0]=((((-1.0)*cj5*r20*x2735))+(((-1.0)*r22*x2734))+((x2719*x2729)));
evalcond[1]=(((x2719*x2732))+(((-1.0)*r02*x2734))+(((-1.0)*cj5*r00*x2735)));
evalcond[2]=((1.0)+(((-1.0)*x2723*x2735))+(((-1.0)*r12*x2734))+((x2719*x2725)));
evalcond[3]=((((-1.0)*cj3*x2723*x2734))+((x2725*x2737))+((r12*x2736))+((r11*x2722))+((r10*x2731)));
evalcond[4]=((((-1.0)*sj3*x2725*x2734))+((r11*x2726))+((r10*x2728))+(((-1.0)*r12*sj3*x2735))+((r10*x2720*x2722)));
evalcond[5]=(x2730+((r21*x2720*x2728))+((cj1*sj2))+((r22*x2736))+((r21*x2722))+((r20*x2731))+(((-1.0)*r20*x2726*x2734)));
evalcond[6]=(x2721+((r02*x2736))+((r01*x2720*x2728))+((r01*x2722))+(((-1.0)*r00*x2726*x2734))+(((-1.0)*x2733))+((sj3*x2724)));
evalcond[7]=(x2721+((r20*x2720*x2722))+((r21*x2726))+((r20*x2728))+(((-1.0)*x2733))+(((-1.0)*r22*sj3*x2735))+(((-1.0)*sj3*x2729*x2734)));
evalcond[8]=((((-1.0)*r01*x2731*x2734))+(((-1.0)*x2730))+((cj3*x2724))+(((-1.0)*r02*sj3*x2735))+((r01*x2726))+(((-1.0)*sj2*x2727))+((r00*x2720*x2722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2738=((1.0)*cj5);
CheckValue<IkReal> x2739 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2738)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2739.valid){
continue;
}
CheckValue<IkReal> x2740=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2738)))),-1);
if(!x2740.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2739.value)+(((1.5707963267949)*(x2740.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2741=IKsin(j4);
IkReal x2742=IKcos(j4);
IkReal x2743=(sj1*sj2);
IkReal x2744=(cj5*sj3);
IkReal x2745=(cj5*r10);
IkReal x2746=(r00*sj5);
IkReal x2747=(r11*sj5);
IkReal x2748=(cj3*cj5);
IkReal x2749=((1.0)*cj1);
IkReal x2750=(cj3*sj5);
IkReal x2751=(r21*sj5);
IkReal x2752=(cj2*sj1);
IkReal x2753=(sj3*sj5);
IkReal x2754=(r01*sj5);
IkReal x2755=(cj2*x2749);
IkReal x2756=((1.0)*x2742);
IkReal x2757=((1.0)*x2741);
IkReal x2758=(cj3*x2741);
IkReal x2759=(cj3*x2742);
evalcond[0]=((((-1.0)*r22*x2756))+((x2741*x2751))+(((-1.0)*cj5*r20*x2757)));
evalcond[1]=(((x2741*x2754))+(((-1.0)*cj5*r00*x2757))+(((-1.0)*r02*x2756)));
evalcond[2]=((1.0)+(((-1.0)*x2745*x2757))+(((-1.0)*r12*x2756))+((x2741*x2747)));
evalcond[3]=(((r11*x2744))+((r12*x2758))+((r10*x2753))+((x2747*x2759))+(((-1.0)*cj3*x2745*x2756)));
evalcond[4]=(((r11*x2748))+((r10*x2750))+((r10*x2742*x2744))+(((-1.0)*r12*sj3*x2757))+(((-1.0)*sj3*x2747*x2756)));
evalcond[5]=(x2752+((r21*x2744))+((r22*x2758))+((r21*x2742*x2750))+((cj1*sj2))+(((-1.0)*r20*x2748*x2756))+((r20*x2753)));
evalcond[6]=(x2743+((r01*x2742*x2750))+((sj3*x2746))+(((-1.0)*r00*x2748*x2756))+((r01*x2744))+(((-1.0)*x2755))+((r02*x2758)));
evalcond[7]=(x2743+((r21*x2748))+(((-1.0)*sj3*x2751*x2756))+((r20*x2742*x2744))+((r20*x2750))+(((-1.0)*r22*sj3*x2757))+(((-1.0)*x2755)));
evalcond[8]=((((-1.0)*r02*sj3*x2757))+((cj3*x2746))+(((-1.0)*sj2*x2749))+((r01*x2748))+(((-1.0)*x2752))+((r00*x2742*x2744))+(((-1.0)*r01*x2753*x2756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2760=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2760.valid){
continue;
}
CheckValue<IkReal> x2761 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2761.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2760.value)))+(x2761.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2762=IKsin(j4);
IkReal x2763=IKcos(j4);
IkReal x2764=(sj1*sj2);
IkReal x2765=(cj5*sj3);
IkReal x2766=(cj5*r10);
IkReal x2767=(r00*sj5);
IkReal x2768=(r11*sj5);
IkReal x2769=(cj3*cj5);
IkReal x2770=((1.0)*cj1);
IkReal x2771=(cj3*sj5);
IkReal x2772=(r21*sj5);
IkReal x2773=(cj2*sj1);
IkReal x2774=(sj3*sj5);
IkReal x2775=(r01*sj5);
IkReal x2776=(cj2*x2770);
IkReal x2777=((1.0)*x2763);
IkReal x2778=((1.0)*x2762);
IkReal x2779=(cj3*x2762);
IkReal x2780=(cj3*x2763);
evalcond[0]=((((-1.0)*cj5*r20*x2778))+((x2762*x2772))+(((-1.0)*r22*x2777)));
evalcond[1]=(((x2762*x2775))+(((-1.0)*r02*x2777))+(((-1.0)*cj5*r00*x2778)));
evalcond[2]=((1.0)+(((-1.0)*x2766*x2778))+((x2762*x2768))+(((-1.0)*r12*x2777)));
evalcond[3]=(((r10*x2774))+((x2768*x2780))+((r12*x2779))+((r11*x2765))+(((-1.0)*cj3*x2766*x2777)));
evalcond[4]=(((r10*x2771))+(((-1.0)*r12*sj3*x2778))+((r10*x2763*x2765))+(((-1.0)*sj3*x2768*x2777))+((r11*x2769)));
evalcond[5]=(x2773+((r22*x2779))+((cj1*sj2))+((r20*x2774))+(((-1.0)*r20*x2769*x2777))+((r21*x2765))+((r21*x2763*x2771)));
evalcond[6]=(x2764+((r01*x2763*x2771))+((r01*x2765))+(((-1.0)*x2776))+(((-1.0)*r00*x2769*x2777))+((sj3*x2767))+((r02*x2779)));
evalcond[7]=(x2764+((r20*x2771))+((r20*x2763*x2765))+(((-1.0)*x2776))+(((-1.0)*r22*sj3*x2778))+((r21*x2769))+(((-1.0)*sj3*x2772*x2777)));
evalcond[8]=((((-1.0)*x2773))+((r01*x2769))+(((-1.0)*r01*x2774*x2777))+((r00*x2763*x2765))+((cj3*x2767))+(((-1.0)*r02*sj3*x2778))+(((-1.0)*sj2*x2770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x2781=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2781);
rxp0_2=(py*r00);
rxp1_0=(r21*x2781);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2782=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2782);
rxp0_2=(py*r00);
rxp1_0=(r21*x2782);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x2783=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x2783)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x2783)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2784=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2784);
rxp0_2=(py*r00);
rxp1_0=(r21*x2784);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2786=IKPowWithIntegerCheck(r12,-1);
if(!x2786.valid){
continue;
}
IkReal x2785=x2786.value;
CheckValue<IkReal> x2787=IKPowWithIntegerCheck(sj3,-1);
if(!x2787.valid){
continue;
}
if( IKabs((x2785*(x2787.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x2785)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2785*(x2787.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x2785))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x2785*(x2787.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x2785));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2788=IKsin(j4);
IkReal x2789=IKcos(j4);
IkReal x2790=(cj2*sj0);
IkReal x2791=(sj1*sj2);
IkReal x2792=(cj5*sj3);
IkReal x2793=(cj3*cj5);
IkReal x2794=(cj1*cj2);
IkReal x2795=(r21*sj5);
IkReal x2796=(r00*sj5);
IkReal x2797=(cj2*sj1);
IkReal x2798=(r01*sj5);
IkReal x2799=(r20*sj5);
IkReal x2800=(cj1*sj2);
IkReal x2801=((1.0)*cj0);
IkReal x2802=((1.0)*x2788);
IkReal x2803=(r20*x2789);
IkReal x2804=(r00*x2789);
IkReal x2805=(cj3*x2789);
IkReal x2806=((1.0)*x2789);
evalcond[0]=((((-1.0)*x2801))+(((-1.0)*r12*x2806)));
evalcond[1]=((((-1.0)*cj5*r20*x2802))+((x2788*x2795)));
evalcond[2]=(sj0+(((-1.0)*cj5*r00*x2802))+((x2788*x2798)));
evalcond[3]=(((sj1*x2790))+(((-1.0)*r12*sj3*x2802))+((sj0*x2800)));
evalcond[4]=(((cj3*r12*x2788))+(((-1.0)*sj0*x2791))+((cj1*x2790)));
evalcond[5]=(x2797+((r21*x2792))+((sj3*x2799))+(((-1.0)*x2793*x2803))+((x2795*x2805))+x2800);
evalcond[6]=(x2791+((r21*x2793))+((cj3*x2799))+(((-1.0)*x2794))+((x2792*x2803))+(((-1.0)*sj3*x2795*x2806)));
evalcond[7]=(((cj3*x2796))+(((-1.0)*sj3*x2798*x2806))+((r01*x2793))+((cj0*x2800))+((x2792*x2804))+((cj0*x2797)));
evalcond[8]=(((x2798*x2805))+((sj3*x2796))+((r01*x2792))+(((-1.0)*x2793*x2804))+(((-1.0)*x2791*x2801))+((cj0*x2794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2807=((1.0)*sj3);
IkReal x2808=((1.0)*cj5);
CheckValue<IkReal> x2809=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x2808))),-1);
if(!x2809.valid){
continue;
}
CheckValue<IkReal> x2810=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x2808))),-1);
if(!x2810.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x2809.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2810.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*r20*sj5*x2807))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x2807)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x2809.value)))+IKsqr(((x2810.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*r20*sj5*x2807))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x2807))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x2809.value)), ((x2810.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*r20*sj5*x2807))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x2807))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2811=IKsin(j4);
IkReal x2812=IKcos(j4);
IkReal x2813=(cj2*sj0);
IkReal x2814=(sj1*sj2);
IkReal x2815=(cj5*sj3);
IkReal x2816=(cj3*cj5);
IkReal x2817=(cj1*cj2);
IkReal x2818=(r21*sj5);
IkReal x2819=(r00*sj5);
IkReal x2820=(cj2*sj1);
IkReal x2821=(r01*sj5);
IkReal x2822=(r20*sj5);
IkReal x2823=(cj1*sj2);
IkReal x2824=((1.0)*cj0);
IkReal x2825=((1.0)*x2811);
IkReal x2826=(r20*x2812);
IkReal x2827=(r00*x2812);
IkReal x2828=(cj3*x2812);
IkReal x2829=((1.0)*x2812);
evalcond[0]=((((-1.0)*r12*x2829))+(((-1.0)*x2824)));
evalcond[1]=((((-1.0)*cj5*r20*x2825))+((x2811*x2818)));
evalcond[2]=(sj0+(((-1.0)*cj5*r00*x2825))+((x2811*x2821)));
evalcond[3]=((((-1.0)*r12*sj3*x2825))+((sj1*x2813))+((sj0*x2823)));
evalcond[4]=(((cj1*x2813))+((cj3*r12*x2811))+(((-1.0)*sj0*x2814)));
evalcond[5]=(((sj3*x2822))+((x2818*x2828))+((r21*x2815))+x2820+x2823+(((-1.0)*x2816*x2826)));
evalcond[6]=(((cj3*x2822))+(((-1.0)*x2817))+((x2815*x2826))+((r21*x2816))+x2814+(((-1.0)*sj3*x2818*x2829)));
evalcond[7]=(((r01*x2816))+((x2815*x2827))+(((-1.0)*sj3*x2821*x2829))+((cj3*x2819))+((cj0*x2820))+((cj0*x2823)));
evalcond[8]=(((x2821*x2828))+((r01*x2815))+(((-1.0)*x2814*x2824))+((cj0*x2817))+(((-1.0)*x2816*x2827))+((sj3*x2819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2830=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x2830.valid){
continue;
}
CheckValue<IkReal> x2831=IKPowWithIntegerCheck(r12,-1);
if(!x2831.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x2830.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x2831.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x2830.value)))+IKsqr(((-1.0)*cj0*(x2831.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x2830.value)), ((-1.0)*cj0*(x2831.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2832=IKsin(j4);
IkReal x2833=IKcos(j4);
IkReal x2834=(cj2*sj0);
IkReal x2835=(sj1*sj2);
IkReal x2836=(cj5*sj3);
IkReal x2837=(cj3*cj5);
IkReal x2838=(cj1*cj2);
IkReal x2839=(r21*sj5);
IkReal x2840=(r00*sj5);
IkReal x2841=(cj2*sj1);
IkReal x2842=(r01*sj5);
IkReal x2843=(r20*sj5);
IkReal x2844=(cj1*sj2);
IkReal x2845=((1.0)*cj0);
IkReal x2846=((1.0)*x2832);
IkReal x2847=(r20*x2833);
IkReal x2848=(r00*x2833);
IkReal x2849=(cj3*x2833);
IkReal x2850=((1.0)*x2833);
evalcond[0]=((((-1.0)*r12*x2850))+(((-1.0)*x2845)));
evalcond[1]=((((-1.0)*cj5*r20*x2846))+((x2832*x2839)));
evalcond[2]=(sj0+(((-1.0)*cj5*r00*x2846))+((x2832*x2842)));
evalcond[3]=(((sj1*x2834))+((sj0*x2844))+(((-1.0)*r12*sj3*x2846)));
evalcond[4]=(((cj1*x2834))+(((-1.0)*sj0*x2835))+((cj3*r12*x2832)));
evalcond[5]=(((sj3*x2843))+(((-1.0)*x2837*x2847))+x2844+x2841+((r21*x2836))+((x2839*x2849)));
evalcond[6]=((((-1.0)*sj3*x2839*x2850))+((cj3*x2843))+(((-1.0)*x2838))+((x2836*x2847))+x2835+((r21*x2837)));
evalcond[7]=(((cj3*x2840))+((x2836*x2848))+((cj0*x2844))+((cj0*x2841))+(((-1.0)*sj3*x2842*x2850))+((r01*x2837)));
evalcond[8]=(((sj3*x2840))+(((-1.0)*x2837*x2848))+((x2842*x2849))+(((-1.0)*x2835*x2845))+((cj0*x2838))+((r01*x2836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2851=((1.0)*cj5);
CheckValue<IkReal> x2852 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x2851))+(((-1.0)*cj0*r00*x2851)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2852.valid){
continue;
}
CheckValue<IkReal> x2853=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2851))+(((-1.0)*r20*sj5)))),-1);
if(!x2853.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2852.value)+(((1.5707963267949)*(x2853.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2854=IKsin(j4);
IkReal x2855=IKcos(j4);
IkReal x2856=(r11*sj5);
IkReal x2857=(cj2*sj0);
IkReal x2858=(cj5*r10);
IkReal x2859=(sj1*sj2);
IkReal x2860=(cj5*r01);
IkReal x2861=(cj5*r00);
IkReal x2862=(cj1*cj2);
IkReal x2863=(cj3*sj5);
IkReal x2864=(r21*sj5);
IkReal x2865=(cj5*sj3);
IkReal x2866=(sj3*sj5);
IkReal x2867=(cj2*sj1);
IkReal x2868=(r01*sj5);
IkReal x2869=(cj3*cj5);
IkReal x2870=(cj1*sj2);
IkReal x2871=((1.0)*cj0);
IkReal x2872=(cj5*r20);
IkReal x2873=((1.0)*x2855);
IkReal x2874=((1.0)*x2854);
IkReal x2875=(cj3*x2855);
IkReal x2876=(sj3*x2855);
IkReal x2877=(cj3*x2854);
evalcond[0]=(((x2854*x2864))+(((-1.0)*r22*x2873))+(((-1.0)*x2872*x2874)));
evalcond[1]=(sj0+(((-1.0)*r02*x2873))+(((-1.0)*x2861*x2874))+((x2854*x2868)));
evalcond[2]=((((-1.0)*x2871))+(((-1.0)*x2858*x2874))+(((-1.0)*r12*x2873))+((x2854*x2856)));
evalcond[3]=(((r22*x2877))+((r21*x2865))+(((-1.0)*r20*x2869*x2873))+((r21*x2855*x2863))+((r20*x2866))+x2867+x2870);
evalcond[4]=(((r20*x2855*x2865))+(((-1.0)*sj3*x2864*x2873))+(((-1.0)*x2862))+((r21*x2869))+(((-1.0)*r22*sj3*x2874))+((r20*x2863))+x2859);
evalcond[5]=(((cj0*x2870))+((r00*x2863))+(((-1.0)*r01*x2866*x2873))+(((-1.0)*r02*sj3*x2874))+((x2861*x2876))+((cj3*x2860))+((cj0*x2867)));
evalcond[6]=(((sj3*x2860))+((r00*x2866))+((r01*x2855*x2863))+(((-1.0)*x2859*x2871))+(((-1.0)*cj3*x2861*x2873))+((r02*x2877))+((cj0*x2862)));
evalcond[7]=(((sj1*x2857))+((r10*x2863))+(((-1.0)*sj3*x2856*x2873))+((x2858*x2876))+((r11*x2869))+((sj0*x2870))+(((-1.0)*r12*sj3*x2874)));
evalcond[8]=(((x2856*x2875))+((r10*x2866))+(((-1.0)*sj0*x2859))+((r11*x2865))+((r12*x2877))+(((-1.0)*cj3*x2858*x2873))+((cj1*x2857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2878=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2878.valid){
continue;
}
CheckValue<IkReal> x2879 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2879.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2878.value)))+(x2879.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2880=IKsin(j4);
IkReal x2881=IKcos(j4);
IkReal x2882=(r11*sj5);
IkReal x2883=(cj2*sj0);
IkReal x2884=(cj5*r10);
IkReal x2885=(sj1*sj2);
IkReal x2886=(cj5*r01);
IkReal x2887=(cj5*r00);
IkReal x2888=(cj1*cj2);
IkReal x2889=(cj3*sj5);
IkReal x2890=(r21*sj5);
IkReal x2891=(cj5*sj3);
IkReal x2892=(sj3*sj5);
IkReal x2893=(cj2*sj1);
IkReal x2894=(r01*sj5);
IkReal x2895=(cj3*cj5);
IkReal x2896=(cj1*sj2);
IkReal x2897=((1.0)*cj0);
IkReal x2898=(cj5*r20);
IkReal x2899=((1.0)*x2881);
IkReal x2900=((1.0)*x2880);
IkReal x2901=(cj3*x2881);
IkReal x2902=(sj3*x2881);
IkReal x2903=(cj3*x2880);
evalcond[0]=((((-1.0)*r22*x2899))+((x2880*x2890))+(((-1.0)*x2898*x2900)));
evalcond[1]=(sj0+((x2880*x2894))+(((-1.0)*r02*x2899))+(((-1.0)*x2887*x2900)));
evalcond[2]=(((x2880*x2882))+(((-1.0)*x2884*x2900))+(((-1.0)*x2897))+(((-1.0)*r12*x2899)));
evalcond[3]=(((r22*x2903))+((r21*x2891))+x2896+x2893+((r21*x2881*x2889))+((r20*x2892))+(((-1.0)*r20*x2895*x2899)));
evalcond[4]=(((r20*x2889))+(((-1.0)*sj3*x2890*x2899))+((r21*x2895))+(((-1.0)*x2888))+((r20*x2881*x2891))+(((-1.0)*r22*sj3*x2900))+x2885);
evalcond[5]=((((-1.0)*r02*sj3*x2900))+((cj0*x2896))+((cj0*x2893))+((cj3*x2886))+((r00*x2889))+(((-1.0)*r01*x2892*x2899))+((x2887*x2902)));
evalcond[6]=((((-1.0)*cj3*x2887*x2899))+((sj3*x2886))+((r02*x2903))+((r01*x2881*x2889))+((cj0*x2888))+((r00*x2892))+(((-1.0)*x2885*x2897)));
evalcond[7]=(((x2884*x2902))+(((-1.0)*r12*sj3*x2900))+((sj0*x2896))+((sj1*x2883))+((r11*x2895))+((r10*x2889))+(((-1.0)*sj3*x2882*x2899)));
evalcond[8]=(((x2882*x2901))+((r11*x2891))+((cj1*x2883))+((r10*x2892))+((r12*x2903))+(((-1.0)*sj0*x2885))+(((-1.0)*cj3*x2884*x2899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2904=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2904.valid){
continue;
}
CheckValue<IkReal> x2905 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2905.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2904.value)))+(x2905.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2906=IKsin(j4);
IkReal x2907=IKcos(j4);
IkReal x2908=(r11*sj5);
IkReal x2909=(cj2*sj0);
IkReal x2910=(cj5*r10);
IkReal x2911=(sj1*sj2);
IkReal x2912=(cj5*r01);
IkReal x2913=(cj5*r00);
IkReal x2914=(cj1*cj2);
IkReal x2915=(cj3*sj5);
IkReal x2916=(r21*sj5);
IkReal x2917=(cj5*sj3);
IkReal x2918=(sj3*sj5);
IkReal x2919=(cj2*sj1);
IkReal x2920=(r01*sj5);
IkReal x2921=(cj3*cj5);
IkReal x2922=(cj1*sj2);
IkReal x2923=((1.0)*cj0);
IkReal x2924=(cj5*r20);
IkReal x2925=((1.0)*x2907);
IkReal x2926=((1.0)*x2906);
IkReal x2927=(cj3*x2907);
IkReal x2928=(sj3*x2907);
IkReal x2929=(cj3*x2906);
evalcond[0]=((((-1.0)*x2924*x2926))+((x2906*x2916))+(((-1.0)*r22*x2925)));
evalcond[1]=(sj0+(((-1.0)*r02*x2925))+((x2906*x2920))+(((-1.0)*x2913*x2926)));
evalcond[2]=(((x2906*x2908))+(((-1.0)*x2923))+(((-1.0)*r12*x2925))+(((-1.0)*x2910*x2926)));
evalcond[3]=(((r22*x2929))+((r21*x2907*x2915))+((r20*x2918))+(((-1.0)*r20*x2921*x2925))+((r21*x2917))+x2919+x2922);
evalcond[4]=((((-1.0)*sj3*x2916*x2925))+((r20*x2915))+((r21*x2921))+(((-1.0)*x2914))+(((-1.0)*r22*sj3*x2926))+x2911+((r20*x2907*x2917)));
evalcond[5]=(((cj0*x2919))+((x2913*x2928))+(((-1.0)*r01*x2918*x2925))+((r00*x2915))+((cj3*x2912))+(((-1.0)*r02*sj3*x2926))+((cj0*x2922)));
evalcond[6]=(((sj3*x2912))+(((-1.0)*x2911*x2923))+((cj0*x2914))+((r00*x2918))+((r01*x2907*x2915))+(((-1.0)*cj3*x2913*x2925))+((r02*x2929)));
evalcond[7]=(((sj0*x2922))+((x2910*x2928))+(((-1.0)*sj3*x2908*x2925))+(((-1.0)*r12*sj3*x2926))+((r11*x2921))+((sj1*x2909))+((r10*x2915)));
evalcond[8]=(((r11*x2917))+((x2908*x2927))+(((-1.0)*cj3*x2910*x2925))+(((-1.0)*sj0*x2911))+((cj1*x2909))+((r12*x2929))+((r10*x2918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2930=cj5*cj5;
IkReal x2931=r21*r21;
IkReal x2932=r20*r20;
IkReal x2933=(r20*r21);
IkReal x2934=((1.0)*cj3);
IkReal x2935=((1.0)*cj5);
IkReal x2936=(cj1*sj2);
IkReal x2937=(cj5*sj5);
IkReal x2938=(sj3*sj5);
IkReal x2939=(cj2*sj1);
IkReal x2940=(r21*sj5);
CheckValue<IkReal> x2941=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2931*x2934))+(((-1.0)*x2930*x2932*x2934))+((cj3*x2930*x2931))+(((-1.0)*x2934*(r22*r22)))+(((2.0)*cj3*x2933*x2937)))),-1);
if(!x2941.valid){
continue;
}
CheckValue<IkReal> x2942 = IKatan2WithCheck(IkReal((((cj5*r21*r22*sj3))+((r22*x2939))+((r22*x2936))+((r20*r22*x2938)))),IkReal((((x2939*x2940))+((x2936*x2940))+((sj3*x2931*x2937))+(((-1.0)*x2932*x2935*x2938))+((sj3*x2933))+(((-1.0)*r20*x2935*x2939))+(((-1.0)*r20*x2935*x2936))+(((-2.0)*sj3*x2930*x2933)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2942.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2941.value)))+(x2942.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2943=IKsin(j4);
IkReal x2944=IKcos(j4);
IkReal x2945=(cj3*r21);
IkReal x2946=(r21*sj5);
IkReal x2947=(r20*sj5);
IkReal x2948=(cj5*r20);
IkReal x2949=((1.0)*x2944);
IkReal x2950=((1.0)*x2943);
evalcond[0]=((((-1.0)*x2948*x2950))+(((-1.0)*r22*x2949))+((x2943*x2946)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*cj3*x2948*x2949))+((cj5*r21*sj3))+((cj1*sj2))+((sj3*x2947))+((cj3*r22*x2943))+((sj5*x2944*x2945)));
evalcond[2]=((((-1.0)*sj3*x2946*x2949))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((cj5*x2945))+((cj3*x2947))+(((-1.0)*r22*sj3*x2950))+((sj3*x2944*x2948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2951=(cj5*sj4);
IkReal x2952=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x2952))+((r00*x2951))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x2951))+((r11*x2952))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x2952))+((r00*x2951))+((cj4*r02))))+IKsqr(((((-1.0)*r10*x2951))+((r11*x2952))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x2952))+((r00*x2951))+((cj4*r02))), ((((-1.0)*r10*x2951))+((r11*x2952))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2953=IKcos(j0);
IkReal x2954=IKsin(j0);
IkReal x2955=(r02*sj4);
IkReal x2956=((0.1)*sj5);
IkReal x2957=(sj1*sj2);
IkReal x2958=(cj5*r11);
IkReal x2959=((1.0)*sj3);
IkReal x2960=(r12*sj4);
IkReal x2961=((1.0)*cj3);
IkReal x2962=(cj1*cj2);
IkReal x2963=(r11*sj5);
IkReal x2964=(cj3*cj4);
IkReal x2965=(cj5*r01);
IkReal x2966=(r01*sj5);
IkReal x2967=((0.425)*cj1);
IkReal x2968=(cj2*sj1);
IkReal x2969=(r00*sj5);
IkReal x2970=(cj1*sj2);
IkReal x2971=(r10*sj5);
IkReal x2972=((1.0)*cj4);
IkReal x2973=((0.392)*x2954);
IkReal x2974=(cj4*cj5*r00);
IkReal x2975=(cj4*cj5*r10);
IkReal x2976=((0.392)*x2953);
IkReal x2977=((1.0)*x2953);
IkReal x2978=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*r02*x2972))+(((-1.0)*r00*x2978))+x2954+((sj4*x2966)));
evalcond[1]=((((-1.0)*r12*x2972))+(((-1.0)*x2977))+(((-1.0)*r10*x2978))+((sj4*x2963)));
evalcond[2]=((((0.134)*x2954))+(((-1.0)*x2962*x2976))+(((-1.0)*px))+(((-0.1)*x2965))+((x2957*x2976))+(((-1.0)*r00*x2956))+(((-1.0)*x2953*x2967)));
evalcond[3]=((((-1.0)*r10*x2956))+(((-0.134)*x2953))+(((-1.0)*x2954*x2967))+(((-1.0)*x2962*x2973))+(((-1.0)*py))+((x2957*x2973))+(((-0.1)*x2958)));
evalcond[4]=((((-1.0)*x2955*x2959))+((x2953*x2970))+((cj3*x2965))+((cj3*x2969))+((sj3*x2974))+((x2953*x2968))+(((-1.0)*cj4*x2959*x2966)));
evalcond[5]=(((sj3*x2965))+((sj3*x2969))+((x2953*x2962))+((x2964*x2966))+(((-1.0)*x2957*x2977))+((cj3*x2955))+(((-1.0)*x2961*x2974)));
evalcond[6]=(((x2954*x2970))+((x2954*x2968))+(((-1.0)*x2959*x2960))+((sj3*x2975))+((cj3*x2971))+(((-1.0)*cj4*x2959*x2963))+((cj3*x2958)));
evalcond[7]=(((sj3*x2958))+((x2954*x2962))+((cj3*x2960))+((sj3*x2971))+((x2963*x2964))+(((-1.0)*x2961*x2975))+(((-1.0)*x2954*x2957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2979=cj5*cj5;
IkReal x2980=r21*r21;
IkReal x2981=r20*r20;
IkReal x2982=(r20*r21);
IkReal x2983=(sj1*sj2);
IkReal x2984=(r21*sj5);
IkReal x2985=(cj1*cj2);
IkReal x2986=(cj5*r20);
IkReal x2987=(cj5*sj5);
IkReal x2988=(cj3*r22);
IkReal x2989=(sj3*x2980);
CheckValue<IkReal> x2990=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x2979*x2981))+(((-2.0)*sj3*x2982*x2987))+(((-1.0)*x2979*x2989))+x2989)),-1);
if(!x2990.valid){
continue;
}
CheckValue<IkReal> x2991 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2985))+((cj5*r21*x2988))+((r22*x2983))+((r20*sj5*x2988)))),IkReal((((x2983*x2984))+(((-2.0)*cj3*x2979*x2982))+((cj3*x2982))+(((-1.0)*x2984*x2985))+(((-1.0)*cj3*x2981*x2987))+(((-1.0)*x2983*x2986))+((cj3*x2980*x2987))+((x2985*x2986)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2991.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2990.value)))+(x2991.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2992=IKsin(j4);
IkReal x2993=IKcos(j4);
IkReal x2994=(cj3*r21);
IkReal x2995=(r21*sj5);
IkReal x2996=(r20*sj5);
IkReal x2997=(cj5*r20);
IkReal x2998=((1.0)*x2993);
IkReal x2999=((1.0)*x2992);
evalcond[0]=((((-1.0)*r22*x2998))+((x2992*x2995))+(((-1.0)*x2997*x2999)));
evalcond[1]=(((cj2*sj1))+((sj5*x2993*x2994))+((cj5*r21*sj3))+((cj3*r22*x2992))+((cj1*sj2))+(((-1.0)*cj3*x2997*x2998))+((sj3*x2996)));
evalcond[2]=((((-1.0)*sj3*x2995*x2998))+((cj3*x2996))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((sj3*x2993*x2997))+(((-1.0)*r22*sj3*x2999))+((cj5*x2994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3000=(cj5*sj4);
IkReal x3001=(sj4*sj5);
if( IKabs((((r00*x3000))+(((-1.0)*r01*x3001))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x3001))+(((-1.0)*r10*x3000))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x3000))+(((-1.0)*r01*x3001))+((cj4*r02))))+IKsqr((((r11*x3001))+(((-1.0)*r10*x3000))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x3000))+(((-1.0)*r01*x3001))+((cj4*r02))), (((r11*x3001))+(((-1.0)*r10*x3000))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x3002=IKcos(j0);
IkReal x3003=IKsin(j0);
IkReal x3004=(r02*sj4);
IkReal x3005=((0.1)*sj5);
IkReal x3006=(sj1*sj2);
IkReal x3007=(cj5*r11);
IkReal x3008=((1.0)*sj3);
IkReal x3009=(r12*sj4);
IkReal x3010=((1.0)*cj3);
IkReal x3011=(cj1*cj2);
IkReal x3012=(r11*sj5);
IkReal x3013=(cj3*cj4);
IkReal x3014=(cj5*r01);
IkReal x3015=(r01*sj5);
IkReal x3016=((0.425)*cj1);
IkReal x3017=(cj2*sj1);
IkReal x3018=(r00*sj5);
IkReal x3019=(cj1*sj2);
IkReal x3020=(r10*sj5);
IkReal x3021=((1.0)*cj4);
IkReal x3022=((0.392)*x3003);
IkReal x3023=(cj4*cj5*r00);
IkReal x3024=(cj4*cj5*r10);
IkReal x3025=((0.392)*x3002);
IkReal x3026=((1.0)*x3002);
IkReal x3027=((1.0)*cj5*sj4);
evalcond[0]=(x3003+(((-1.0)*r00*x3027))+(((-1.0)*r02*x3021))+((sj4*x3015)));
evalcond[1]=((((-1.0)*r12*x3021))+(((-1.0)*x3026))+(((-1.0)*r10*x3027))+((sj4*x3012)));
evalcond[2]=((((-1.0)*x3002*x3016))+(((-1.0)*x3011*x3025))+(((-1.0)*r00*x3005))+((x3006*x3025))+(((-1.0)*px))+(((0.134)*x3003))+(((-0.1)*x3014)));
evalcond[3]=((((-0.1)*x3007))+(((-1.0)*r10*x3005))+(((-1.0)*x3003*x3016))+(((-1.0)*x3011*x3022))+((x3006*x3022))+(((-1.0)*py))+(((-0.134)*x3002)));
evalcond[4]=(((sj3*x3023))+(((-1.0)*cj4*x3008*x3015))+((cj3*x3018))+((cj3*x3014))+((x3002*x3019))+((x3002*x3017))+(((-1.0)*x3004*x3008)));
evalcond[5]=((((-1.0)*x3010*x3023))+((x3013*x3015))+((sj3*x3018))+((sj3*x3014))+((x3002*x3011))+((cj3*x3004))+(((-1.0)*x3006*x3026)));
evalcond[6]=(((sj3*x3024))+((cj3*x3020))+(((-1.0)*cj4*x3008*x3012))+((x3003*x3017))+((x3003*x3019))+((cj3*x3007))+(((-1.0)*x3008*x3009)));
evalcond[7]=(((sj3*x3020))+(((-1.0)*x3010*x3024))+(((-1.0)*x3003*x3006))+((x3012*x3013))+((x3003*x3011))+((sj3*x3007))+((cj3*x3009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur5 (963bb46f54225b6a4b87ef10bb90c7a2)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004b"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
